<apex:page tabStyle="Negoptim__Assortment_BU__c" controller="Negoptim.AssortmentMatrixComparatorController" sidebar="false" setup="false" applyHtmlTag="false" lightningStylesheets="true" 
    applyBodyTag="false" showHeader="false">
    <html class="slds-scope">
    <head>
        <apex:slds />
        <apex:stylesheet value="{!URLFOR($Resource.Negoptim__Assets, 'assets/css/app.css')}" />
        <style>
            .sticky-category-row td {
                background-color: #D8EDFF !important;
                position: sticky !important;
                z-index: 3;
            }

            .blank-cell {
                background: repeating-linear-gradient( 45deg,
                #7ad4ef 10px,
                #ffffff 15px);
                width: 100%;
                height: 15px;
                display: inline-block;
            }

            .client-status-null {
                color: #0c92ba !important;
            }

            .dateFormat {
                display: none;
            }

            .dateOnlyInput input {
                width: unset;
            }

            .inputField {
                width: 95% !important
            }

            .consoCell {
                background-color: #fbefdf !important;
            }

            .treegrid-container {
                overflow: auto;
                padding-bottom: 10px;
                font-size: 9pt;
            }

            .grid-container {
                font-size: 9pt;
                overflow: auto;
            }

            .sticky-thead th {
                position: sticky !important;
                z-index: 4;
            }

            .header-row-1 th {
                top: 0;
            }

            .grid-container thead {
                min-height: 115px;
                height: 115px;
            }

            .grid-container td,
            .treegrid-container td {
                text-align: right !important;
                vertical-align: middle !important;
            }

            .grid-container td input {
                text-align: right !important;
            }

            .grid-container th,
            .treegrid-container th {
                text-align: center !important;
                vertical-align: middle !important;
                font-weight: normal;
            }
            #treegrid thead > tr {
                position: sticky !important;
                top: 0px;
                z-index: 2;
            }
             #treegrid thead tr + tr {
                position: sticky !important;
                top: 1.5rem;
                z-index: 2;
            }

            .INNO_INTRO_DATE_LESS_N a {
            color: {!JSINHTMLENCODE(INNO_INTRO_DATE_LESS_N)} !important;
            }
            .INNO_INTRO_DATE_GREATER_N a {
            color: {!JSINHTMLENCODE(INNO_INTRO_DATE_GREATER_N)} !important;
            }
            .STOP_DATE_LESS_N a {
            color: {!JSINHTMLENCODE(STOP_DATE_LESS_N)} !important;
            }
            .STOP_DATE_GREATER_N a {
            color: {!JSINHTMLENCODE(STOP_DATE_GREATER_N)} !important;
            }

            .WhiteBG {
                background-color: white;
            }

            .WhiteBG::selection {
                background-color: rgb(216, 237, 255) !important;
            }

            .no-white-space-container .slds-button {
                white-space: nowrap !important;
            }
        </style>
    </head>
    <body class="slds-brand-band slds-brand-band_large slds-scrollable_none">
        <apex:pageMessages id="Messages" />
        <apex:actionStatus id="globalloading">
            <apex:facet name="start">
                <div class="slds-spinner_container">
                    <div role="status" class="slds-spinner slds-spinner_large">
                        <span class="slds-assistive-text">
                            {!JSINHTMLENCODE($Label.Loading)}
                        </span>
                        <div class="slds-spinner__dot-a"></div>
                        <div class="slds-spinner__dot-b"></div>
                    </div>
                </div>
            </apex:facet>
        </apex:actionStatus>
        <apex:outputPanel id="filterSectionPanel">
            <!-- PAGE HEADER -->
            <div class="slds-page-header slds-m-around_small" id="pageHeader">
                <!-- LAYOUT GRID -->
                <div class="slds-grid">
                    <!-- GRID COL -->
                    <div class="slds-col slds-has-flexi-truncate">
                        <div class="slds-media slds-no-space slds-grow">
                            <div class="slds-media__figure">
                                <svg aria-hidden="true" class="slds-icon slds-icon-standard-contact" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                                    <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/standard-sprite/svg/symbols.svg#report')}"></use>
                                </svg>
                            </div>
                            <div class="slds-media__body">
                                <!-- <p class="slds-text-title_caps slds-line-height_reset">{!$Label.negoptim__LBL_Assortment_Conso}</p> -->
                                <p class="slds-text-title_caps slds-line-height_reset">
                                    <apex:outputText value="{!$ObjectType.Negoptim__Assortment_BU__c.labelPlural}" />
                                </p>
                                <apex:outputPanel id="title">
                                    <h1 class="slds-page-header__title slds-m-right_small slds-align-middle slds-truncate" title="{!JSINHTMLENCODE(title)}">
                                        <apex:outputText value="{!title}" />
                                    </h1>
                                </apex:outputPanel>
                            </div>
                        </div>
                    </div>
                    <apex:outputPanel id="filterButtonsSection">
                        <div class="slds-col slds-no-flex slds-grid slds-align-top">
                            <div role="group">
                                <!-- apply filters button -->
                                <!-- buttons -->
                                <button id="previousBtn" class="slds-button slds-button_neutral {!IF(noOfRecords==0, 'slds-hide','')}" onclick="moveDatePickerOutOfTheForm();backToFilterPage();">
                                    <apex:outputText value="{!$Label.negoptim__LBL_Back_To_Filter_Page}"></apex:outputText>
                                </button>
                                <!-- buttons -->
                                <button class="slds-button slds-button_neutral" onclick="cancel();return false;">
                                    <apex:outputText value="{!$Label.negoptim__LBL_Back_To_Home_Page}"></apex:outputText>
                                </button>
                                <button id="changeScopehBtn" class="slds-button slds-button_neutral {!IF(noOfRecords!=0, 'slds-hide','')}" onclick="applyScopeFilters();">
                                    <apex:outputText value="{!$Label.negoptim__Search}"></apex:outputText>
                                </button>
                                <button id="ExportExcelBtn" class="slds-button slds-button_neutral {!IF(noOfRecords == 0, 'slds-hide','')}" onclick="exportToExcel();">
                                    <span id="downloadIconContainer">
                                    </span>
                                    <apex:outputText value="{!$Label.negoptim__LBL_Export_Details}" />
                                </button>
                                <button id="saveBtn" class="slds-button slds-button_brand {!IF(OR(readOnlyUser,noOfRecords == 0), 'slds-hide','')}" onclick="save();">
                                    <apex:outputText value="{!$Label.negoptim__Save}"></apex:outputText>
                                </button>
                                <button id="fullScreenBtn" class="slds-button slds-button_icon slds-button_icon-border-filled {!IF(noOfRecords == 0, 'slds-hide','')}"
                                    onclick="openFullScreen();">
                                    <span id="expandIconContainer">
                                    </span>
                                    <span class="slds-assistive-text">
                                        <apex:outputText value="{!$Label.negoptim__LBL_Open_Fullscreen}" />
                                    </span>
                                </button>
                            </div>
                        </div>
                    </apex:outputPanel>
                </div>
                <apex:outputPanel id="filterDetailsSection">
                    <div class="slds-grid slds-page-header__detail-row">
                        <!-- BU Target format filter -->
                        <div class="slds-size_9-of-12 slds-grid {!IF(noOfRecords != 0, ' slds-hide', '')}">
                            <div class="slds-size_2-of-9 slds-m-right_x-small">
                                <div class="slds-form-element__control" style="margin-left: .25rem;">
                                    <div class="slds-combobox_container">
                                        <div class="slds-combobox slds-dropdown-trigger slds-dropdown-trigger_click">
                                            <input type="text" class="slds-input slds-combobox__input" id="selectedBuFormatOptions" autoComplete="off" onfocus="showBuFormatOptions();"
                                                placeholder="{!JSINHTMLENCODE($ObjectType.Orga_BU__c.fields.Format_Origin__c.label)}"
                                                value="{!selectedformatOrigin}" />
                                            <div id="buFormatOptionsSection" class="slds-popover slds-popover_full-width slds-hide" style="position: absolute;">
                                                <div class="slds-popover__body" id="dialog-body-id-26">
                                                    <fieldset class="slds-form-element">
                                                        <div class="slds-form-element__control">
                                                            <apex:repeat value="{!formtatOriginSelectOptionList}" var="channel">
                                                                <div class="slds-checkbox">
                                                                    <input type="checkbox" name="{!channel.label}" id="checkbox-{!channel.value}" class="buFormatOption" value="{!channel.value}"
                                                                        onchange="buFormatSelectionChange(this);" />
                                                                    <label class="slds-checkbox__label" for="checkbox-{!channel.value}">
                                                                        <span class="slds-checkbox_faux"></span>
                                                                        <span class="slds-form-element__label">{!channel.label}</span>
                                                                    </label>
                                                                </div>
                                                            </apex:repeat>
                                                        </div>
                                                    </fieldset>
                                                </div>
                                                <div class="slds-popover__footer slds-popover__footer_form">
                                                    <button class="slds-button slds-button_brand" onclick="closeAllInputs();return false;">
                                                        <apex:outputText value="{!$Label.negoptim__OK}" />
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="slds-size_2-of-9 slds-m-right_x-small">
                                <div class="slds-form-element">
                                    <div class="slds-form-element__control">
                                        <div class="slds-combobox_container">
                                            <div class="slds-combobox slds-dropdown-trigger slds-dropdown-trigger_click" aria-expanded="false" aria-haspopup="listbox"
                                                role="combobox" id="country_combobox">
                                                <div class="slds-combobox_form-element" role="none">
                                                    <input type="text" class="slds-input slds-combobox_input" id="country_scope" aria-autocomplete="list" aria-controls="listbox-id-9"
                                                        autoComplete="on" role="textbox" placeholder="{!JSINHTMLENCODE($Label.LBL_Filter_Country)}"
                                                        onmousedown="openListCountry();" onfocus="openListCountry();" onkeyup="openListCountry();"
                                                    />
                                                </div>
                                                <div id="listbox-id-9" class="slds-dropdown slds-dropdown_length-5 slds-dropdown_fluid" role="listbox">
                                                    <ul class="slds-listbox slds-listbox_vertical" role="presentation" id="listCountries">
                                                        <li>
                                                            <div class="slds-spinner_container">
                                                                <div role="status" class="slds-spinner slds-spinner_small slds-spinner_brand">
                                                                    <span class="slds-assistive-text">Loading</span>
                                                                    <div class="slds-spinner__dot-a"></div>
                                                                    <div class="slds-spinner__dot-b"></div>
                                                                </div>
                                                            </div>
                                                        </li>
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="slds-size_2-of-12 slds-m-right_x-small">
                                <div class="slds-form-element">
                                    <div class="slds-form-element__control">
                                        <div class="slds-combobox_container">
                                            <div class="slds-combobox slds-dropdown-trigger slds-dropdown-trigger_click" aria-expanded="false" aria-haspopup="listbox"
                                                role="combobox" id="category_combobox">
                                                <div class="slds-combobox_form-element" role="none">
                                                    <input type="text" class="slds-input slds-combobox_input" id="category_scope" aria-autocomplete="list" aria-controls="listbox-id-9"
                                                        autoComplete="on" role="textbox" placeholder="{!JSINHTMLENCODE($ObjectType.Assortment_BU__c.fields.Orga_HE__c.label)}"
                                                        onmousedown="openListCategory();" onfocus="openListCategory();" onkeyup="openListCategory();"
                                                    />
                                                </div>
                                                <div id="listbox-id-9" class="slds-dropdown slds-dropdown_length-5 slds-dropdown_fluid" role="listbox">
                                                    <ul class="slds-listbox slds-listbox_vertical" role="presentation" id="listCategories">
                                                        <li>
                                                            <div class="slds-spinner_container">
                                                                <div role="status" class="slds-spinner slds-spinner_small slds-spinner_brand">
                                                                    <span class="slds-assistive-text">Loading</span>
                                                                    <div class="slds-spinner__dot-a"></div>
                                                                    <div class="slds-spinner__dot-b"></div>
                                                                </div>
                                                            </div>
                                                        </li>
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="slds-size_1-of-12 slds-m-right_x-small">
                                <div class="slds-form-element">
                                    <div class="slds-form-element__control">
                                        <div class="slds-combobox_container">
                                            <div class="slds-combobox slds-dropdown-trigger slds-dropdown-trigger_click" aria-expanded="false" aria-haspopup="listbox"
                                                role="combobox" id="category_combobox">
                                                <div class="slds-combobox_form-element" role="none">
                                                    <input type="Number" min="1" class="slds-input slds-combobox_input" id="year_scope" placeholder="{!JSINHTMLENCODE($ObjectType.Assortment_BU__c.fields.Year__c.label)}"
                                                        style="padding-right: 0px;" onchange="setYear();" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="slds-size_2-of-9">
                                <div class="slds-form-element__control">
                                    <div class="slds-radio_button-group">
                                        <span class="slds-button slds-radio_button">
                                            <input name="radio" type="radio" id="Nego" value="Nego" checked="true" />
                                            <label class="slds-radio_button__label" for="Nego" style="line-height: unset;margin-right: unset;">
                                                <span class="slds-radio_faux">
                                                    <apex:outputText value="{!negoRecordType}" />
                                                </span>
                                            </label>
                                        </span>
                                        <span class="slds-button slds-radio_button">
                                            <input name="radio" type="radio" id="Target" value="Target" />
                                            <label class="slds-radio_button__label" for="Target" style="line-height: unset;margin-right: unset;">
                                                <span class="slds-radio_faux">
                                                    <apex:outputText value="{!targetRecordType}" />
                                                </span>
                                            </label>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- show/hide totals tree -->
                        <div class="slds-m-right_x-small slds-grid {!IF(noOfRecords==0, 'slds-hide', '')}">
                            <span class="slds-form-element__label slds-m-bottom_none">
                                <apex:outputText value="{!$Label.negoptim__LBL_Show_Total}" />
                            </span>
                            <span>
                                <label class="slds-checkbox_toggle">
                                    <input type="checkbox" name="checkbox-toggle" value="checkbox-toggle" aria-describedby="checkbox-toggle" id="toggleTotalsTree"
                                        onchange="toggleTotalsTree();" />
                                    <span id="checkbox-toggle" class="slds-checkbox_faux_container" aria-live="assertive">
                                        <span class="slds-checkbox_faux"></span>
                                        <span class="slds-checkbox_on"></span>
                                        <span class="slds-checkbox_off"></span>
                                    </span>
                                </label>
                            </span>
                        </div>
                        <!-- search box -->
                        <input class="slds-size_2-of-12 slds-input slds-m-right_x-small {!IF(noOfRecords==0, 'slds-hide', '')}" id="searchBox" autocomplete="off"
                            type="text" placeholder="{!JSINHTMLENCODE($Label.Search)}..." value="" />
                        <button class="slds-button slds-button_neutral {!IF(noOfRecords==0, 'slds-hide', '')}" onclick="applyFilters();return false;">
                            <apex:outputText value="{!$Label.negoptim__Search}"></apex:outputText>
                        </button>
                    </div>
                </apex:outputPanel>
            </div>
        </apex:outputPanel>
        <div id="outTheForm">
            
        </div>
        <apex:form id="theForm">
            <apex:actionFunction action="{!updateAssortmentWrappers}" name="updateAssortmentWrappers" status="scrollableDivLoading" reRender="tableBodyAndFooter, tableTreeGrid" oncomplete="afterRerender();" >
                <apex:param name="isAfterSave" assignTo="{!isAfterSave}" value="true" />
            </apex:actionFunction>
            <apex:actionFunction action="{!first}" name="first" status="scrollableDivLoading" reRender="tableBodyAndFooter, tableTreeGrid" oncomplete="afterRerender();">
                <apex:param name="changedAssortmentDetailsIdSet_serialized" assignTo="{!changedAssortmentDetailsIdSet_serialized}" value="" />
            </apex:actionFunction>
            <apex:actionFunction action="{!next}" name="next" status="scrollableDivLoading" reRender="tableBodyAndFooter, tableTreeGrid" oncomplete="afterRerender();">
                <apex:param name="changedAssortmentDetailsIdSet_serialized" assignTo="{!changedAssortmentDetailsIdSet_serialized}" value="" />
            </apex:actionFunction>
            <apex:actionFunction action="{!previous}" name="previous" status="scrollableDivLoading" reRender="tableBodyAndFooter, tableTreeGrid" oncomplete="afterRerender();">
                <apex:param name="changedAssortmentDetailsIdSet_serialized" assignTo="{!changedAssortmentDetailsIdSet_serialized}" value="" />
            </apex:actionFunction>
            <apex:actionFunction action="{!last}" name="last" status="scrollableDivLoading" reRender="tableBodyAndFooter, tableTreeGrid" oncomplete="afterRerender();">
                <apex:param name="changedAssortmentDetailsIdSet_serialized" assignTo="{!changedAssortmentDetailsIdSet_serialized}" value="" />
            </apex:actionFunction>
            <apex:actionFunction action="{!refreshPageSize}" name="refreshPageSize" status="scrollableDivLoading" reRender="tableBodyAndFooter, tableTreeGrid" oncomplete="afterRerender();">
                <apex:param name="changedAssortmentDetailsIdSet_serialized" assignTo="{!changedAssortmentDetailsIdSet_serialized}" value="" />
            </apex:actionFunction>
            <apex:actionFunction action="{!validateAssortment}" name="validateAssortment" rendered="{!!readOnlyUser}" status="globalloading" reRender="jsPanel, tableBodyAndFooter, tableTreeGrid" oncomplete="afterRerender();">
                <apex:param name="assortmentToValidateId" assignTo="{!assortmentToValidateId}" value="" />
                <apex:param name="isAfterSave" assignTo="{!isAfterSave}" value="true" />
            </apex:actionFunction>
            <apex:actionFunction action="{!requestForApproval}" name="requestForApproval" rendered="{!!readOnlyUser}" status="globalloading" reRender="jsPanel, tableBodyAndFooter, tableTreeGrid, messages" oncomplete="afterRerender();">
                <apex:param name="assortmentToValidateId" assignTo="{!assortmentToValidateId}" value="" />
                <apex:param name="isAfterSave" assignTo="{!isAfterSave}" value="true" />
            </apex:actionFunction>
            <apex:actionFunction name="search" action="{!search}" reRender="tableBodyAndFooter, tableTreeGrid" oncomplete="afterRerender();" status="globalloading">
                <apex:param name="searchTerm" assignTo="{!searchTerm}" value="" />
            </apex:actionFunction>
            <apex:actionFunction name="changePageScope" action="{!changePageScope}" reRender="theForm, filterButtonsSection, filterDetailsSection, title, messages" oncomplete="scopeReady();" status="globalloading">
                <apex:param name="formatOrigin" assignTo="{!selectedformatOrigin}" value="" />
                <apex:param name="buCentral" assignTo="{!selectedBuCentral}" value="" />
                <apex:param name="orgaHe" assignTo="{!selectedOrgaHe}" value="" />
                <apex:param name="year" assignTo="{!selectedYear}" value="" />
                <apex:param name="selectedRecordType" assignTo="{!selectedRecordType}" value="" />
            </apex:actionFunction>
            <apex:actionFunction name="backToFilterPage" action="{!backToFilterPage}" reRender="theForm, filterButtonsSection, filterDetailsSection, title" oncomplete="setFilterSection()" status="globalloading" />
            <apex:actionFunction action="{!exportToExcel}" name="exportToExcelAction" status="globalloading" />
            <div class="slds-p-horizontal_small">
                <apex:outputPanel id="thePageBlock" layout="block" styleClass="slds-card">
                    <apex:outputPanel id="tableTreeGrid">
                        <apex:outputPanel rendered="{!noOfRecords != 0}">
                            <div class="treegrid-container" id="treegrid-container" onclick="setDivSize();">
                                <table id="treegrid" class="slds-table">
                                    <thead>
                                        <tr>
                                            <th style="display:none;"></th>
                                            <th style="display:none;"></th>
                                            <th style="min-width:200px;"></th>
                                            <th colspan="3" class="slds-text-title_caps slds-border_right slds-border_left">
                                                <apex:outputText value="{!$Label.negoptim__LBL_Assortment_Conso}" />
                                            </th>
                                            <apex:repeat value="{!assortmentsIdList}" var="assortmentId">
                                                <th colspan="3" class="slds-border_right slds-border_left">
                                                    <apex:outputLink target="_blank" value="/{!assortmentId}">
                                                        <apex:outputText value="{!assortmentsMap[assortmentId].assortment.Name}" />
                                                    </apex:outputLink>
                                                </th>
                                            </apex:repeat>
                                        </tr>
                                        <tr class="slds-border_top slds-border_bottom">
                                            <th style="display:none;"></th>
                                            <th style="display:none;"></th>
                                            <th style="text-align:left;"></th>
                                            <!-- conso fields -->
                                            <th class="slds-border_right slds-border_left">
                                                <apex:outputText value="{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__New_Client_ProductNumber__c.label}" />
                                            </th>
                                            <th class="slds-border_right slds-border_left">
                                                <apex:outputText value="{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__New_Client_WD_MarketBased_Pts__c.label}" />
                                            </th>
                                            <th class="slds-border_right slds-border_left">
                                                <apex:outputText value="{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__New_Client_WD_ClientBased_Pts__c.label}" />
                                            </th>
                                            <apex:repeat value="{!assortmentsIdList}" var="assortmentId">
                                                <th class="slds-border_right slds-border_left">
                                                    <apex:outputText value="{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__New_Client_ProductNumber__c.label}" />
                                                </th>
                                                <th class="slds-border_right slds-border_left">
                                                    <apex:outputText value="{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__New_Client_WD_MarketBased_Pts__c.label}" />
                                                </th>
                                                <th class="slds-border_right slds-border_left">
                                                    <apex:outputText value="{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__New_Client_WD_ClientBased_Pts__c.label}" />
                                                </th>
                                            </apex:repeat>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td style="display:none;"></td>
                                            <td style="display:none;"></td>
                                            <td style="text-align:left !important;"></td>
                                            <!-- conso fields -->
                                            <td class="slds-border_right slds-border_left"></td>
                                            <td class="slds-border_right slds-border_left"></td>
                                            <td class="slds-border_right slds-border_left"></td>
                                            <apex:repeat value="{!assortmentsIdList}" var="assortmentId">
                                                <td class="slds-border_right slds-border_left"></td>
                                                <td class="slds-border_right slds-border_left"></td>
                                                <td class="slds-border_right slds-border_left"></td>
                                            </apex:repeat>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </apex:outputPanel>
                    </apex:outputPanel>
                    <div id="scrollableDiv" class="slds-card">
                        <apex:actionStatus id="scrollableDivLoading">
                            <apex:facet name="start">
                                <div class="slds-spinner_container">
                                    <div role="status" class="slds-spinner slds-spinner_large">
                                        <span class="slds-assistive-text">
                                            {!JSINHTMLENCODE($Label.Loading)}
                                        </span>
                                        <div class="slds-spinner__dot-a"></div>
                                        <div class="slds-spinner__dot-b"></div>
                                    </div>
                                </div>
                            </apex:facet>
                        </apex:actionStatus>
                        <apex:outputPanel id="tableBodyAndFooter">
                            <apex:outputPanel rendered="{!noOfRecords != 0}">
                                <div class="grid-container">
                                    <div class="slds-scrollable slds-card" style="height: 73vh;" id="scrollableDivChild">
                                        <table class="slds-table slds-no-cell-focus">
                                            <thead>
                                                <tr class="slds-border_top slds-border_bottom sticky-thead header-row-1">
                                                    <th class="slds-border_right slds-border_left WhiteBG" rowspan="2">
                                                        <apex:outputText value="{!$ObjectType.Product2.fields.ProductCode.label}" />
                                                    </th>
                                                    <th class="slds-border_right slds-border_left WhiteBG" rowspan="2">
                                                        <apex:outputText value="{!$ObjectType.Product2.fields.Name.label}" />
                                                    </th>
                                                    <th class="slds-border_right slds-border_left WhiteBG" rowspan="2">
                                                        <apex:outputText value="{!$ObjectType.Product2.fields.Negoptim__Product_EAN__c.label}" />
                                                    </th>
                                                    <th class="slds-border_right slds-border_left WhiteBG" rowspan="2">
                                                        <apex:outputText value="{!$ObjectType.Product2.fields.Negoptim__VIP__c.label}" />
                                                    </th>
                                                    <th class="slds-border_right slds-border_left" colspan="3">
                                                        <apex:outputText value="{!$Label.negoptim__LBL_Assortment_Conso}" />
                                                    </th>
                                                    <apex:repeat value="{!assortmentsIdList}" var="assortmentId">
                                                        <th class="slds-border_right slds-border_left" colspan="6" style="white-space:unset;">
                                                            <apex:outputLink target="_blank" value="/{!assortmentId}">
                                                                <apex:outputText value="{!assortmentsMap[assortmentId].assortment.Name}" />
                                                            </apex:outputLink>
                                                            <apex:outputText value="({!assortmentsMap[assortmentId].statusLabel})" />
                                                            <!-- requestForApproval button -->
                                                            <apex:commandButton styleClass="slds-button slds-button_brand slds-m-left_small" value="{!$Label.negoptim__LBL_Request_For_Approval_DV_Nego}" style="line-height: 1rem;" rendered="{!!readOnlyUser}"
                                                                                onclick="confirmAssortmentRequestForApproval('{!assortmentId}', '{!assortmentsMap[assortmentId].assortment.Name}'); return false;"
                                                                disabled="{!AND(assortmentsMap[assortmentId].assortment.Status__c != 'Open (in bulding process)', assortmentsMap[assortmentId].nbASDinPreparation == 0)}"/>
                                                            <!-- validate Button -->
                                                            <apex:commandButton styleClass="slds-button slds-button_brand slds-m-left_small" value="{!$Label.negoptim__Validate}" style="line-height: 1rem;" rendered="{!!readOnlyUser}"
                                                                                onclick="confirmAssortmentValidation('{!assortmentId}', '{!assortmentsMap[assortmentId].assortment.Name}'); return false;"
                                                                disabled="{!AND(assortmentsMap[assortmentId].assortment.Status__c != 'Open (in bulding process)', assortmentsMap[assortmentId].assortment.Status__c != 'Request for Approval', assortmentsMap[assortmentId].nbASDinPreparation == 0, assortmentsMap[assortmentId].nbASDRequestApproval == 0)}"/>
                                                        </th>
                                                    </apex:repeat>
                                                </tr>
                                                <tr class="slds-border_top slds-border_bottom sticky-thead header-row-2">
                                                    <!-- conso fields -->
                                                    <th class="slds-border_right slds-border_left">
                                                        <apex:outputText value="{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__New_Client_ProductNumber__c.label}" />
                                                    </th>
                                                    <th class="slds-border_right slds-border_left">
                                                        <apex:outputText value="{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__New_Client_WD_MarketBased_Pts__c.label}" />
                                                    </th>
                                                    <th class="slds-border_right slds-border_left">
                                                        <apex:outputText value="{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__New_Client_WD_ClientBased_Pts__c.label}" />
                                                    </th>

                                                    <apex:repeat value="{!assortmentsIdList}" var="assortmentId">
                                                        <th class="slds-border_right slds-border_left">
                                                            <apex:outputText value="{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__Ass_BU_Cluster__c.label}" />
                                                        </th>
                                                        <th class="slds-border_right slds-border_left">
                                                            <apex:outputText value="{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__Client_Status__c.label}" />
                                                        </th>
                                                        <th class="slds-border_right slds-border_left">
                                                            <apex:outputText value="{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__New_Client_ProductNumber__c.label}" />
                                                        </th>
                                                        <th class="slds-border_right slds-border_left">
                                                            <apex:outputText value="{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__New_Client_WD_MarketBased_Pts__c.label}" />
                                                        </th>
                                                        <th class="slds-border_right slds-border_left">
                                                            <apex:outputText value="{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__New_Client_WD_ClientBased_Pts__c.label}" />
                                                        </th>
                                                        <th class="slds-border_right slds-border_left">
                                                            <apex:outputText value="{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__Movement_Date__c.label}" />
                                                        </th>
                                                    </apex:repeat>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <apex:repeat value="{!categoryWrapperList}" var="categoryWrapper">
                                                    <tr class="sticky-category-row">
                                                        <td colspan="4" style="text-align: left !important;">
                                                            <apex:outputLink value="/{!categoryWrapper.referenceDetail.Negoptim__Category__c}" target="_blank">
                                                                <apex:outputText value="{!categoryWrapper.referenceDetail.Category__r.Negoptim__Long_Name__c}" />
                                                            </apex:outputLink>
                                                        </td>
                                                        <td class="conso-{!categoryWrapper.referenceDetail.Category__c}-{!$ObjectType.Assortment_Detail__c.fields.New_Client_ProductNumber__c.Name}">
                                                            <span></span>
                                                        </td>
                                                        <td class="conso-{!categoryWrapper.referenceDetail.Category__c}-{!$ObjectType.Assortment_Detail__c.fields.New_Client_WD_MarketBased_Pts__c.Name}">
                                                            <span></span>
                                                        </td>
                                                        <td class="conso-{!categoryWrapper.referenceDetail.Category__c}-{!$ObjectType.Assortment_Detail__c.fields.New_Client_WD_ClientBased_Pts__c.Name}">
                                                            <span></span>
                                                        </td>
                                                        <apex:repeat value="{!assortmentsIdList}" var="assortmentId">
                                                            <td></td>
                                                            <td></td>
                                                            <td class="{!assortmentId}-{!categoryWrapper.referenceDetail.Category__c}-{!$ObjectType.Assortment_Detail__c.fields.New_Client_ProductNumber__c.Name}">
                                                                <span></span>
                                                            </td>
                                                            <td class="{!assortmentId}-{!categoryWrapper.referenceDetail.Category__c}-{!$ObjectType.Assortment_Detail__c.fields.New_Client_WD_MarketBased_Pts__c.Name}">
                                                                <span></span>
                                                            </td>
                                                            <td class="{!assortmentId}-{!categoryWrapper.referenceDetail.Category__c}-{!$ObjectType.Assortment_Detail__c.fields.New_Client_WD_ClientBased_Pts__c.Name}">
                                                                <span></span>
                                                            </td>
                                                            <td></td>
                                                        </apex:repeat>
                                                    </tr>
                                                    <apex:repeat value="{!categoryWrapper.products}" var="productWrapper">
                                                        <tr class="slds-border_top slds-border_bottom">
                                                            <td class="slds-border_right slds-border_left WhiteBG" style="text-align: left !important;">
                                                                <apex:outputField value="{!productWrapper.referenceDetail.Product__r.ProductCode}" />
                                                            </td>
                                                            <td class="slds-border_right slds-border_left WhiteBG
                                                                       {!IF(AND(OR(productWrapper.referenceDetail.Product__r.IsInnovation__c, productWrapper.referenceDetail.Product__r.recordType.developerName == 'Unit_Need'), productWrapper.referenceDetail.Product__r.Market_Introduction_Date__c!=null, YEAR(productWrapper.referenceDetail.Product__r.Market_Introduction_Date__c) < VALUE(selectedYear)), 'INNO_INTRO_DATE_LESS_N', '')}
                                                                       {!IF(AND(OR(productWrapper.referenceDetail.Product__r.IsInnovation__c, productWrapper.referenceDetail.Product__r.recordType.developerName == 'Unit_Need'), productWrapper.referenceDetail.Product__r.Market_Introduction_Date__c!=null, YEAR(productWrapper.referenceDetail.Product__r.Market_Introduction_Date__c) >= VALUE(selectedYear)), 'INNO_INTRO_DATE_GREATER_N', '')}
                                                                       {!IF(AND(productWrapper.referenceDetail.Product__r.Market_End_of_Life_Date__c!=null, YEAR(productWrapper.referenceDetail.Product__r.Market_End_of_Life_Date__c) < VALUE(selectedYear)), 'STOP_DATE_LESS_N', '')}
                                                                       {!IF(AND(productWrapper.referenceDetail.Product__r.Market_End_of_Life_Date__c!=null, YEAR(productWrapper.referenceDetail.Product__r.Market_End_of_Life_Date__c) >= VALUE(selectedYear)), 'STOP_DATE_GREATER_N', '')}"
                                                                style="text-align: left !important;">
                                                                <apex:outputField value="{!productWrapper.referenceDetail.Negoptim__Product__c}" />
                                                            </td>
                                                            <td class="slds-border_right slds-border_left WhiteBG" style="text-align: left !important;">
                                                                <apex:outputField value="{!productWrapper.referenceDetail.Product__r.Negoptim__Product_EAN__c}" />
                                                            </td>
                                                            <td class="slds-border_right slds-border_left WhiteBG" style="text-align: left !important;">
                                                                <apex:outputField value="{!productWrapper.referenceDetail.Product__r.Negoptim__VIP__c}" />
                                                            </td>
                                                            <!-- Conso Fields -->
                                                            <td class="{!productWrapper.referenceDetail.Negoptim__Product__c}-{!$ObjectType.Assortment_Detail__c.fields.New_Client_ProductNumber__c.Name} consoCell">
                                                                <span></span>
                                                            </td>
                                                            <td class="{!productWrapper.referenceDetail.Negoptim__Product__c}-{!$ObjectType.Assortment_Detail__c.fields.New_Client_WD_MarketBased_Pts__c.Name} consoCell">
                                                                <span></span>
                                                            </td>
                                                            <td class="{!productWrapper.referenceDetail.Negoptim__Product__c}-{!$ObjectType.Assortment_Detail__c.fields.New_Client_WD_ClientBased_Pts__c.Name} consoCell">
                                                                <span></span>
                                                            </td>
                                                            <!-- Asortment Details Fields -->
                                                            <apex:repeat value="{!assortmentsIdList}" var="assortmentId">
                                                                <apex:outputPanel layout="none" rendered="{!CONTAINS(productWrapper.keySet, assortmentId)}">
                                                                    <td class="{!productWrapper.detailsMap[assortmentId].detail.Id}-{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__Ass_BU_Cluster__c.Name}">
                                                                        <apex:selectList size="1" multiselect="false" value="{!productWrapper.detailsMap[assortmentId].detail.Ass_BU_Cluster__c}" rendered="{!!readOnlyUser}"
                                                                                         disabled="{!productWrapper.detailsMap[assortmentId].detail.Client_Status__c == 'Delete'}" html-stratCount="{!productWrapper.detailsMap[assortmentId].stratCount}"
                                                                                         onchange="registerChange(this, '{!productWrapper.detailsMap[assortmentId].detail.Id}', '{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__Ass_BU_Cluster__c.Name}')">
                                                                            <apex:selectOptions value="{!productWrapper.detailsMap[assortmentId].clustersSelectOptions}" />
                                                                        </apex:selectList>
                                                                        <apex:outputField value="{!productWrapper.detailsMap[assortmentId].detail.Ass_BU_Cluster__c}" rendered="{!readOnlyUser}" />
                                                                    </td>
                                                                    <td class='{!productWrapper.detailsMap[assortmentId].detail.Id}-{!$ObjectType.Assortment_Detail__c.fields.Client_Status__c.Name}'>
                                                                        <apex:inputField value="{!productWrapper.detailsMap[assortmentId].detail.Client_Status__c}" styleClass="inputNoEnter Client_Status__c" rendered="{!!readOnlyUser}"
                                                                            style="text-align: right !important; width: 70px;" onchange="registerChange(this, '{!productWrapper.detailsMap[assortmentId].detail.Id}', '{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__Client_Status__c.Name}');"/>
                                                                        <apex:outputField value="{!productWrapper.detailsMap[assortmentId].detail.Client_Status__c}" rendered="{!readOnlyUser}" />
                                                                    </td>
                                                                    <td class="{!productWrapper.detailsMap[assortmentId].detail.Id}-{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__New_Client_ProductNumber__c.Name}">
                                                                        <apex:outputField value="{!productWrapper.detailsMap[assortmentId].detail.New_Client_ProductNumber__c}" />
                                                                        <apex:outputText styleClass="{!productWrapper.detailsMap[assortmentId].detail.Id}-{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__New_Client_ProductNumber__c.Name}-oldValue"
                                                                            value="{!productWrapper.detailsMap[assortmentId].detail.New_Client_ProductNumber__c}"
                                                                            style="display:none" />
                                                                    </td>
                                                                    <td class="{!productWrapper.detailsMap[assortmentId].detail.Id}-{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__New_Client_WD_MarketBased_Pts__c.Name}">
                                                                        <apex:outputField value="{!productWrapper.detailsMap[assortmentId].detail.New_Client_WD_MarketBased_Pts__c}" />
                                                                        <apex:outputText styleClass="{!productWrapper.detailsMap[assortmentId].detail.Id}-{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__New_Client_WD_MarketBased_Pts__c.Name}-oldValue"
                                                                            value="{!productWrapper.detailsMap[assortmentId].detail.New_Client_WD_MarketBased_Pts__c}"
                                                                            style="display:none" />
                                                                    </td>
                                                                    <td class="{!productWrapper.detailsMap[assortmentId].detail.Id}-{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__New_Client_WD_ClientBased_Pts__c.Name}">
                                                                        <apex:outputField value="{!productWrapper.detailsMap[assortmentId].detail.New_Client_WD_ClientBased_Pts__c}" />
                                                                        <apex:outputText styleClass="{!productWrapper.detailsMap[assortmentId].detail.Id}-{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__New_Client_WD_ClientBased_Pts__c.Name}-oldValue"
                                                                            value="{!productWrapper.detailsMap[assortmentId].detail.New_Client_WD_ClientBased_Pts__c}"
                                                                            style="display:none" />
                                                                    </td>
                                                                    <td class="{!productWrapper.detailsMap[assortmentId].detail.Id}-{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__Movement_Date__c.Name} slds-border_right">
                                                                        <apex:inputField value="{!productWrapper.detailsMap[assortmentId].detail.Movement_Date__c}" styleClass="inputNoEnter" style="width: 90px;" rendered="{!!readOnlyUser}"
                                                                            onchange="registerChange(this, '{!productWrapper.detailsMap[assortmentId].detail.Id}', '{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__Movement_Date__c.Name}');" />
                                                                        <apex:outputField value="{!productWrapper.detailsMap[assortmentId].detail.Movement_Date__c}" rendered="{!readOnlyUser}" />
                                                                    </td>
                                                                </apex:outputPanel>
                                                                <apex:outputPanel layout="none" rendered="{!!CONTAINS(productWrapper.keySet, assortmentId)}">
                                                                    <td class="slds-border_right slds-border_left" colspan="6">
                                                                        <span class="blank-cell" />
                                                                    </td>
                                                                </apex:outputPanel>
                                                            </apex:repeat>
                                                        </tr>
                                                    </apex:repeat>
                                                </apex:repeat>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                                <div class="slds-p-around_small slds-grid" id="footer">
                                    <apex:selectList value="{!pageSize}" multiselect="false" size="1" onchange="refreshPageSize_js();" styleClass="slds-m-right_xx-small slds-select"
                                        style="width:70px">
                                        <apex:selectOptions value="{!pageSizeOptions}" />
                                    </apex:selectList>
                                    <apex:commandButton status="globalloading" value="{!$Label.negoptim__LBL_First}" onclick="firstPage();return false;" disabled="{!!productsListIterable.hasPrevious}"
                                        styleClass="slds-button slds-button_neutral" />
                                    <apex:commandButton status="globalloading" value="{!$Label.negoptim__LBL_Previous}" onclick="previousPage();return false;" disabled="{!!productsListIterable.hasPrevious}"
                                        styleClass="slds-button slds-button_neutral" />
                                    <apex:commandButton status="globalloading" value="{!$Label.negoptim__LBL_Next}" onclick="nextPage();return false;" disabled="{!!productsListIterable.hasNext}"
                                        styleClass="slds-button slds-button_neutral" />
                                    <apex:commandButton status="globalloading" value="{!$Label.negoptim__LBL_Last}" onclick="lastPage();return false;" disabled="{!!productsListIterable.hasNext}"
                                        styleClass="slds-button slds-button_neutral" />
                                    <div class="slds-badge slds-m-around_xx-small slds-p-left_xx-small">
                                        <apex:outputText style="text-align: right" value="{!(productsListIterable.pageNumber * pageSize)+1-pageSize}-{!IF((productsListIterable.pageNumber * pageSize)>noOfRecords, noOfRecords, (productsListIterable.pageNumber * pageSize))} {!$Label.negoptim__LBL_Of} {!noOfRecords}">
                                        </apex:outputText>
                                    </div>
                                </div>
                            </apex:outputPanel>
                            <apex:outputPanel rendered="{!noOfRecords == 0}">
                                <div class="slds-text-align_center">
                                    <apex:outputText value="{!$Label.negoptim__LBL_No_Item_To_Display}" />
                                </div>
                            </apex:outputPanel>
                            <script>
                                try {
                                    var categoriesIdSet = JSON.parse('{!JSENCODE(categoriesIdSet_serialized)}');
                                    var assortmentDetailsMap_serialized = '{!JSENCODE(assortmentDetailsMap_serialized)}';
                                } catch (error) {
                                    // normal exception on first load
                                }
                            </script>
                        </apex:outputPanel>
                    </div>
                </apex:outputPanel>
            </div>
            <apex:outputPanel id="jsPanel">
                <script>
                    let package_prefix = '{!JSENCODE(prefix)}';
                    try {
                        // serialized data from controller
                        var assortmentsIdSet = JSON.parse('{!JSENCODE(assortmentsIdSet_serialized)}');
                        var fieldsScaleMap = JSON.parse('{!JSENCODE(serializedFieldsScale)}');
                        var gridFields = ['Ass_BU_Cluster__c', 'Client_Status__c', 'New_Client_Product_Number__c', 'New_Client_WD_MarketBased__c', 'New_Client_WD_ClientBased__c'];
                        var subTotalsMap = JSON.parse('{!JSENCODE(subTotalsMap_serialized)}');
                        var treeFields = ['conso-' + package_prefix + 'New_Client_ProductNumber__c', 'conso-' + package_prefix + 'New_Client_WD_MarketBased_Pts__c', 'conso-' + package_prefix + 'New_Client_WD_ClientBased_Pts__c'];//JSON.parse('{!JSENCODE(treeFields_serialized)}');
                        for (var index = 0; index < assortmentsIdSet.length; index++) {
                            treeFields.push(assortmentsIdSet[index] + '-' + package_prefix + 'New_Client_ProductNumber__c');
                            treeFields.push(assortmentsIdSet[index] + '-' + package_prefix + 'New_Client_WD_MarketBased_Pts__c');
                            treeFields.push(assortmentsIdSet[index] + '-' + package_prefix + 'New_Client_WD_ClientBased_Pts__c');
                        }
                        var categoryTree_serialized = '{!JSENCODE(categoryTree_serialized)}';
                        var recordType = '{!JSENCODE(selectedRecordType)}';
                    } catch (error) {
                        // normal exception on first load
                    }
                </script>
            </apex:outputPanel>
        </apex:form>
        <apex:includeScript value="{!URLFOR($Resource.Negoptim__JQuery, 'jquery.min.js')}" />
        <apex:includeScript value="{!URLFOR($Resource.Negoptim__JQuery, 'jquery-ui-1.12.1/jquery-ui.min.js')}" />
        <apex:includeScript value="{!URLFOR($Resource.Negoptim__JQuery, 'jquery-ui-1.12.1/i18n/jquery-ui-i18n.min.js')}" />

        <apex:includeScript value="{!URLFOR($Resource.Negoptim__fancytree, 'fancytree/dist/jquery.fancytree-all-deps.min.js')}" />
        <apex:includeScript value="{!URLFOR($Resource.Negoptim__fancytree, 'fancytree/dist/modules/jquery.fancytree.filter.js')}" />
        <apex:includeScript value="{!URLFOR($Resource.Negoptim__fancytree, 'fancytree/src/jquery.fancytree.table.js')}" />
        <apex:includeScript value="{!URLFOR($Resource.Negoptim__fancytree, 'fancytree/src/jquery.fancytree.gridnav.js')}" />
        <apex:stylesheet value="{!URLFOR($Resource.Negoptim__fancytree, 'fancytree/dist/skin-win8/ui.fancytree.min.css')}" />
        <apex:stylesheet value="{!URLFOR($Resource.Negoptim__Assets, 'assets/css/app.css')}" />

        <apex:stylesheet value="{!URLFOR($Resource.Negoptim__JQuery, 'jquery-ui-1.12.1/themes/smoothness/jquery-ui.css')}" />

        <apex:includeScript value="{!URLFOR($Resource.Negoptim__Assets, 'assets/js/app.js')}" />
        <apex:includeScript value="{!URLFOR($Resource.Negoptim__FullCalendar, 'fullcalendar/lib/moment.min.js')}" />
        <script>
            // variable decleration
            package_prefix = '{!JSENCODE(prefix)}';
            var decimalSeparator = '{!localeDecimalSeparator}';
            var local = '{!locale}';
            negoptimApp = new App('{!locale}', '{!localeDecimalSeparator}');
            var totalColumnsMap = new Map();
            var fieldsNames = [package_prefix + "Ass_BU_Cluster__c", package_prefix + "Client_Status__c", package_prefix + "New_Client_ProductNumber__c", package_prefix + "New_Client_WD_MarketBased_Pts__c", package_prefix + "New_Client_WD_ClientBased_Pts__c"];
            var assortmentDetailsMap;
            //
            var gridFieldsMap = new Map();
            var changedAssortmentDetailsIdSet = [];
            var changedAssortmentDetails = [];
            var initialAssortmentDetailsMap = new Map();
            var showGrid = false;
            var orgaHe;
            var orgaHeName = '';
            var central;
            var centralName = '';
            var formatOrigin;
            var orgaHeMap = {};
            var centralMap = {};
            var Year = '{!JSENCODE(selectedYear)}';

            document.addEventListener('DOMContentLoaded', setFilterSection, false);
            window.onresize = function () {
                setTableDimensions();
                setHideDatePickerListener();
                setSticky();
            }

            function setFilterSection() {
                if (recordType === 'Target') {
                    document.getElementById('Nego').checked = false;
                    document.getElementById('Target').checked = true;
                }
                var formatOrigin_unselected = $('[id*=formatOrigin_scope_unselected]');
                if (formatOrigin_unselected.length != 0) {
                    $(formatOrigin_unselected).parent().css('width', '175px');
                }
                var lookupInput = $('a.inputField');
                if (lookupInput.length != 0) {
                    $(lookupInput).toggleClass('slds-input');
                    $(lookupInput).css('padding-left', '5px');
                }
                if (central && centralMap && centralMap[central]) {
                    $('#country_scope').val(centralMap[central]);
                }
                if (orgaHe && orgaHeMap && orgaHeMap[orgaHe]) {
                    $('#category_scope').val(orgaHeMap[orgaHe]);
                }
                if (Year) {
                    $('#year_scope').val(Year);
                }
                if (formatOrigin) {
                    var options = $('.buFormatOption');
                    var selectedFormat = formatOrigin.replace(/ /gi, '').split(',');
                    for (var i = 0; i < options.length; i++) {
                        if (selectedFormat.length + 1 === options.length || (options[i].value != '{!JSENCODE($Label.negoptim__LBL_All)}' && selectedFormat.includes(options[i].value))) {
                            options[i].checked = true;
                        } else {
                            options[i].checked = false;
                        }
                    }
                }
                closeAllInputs();
                $('#category_scope').val(orgaHeName);
                $('#country_scope').val(centralName);
            }

            function scopeReady() {
                $('#category_scope').val(orgaHeName);
                $('#country_scope').val(centralName);
                var gridField;
                for (var index = 0; index < gridFields.length; index++) {
                    gridField = gridFields[index]
                    gridFieldsMap.set(gridField.fieldName, gridField);
                }
                afterRerender();
            }

            function afterRerender() {
                //
                var detailsMap = JSON.parse(assortmentDetailsMap_serialized);
                assortmentDetailsMap = JSON.parse(assortmentDetailsMap_serialized);
                for (var key in detailsMap) {
                    initialAssortmentDetailsMap.set(key, detailsMap[key]);
                }
                try {
                    if (DatePicker) {
                        // Correct Datepicker popup position
                        DatePicker.prototype.position = function () {
                            for (var a = 0, b = 0, c = this.myElement; null != c && c != this.calendarDiv.offsetParent;)
                                a += c.offsetLeft - c.scrollLeft,
                                    b += c.offsetTop - c.scrollTop,
                                    c = c.offsetParent;
                            !c && this.calendarDiv.offsetParent && (a -= this.calendarDiv.offsetParent.offsetLeft,
                                b -= this.calendarDiv.offsetParent.offsetTop);
                            b = getObjY(this.myElement) + this.calendarDiv.offsetHeight > Sfdc.Window.getScrollY() + Sfdc.Window.getWindowHeight() ? b - (this.calendarDiv.offsetHeight + 1) : b + (this.myElement.offsetHeight + 1);
                            c = "left";
                            LC.isRtlPage() && (c = "right",
                                a = this.calendarDiv.offsetParent.offsetWidth - a - this.myElement.offsetWidth);
                            var gridContainerDiv = $('.grid-container');
                            a = a - gridContainerDiv.scrollLeft();
                            a = this.shim.div.offsetWidth + a > gridContainerDiv[0].offsetWidth ? a - this.shim.div.offsetWidth / 2 : a;
                            b = b - gridContainerDiv.scrollTop();
                            this.shim.setStyle(c, a + "px");
                            this.shim.setStyle("top", b + "px");
                        };
                    }
                    setHideDatePickerListener();
                    moveDatePickerToGridContainer();
                } catch(error){
                    // normal exception on first load
                }
                rerenderIcons();
                $(".inputNoEnter").on('keypress', function (e) {
                    code = e.keyCode ? e.keyCode : e.which;
                    if (code.toString() == 13) {
                        e.preventDefault();
                    }
                });

                $("#searchBox").on('keypress', function (e) {
                    code = e.keyCode ? e.keyCode : e.which;
                    if (code.toString() == 13) {
                        e.preventDefault();
                        applyFilters();
                    }
                });

                setFilterSection();
                setTableDimensions();
                //setStickyTop();
                setSticky();
                let oldshowGrid = showGrid;
                showGrid = true;
                try {
                    renderTree();
                    renderTotalsTree();
                    fillSubTotalRows();
                    showGrid = oldshowGrid;
                    renderTree();
                } catch(error) {
                    console.error(error);
                }
                setDivSize();
                // make sure all links (lookups) in the table will open in a new tab
                var links = document.getElementsByClassName('grid-container')[0].getElementsByTagName('a');
                for (var i = 0; i < links.length; i++) {
                    links[i].setAttribute('target', '_blank');
                }
                //
                $('.grid-container').find('.datepicker').datepicker({
                    dateFormat: getDateFormat().toLowerCase().replace('yyyy', 'yy')
                    /*minDate: beginDate,
                    maxDate: endDate*/
                });
                $.datepicker.setDefaults($.datepicker.regional['fr']);
                disableClientStatusOptions();
                setFormulaFieldValues();
            }

            // expand and collapse tree to render all rows
            function renderTotalsTree() {
                var i = 3;
                for (var index = 0; index < treeFields.length; index++)
                    totalColumnsMap.set(treeFields[index], i++);
                // Attach the fancytree widget to an existing <div id="treegrid"> element
                // and pass the tree options as an argument to the fancytree() function:
                if($("#treegrid").length > 0) {
                    $("#treegrid").fancytree({
                        extensions: ["table", "filter", "gridnav"],
                        checkbox: false,
                        filter: {
                            // mode: "hide"
                        },
                        gridnav: {
                            // autofocusInput: true, // focus first embedded input if node gets activated
                            // handleCursorKeys: true,   // Allow UP/DOWN in inputs to move to prev/next node
                        },
                        table: {
                            indentation: 20,      // indent 20px per node level
                            nodeColumnIdx: 2,     // render the node title into the 2nd column
                            checkboxColumnIdx: 1  // render the checkboxes into the 1st column
                        },
                        source: JSON.parse(categoryTree_serialized),
                        titlesTabbable: true, // Add all node titles to TAB chain
                        lazyLoad: function (event, data) { },
                        renderColumns: function (event, data) {
                            var node = data.node, $tdList = $(node.tr).find(">td");
                            i = 3;
                            for (var index = 0; index < treeFields.length; index++) {
                                var field = treeFields[index];
                                if (node.data.sums[field] != null) {
                                    $tdList.eq(i++).text(node.data.sums[field]);
                                }
                            }
                        }
                    });
                $("#treegrid").fancytree("getTree").expandAll();
                $("#treegrid").fancytree("getTree").expandAll(false);
                }
            }

            function setTableDimensions() {
                if (document.getElementsByClassName('grid-container').length == 0) return;
                // width
                // var bodyWidth = document.body.clientWidth;
                // _97 = bodyWidth * 97 / 100;
                // document.getElementsByClassName('grid-container')[0].style.width = _97 + "px";
                // document.getElementsByClassName('treegrid-container')[0].style.width = _97 + "px";
                // height
                /*var window_h = window.innerHeight;
                var body_h = document.body.clientHeight;
                var delta_h = body_h - window_h;
                var grid_h = document.getElementsByClassName('grid-container')[0].offsetHeight;
                var new_grid_h = grid_h - delta_h;
                document.getElementsByClassName('grid-container')[0].style.height = new_grid_h + "px";*/
                setDivSize();
            }

            function setStickyTop() {
                var row1Height = $('.header-row-1')[0].offsetHeight;
                var row2 = $('.header-row-2');
                var row2Cells = $(row2).find('th');
                var row2Height = row2[0].offsetHeight;
                var categoryRowCells = $('.sticky-category-row').find('td');

                for (var index = 0; index < row2Cells.length; index++) {
                    $(row2Cells[index]).css('top', row1Height + 'px');
                }
                for (var index = 0; index < categoryRowCells.length; index++) {
                    $(categoryRowCells[index]).css('top', (row1Height + row2Height) + 'px');
                }
            }

            function setDivSize() {
                let clientHeight = document.documentElement.clientHeight;
                let scrollableDiv = document.getElementById('scrollableDiv');
                let scrollableDivChild = document.getElementById('scrollableDivChild');
                let treegridcontainer = document.getElementsByClassName('treegrid-container')[0];
                let pageHeader = document.getElementById('pageHeader');
                let footer = document.getElementById('footer');
                let height = clientHeight;
                if(!document.fullscreenElement || (document.fullscreenElement && document.fullscreenElement.getAttribute("id") != 'scrollableDiv')) {
                    height -= $(treegridcontainer).outerHeight();
                    height -= $(pageHeader).outerHeight() +  ($(pageHeader).outerHeight() - $(pageHeader).height());
                } else {
                    height = $(scrollableDiv).outerHeight();
                }
                let heightChild = height - $(footer).outerHeight();
                let treegridheight = Math.abs( (height + $(treegridcontainer).outerHeight()) / 3 );
                $(scrollableDivChild).css({ height: heightChild });
                treegridcontainer.style.maxHeight = treegridheight + 'px ';
            }
            function openFullScreen() {
                let div = document.getElementById('scrollableDiv');
                if (div) {
                    if (div.requestFullscreen) {
                        div.requestFullscreen();
                    } else if (div.mozRequestFullScreen) { /* Firefox */
                        div.mozRequestFullScreen();
                    } else if (div.webkitRequestFullscreen) { /* Chrome, Safari & Opera */
                        div.webkitRequestFullscreen();
                    } else if (div.msRequestFullscreen) { /* IE/Edge */
                        div.msRequestFullscreen();
                    }
                }
                setTimeout(() => {
                    if(!document.fullscreenElement || (document.fullscreenElement && document.fullscreenElement.getAttribute("id") != 'scrollableDiv')) {
                        alert("{!JSENCODE($Label.negoptim__MSG_Cant_Open_Fullscreen)}");
                    }
                    setDivSize();
                }, 300);
            }

            function exportToExcel() {
                exportToExcelAction()
            }

            function disableClientStatusOptions(e, assortmentDetailId) {
                var clientStatusSelectList = typeof e !== 'undefined' ? clientStatusSelectList = $(e) : clientStatusSelectList = $('select.inputNoEnter.Client_Status__c');
                clientStatusSelectList.each(function () {
                    var detail = initialAssortmentDetailsMap.get($(this).parent().attr('class').split('-')[0]);
                    value = this.value;
                    var initialValue = detail[package_prefix + 'Client_Status__c'];
                    var lastHistoryValue = detail[package_prefix + 'Last_History__c'];
                    let hasLastHistory = typeof lastHistoryValue !== 'undefined' && lastHistoryValue != null;
                    let isValidDetail = detail[package_prefix + 'Status__c'] === 'Validated';
                    $(this).children('option').each(function () {
                        //// initialValue = typeof assortmentDetailId !== 'undefined' ? initialAssortmentDetailsMap.get(assortmentDetailId)['Client_Status__c'] : value;
                        this.disabled = isDisabled(this, initialValue, value, hasLastHistory, isValidDetail);
                    });
                });
            }

            function isDisabled(element, initialValue, currentValue, hasLastHistory, isValidDetail) {
                if (initialValue != currentValue) {
                    if (element.value == initialValue || element.value == currentValue)
                        return false;
                    return true;
                }
                if (element.value == currentValue) return false;

                switch (initialValue) {
                    case '':
                        if (element.value == 'Opportunity') {
                            return false;
                        }
                        break;
                    case 'Increase':
                        if (element.value == 'Probably deleted' || element.value == 'Opportunity' || element.value == 'Delete') {
                            return false;
                        }
                        break;
                    case 'Decrease':
                        if (element.value == 'Probably deleted' || element.value == 'Opportunity' || element.value == 'Delete') {
                            return false;
                        }
                        break;
                    case 'New':
                        if (element.value == 'Opportunity' || (element.value == '' && !hasLastHistory && !isValidDetail)) {
                            return false;
                        }
                        break;
                    case 'Keep':
                        if (element.value == 'Probably deleted' || element.value == 'Opportunity' || element.value == 'Delete') {
                            return false;
                        }
                        break;
                    case 'Delete':
                        if (element.value == 'New') {
                            return false;
                        }
                        break;
                    case 'Opportunity':
                        if (element.value == 'Keep' || element.value == 'Probably deleted' || element.value == 'Delete' || ((!hasLastHistory || isValidDetail) && element.value == 'New')) {
                            return false;
                        }
                        break;
                    case 'Probably deleted':
                        if (element.value == 'Keep' || element.value == 'Delete') {
                            return false;
                        }
                        break;
                }
                return true;
            }
            // calculation related functions
            function fillSubTotalRows() {
                for (var key in subTotalsMap) {
                    for (var fieldIndex = 0; fieldIndex < fieldsNames.length; fieldIndex++) {
                        assignSubTotal(key, fieldsNames[fieldIndex]);
                        if (key.includes('-')) {
                            var subTotal = subTotalsMap[key][fieldsNames[fieldIndex]];
                            var splitKey = key.split('-');
                            calculateParentTotalSum(splitKey[1], splitKey[0] + '-' + fieldsNames[fieldIndex], subTotal);
                        }
                    }
                }
            }

            function assignSubTotal(key, fieldName) {
                var subTotal = subTotalsMap[key][fieldName];
                var subTotalCell = document.getElementsByClassName(key + '-' + fieldName);
                if (subTotal != null && subTotalCell != null && typeof subTotalCell !== 'undefined' && subTotalCell.length > 0) {
                    subTotalCell[0].getElementsByTagName('span')[0].textContent = formatNumber(subTotal, fieldsScaleMap[fieldName]);
                }
            }

            function updateFieldSubTotal(result, fieldName) {
                var key = result[package_prefix + 'Assortment_BU__c'] + '-' + result[package_prefix + 'Category__c'];
                var newValue = 0;
                var oldValue = 0;
                var diffValue = 0;
                var cell = $('.' + result.Id + '-' + fieldName)[0];
                if (cell != null && cell !== 'undefined') {
                    var newValueElement = cell.childNodes[0];
                    newValue = stringToDecimal(newValueElement.textContent);
                    /*
                    if (newValueElement.tagName === 'INPUT') {
                        newValue = stringToDecimal(newValueElement.value);
                    } else if (newValueElement.tagName === 'SPAN') {
                        newValue = stringToDecimal(newValueElement.textContent);
                    }*/
                    span = $('.' + result.Id + '-' + fieldName + '-oldValue')[0];
                    if (span != null && span !== 'undefined') {
                        oldValue = stringToDecimal(span.textContent);
                    }
                    diffValue = newValue - oldValue;
                    var total = subTotalsMap.hasOwnProperty(key) && subTotalsMap[key].hasOwnProperty(fieldName) ? subTotalsMap[key][fieldName] : 0;
                    // set the current value as the old value
                    if (span != null && span !== 'undefined') {
                        span.textContent = formatNumber(newValue, fieldsScaleMap[fieldName]);
                    }
                    var keys = [key, result[package_prefix + 'Product__c'], 'conso-' + result[package_prefix + 'Category__c']];
                    for (var keyIndex = 0; keyIndex < keys.length; keyIndex++) {
                        key = keys[keyIndex];
                        if (subTotalsMap.hasOwnProperty(key) && subTotalsMap[key].hasOwnProperty(fieldName)) {
                            var total = subTotalsMap[key][fieldName];
                            subTotalsMap[key][fieldName] = total + diffValue;
                            assignSubTotal(key, fieldName);
                            if (key.includes('-')) {
                                var subTotal = subTotalsMap[key][fieldName];
                                var splitKey = key.split('-');
                                calculateParentTotalSum(splitKey[1], splitKey[0] + '-' + fieldName, subTotal);
                            }
                        }
                    }
                }
            }

            function calculateParentTotalSum(categoryId, columnName, newValue) {
                // if no data to display the tree is undefined
                try {
                    var nodeKey = categoryId;
                    var tree = $("#treegrid").fancytree("getTree");
                    var node = tree.getNodeByKey(nodeKey);
                    if (node != null) {
                        $tdList = $(node.tr).find(">td");
                        var oldValue = node.data.sums[columnName];
                        var diffValue = newValue - oldValue;
                        var column = $tdList.eq(totalColumnsMap.get(columnName));
                        var fieldName = columnName.split('-')[1];
                        column.text(formatNumber(newValue, fieldsScaleMap[fieldName]));
                        node.data.sums[columnName] = newValue;
                        node = node.parent;
                        while (node != null && node.title != 'root') {
                            $tdList = $(node.tr).find(">td");
                            var oldValue = isNaN(node.data.sums[columnName]) ? 0 : node.data.sums[columnName];
                            var newValue = oldValue + diffValue;
                            var column = $tdList.eq(totalColumnsMap.get(columnName));
                            var fieldName = columnName.split('-')[1];
                            column.text(formatNumber(newValue, fieldsScaleMap[fieldName]));
                            node.data.sums[columnName] = newValue;
                            node = node.parent;
                        }
                    }
                } catch (error) {
                    // silence error
                }
            }
            //
            function registerChange(e, assortmentDetailId, fieldName) {
                var field = gridFieldsMap.get(fieldName);
                var value = e.value;
                var doCallback = true;
                if (fieldName === package_prefix + 'Client_Status__c') {
                    if (assortmentDetailsMap.hasOwnProperty(assortmentDetailId) && value != assortmentDetailsMap[assortmentDetailId][package_prefix + 'Client_Status__c']) {
                        // if client status is reset to initial value, then do the same for bu cluster
                        if (value === initialAssortmentDetailsMap.get(assortmentDetailId)[package_prefix + 'Client_Status__c']) {
                            assortmentDetailsMap[assortmentDetailId][package_prefix + 'Ass_BU_Cluster__c'] = initialAssortmentDetailsMap.get(assortmentDetailId)[package_prefix + 'Ass_BU_Cluster__c'];
                        }
                        // if client status is Delete or None, then set bu cluster to null
                        if (value === 'Delete' || value === '') {
                            assortmentDetailsMap[assortmentDetailId][package_prefix + 'Ass_BU_Cluster__c'] = null;
                        }
                        let clustersPicklistClassName = assortmentDetailId + '-' + package_prefix + 'Ass_BU_Cluster__c';
                        let elements = document.getElementsByClassName(clustersPicklistClassName);
                        let picklistElement;
                        if (elements && elements.length > 0) {
                            picklistElement = elements[0].children[0];
                        }
                        if (picklistElement) {
                            if (value === 'Delete') {
                                // disable clusters picklist
                                picklistElement.setAttribute('disabled', 'true');
                            } else {
                                // enable clusters picklist
                                picklistElement.removeAttribute('disabled');
                                if (initialAssortmentDetailsMap.get(assortmentDetailId)[package_prefix + 'Client_Status__c'] == 'Delete' && value == 'New') {
                                    stratCount = picklistElement.getAttribute('stratcount') ? parseInt(picklistElement.getAttribute('stratcount')) : 0;
                                    if (stratCount > 0) {
                                        stratCount = picklistElement.children[0].value == '' ? stratCount : stratCount - 1;
                                        picklistElement.value = picklistElement.children[stratCount].value;
                                        assortmentDetailsMap[assortmentDetailId][package_prefix + 'Ass_BU_Cluster__c'] = picklistElement.children[stratCount].value;
                                    }
                                }
                            }
                        }
                    }
                    // disable/enable client status option based on new value
                    disableClientStatusOptions(e, assortmentDetailId);
                } else if (fieldName === package_prefix + 'Movement_Date__c') {
                    doCallback = false;
                    let date_split = value.split('/');
                    if (local.includes('en') && local.includes('US')) {
                        value = date_split[2] + '-' + date_split[0] + '-' + date_split[1];
                    } else {
                        value = date_split[2] + '-' + date_split[1] + '-' + date_split[0];
                    }
                } else if (fieldName != package_prefix + 'Ass_BU_Cluster__c') {
                    value = parseFloat(stringToDecimal(value));
                }
                var initialDetail = initialAssortmentDetailsMap[assortmentDetailId];
                var changedDetail = assortmentDetailsMap[assortmentDetailId];
                changedDetail[fieldName] = value;
                if (JSON.stringify(initialDetail) !== JSON.stringify(changedDetail)) {
                    if (!changedAssortmentDetailsIdSet.includes(assortmentDetailId)) {
                        changedAssortmentDetailsIdSet.push(assortmentDetailId);
                        changedAssortmentDetails.push(changedDetail);
                    }
                } else if (changedAssortmentDetailsIdSet.includes(assortmentDetailId)) {
                    var index = changedAssortmentDetailsIdSet.indexOf(assortmentDetailId)
                    changedAssortmentDetailsIdSet.splice(index, 1);
                    changedAssortmentDetails.splice(index, 1);
                }
                if (doCallback) calculateKPI(changedDetail);
            }

            function save() {
                var assortmentDetailsList_serialized = JSON.stringify(changedAssortmentDetails,
                                                                      function(k, v) {
                                                                          return v === undefined ? null : v;
                                                                      });
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.AssortmentMatrixComparatorController.save}',
                    assortmentDetailsList_serialized, function (result, event) {
                        if (result) {
                            saveCallback(result);
                        } else {
                            if (!event.status) {
                                alert(event.message);
                            }
                        }
                    },
                    { escape: false }
                );
            }
            function saveCallback(result) {
                for (var index = 0; index < changedAssortmentDetailsIdSet.length; index++) {
                    initialAssortmentDetailsMap.set(changedAssortmentDetailsIdSet[index],
                        assortmentDetailsMap[changedAssortmentDetailsIdSet[index]]);
                }
                changedAssortmentDetailsIdSet = [];
                changedAssortmentDetails = [];
                //// afterRerender();
                // call action function to rerender
                updateAssortmentWrappers();
                alert(result);
            }

            function calculateKPI(assortmentDetail) {
                $(document).find('body').css('cursor', 'wait');
                assortmentDetail = JSON.stringify(assortmentDetail);
                Visualforce.remoting.Manager
                    .invokeAction(
                        '{!$RemoteAction.AssortmentMatrixComparatorController.calculateKPI}',
                        assortmentDetail, function (result, event) {
                            // change cursor
                            if (event.status) {
                                if (result != null) {
                                    calculateKPICallback(result);
                                }
                            } else {
                                alert(event.message);
                            }
                        }, {
                            escape: false
                        });
            }

            function calculateKPICallback(result) {
                var fields = [package_prefix + 'New_Client_ProductNumber__c', package_prefix + 'New_Client_WD_MarketBased_Pts__c',
                package_prefix + 'New_Client_WD_ClientBased_Pts__c', package_prefix + 'Client_Status__c', package_prefix + 'Ass_BU_Cluster__c'];
                for (var index = 0; index < fields.length; index++) {
                    var fieldName = fields[index];
                    var childNode = $('.' + result.Id + '-' + fieldName)[0].childNodes[0];
                    if (childNode != null && childNode !== 'undefined') {
                        if (childNode.tagName === 'INPUT') {
                            childNode.value = formatNumber(result[fieldName], fieldsScaleMap[fieldName]);
                        } else if (childNode.tagName === 'SPAN') {
                            childNode.textContent = formatNumber(result[fieldName], fieldsScaleMap[fieldName]);
                        } else if (childNode.tagName === 'SELECT') {
                            childNode.value = result[fieldName];
                            if (fieldName === package_prefix + 'Client_Status__c') {
                                disableClientStatusOptions(childNode, result.Id);
                            }
                        }
                        updateFieldSubTotal(result, fieldName);
                    }
                    for (var i = 0; i < changedAssortmentDetails.length; i++) {
                        if (changedAssortmentDetails[i]['Id'] == result.Id) {
                            changedAssortmentDetails[i][fieldName] = result[fieldName];
                        }
                    }
                }
                $(document).find('body').css('cursor', 'default');
            }

            function searchBUCentralOptions(searchTerm) {
                /* $(document).find('body').css('cursor', 'wait');
                assortmentDetail = JSON.stringify(assortmentDetail);*/
                var htmloptions = '<li role="presentation" class="slds-listbox_item"><div id="optionCountry" class="slds-media slds-listbox__option slds-listbox_option_plain slds-media_small" role="option"><span class="slds-media_figure slds-listbox_option-icon"></span><span class="slds-media_body"><span class="slds-truncate" title="loading"><div class="slds-spinner_container"><div role="status" class="slds-spinner slds-spinner_small slds-spinner_brand"><span class="slds-assistive-text">Loading</span><div class="slds-spinner__dot-a"></div><div class="slds-spinner__dot-b"></div></div></div></span></span></div></li>';
                $('#listCountries').html(htmloptions);
                Visualforce.remoting.Manager
                    .invokeAction(
                        '{!$RemoteAction.AssortmentMatrixComparatorController.searchBUCentralOptions}',
                        searchTerm, function (
                            result, event) {
                            // change cursor
                            searchBUCentralOptionsCallback(result);
                        }, {
                            escape: false
                        });
            }

            function searchBUCentralOptionsCallback(result) {
                var countries = JSON.parse(result);
                var htmloptions = '';
                if (countries.length > 0) {
                    for (var index = 0; index < countries.length; index++) {
                        centralMap[countries[index].Id] = countries[index].Name;
                        htmloptions += '<li role="presentation" class="slds-listbox_item"><div id="optionCountry' + index + '" class="slds-media slds-listbox__option slds-listbox_option_plain slds-media_small" role="option" onclick="setCountry(this);"><span class="slds-media_figure slds-listbox_option-icon"></span><span class="slds-media_body"><span class="slds-truncate" title="' + countries[index].Name + '" >' + countries[index].Name + '</span><span style="display: none !important;" title="' + countries[index].Id + '" >' + countries[index].Id + '</span></span></div></li>'
                    }
                }
                if (countries.length == 0) {
                    htmloptions += '<li role="presentation" class="slds-listbox_item"><div id="optionCountry" class="slds-media slds-listbox__option slds-listbox_option_plain slds-media_small" role="option"><span class="slds-media_figure slds-listbox_option-icon"></span><span class="slds-media_body"><span class="slds-truncate" title="No Data Found" onclick="closeAllInputs();">No Data Found</span></span></div></li>'
                }
                $('#listCountries').html(htmloptions);
            }

            function searchOrgaHEOptions(searchTerm) {
                /* $(document).find('body').css('cursor', 'wait');
                assortmentDetail = JSON.stringify(assortmentDetail);*/
                var htmloptions = '<li role="presentation" class="slds-listbox_item"><div id="optionCategory" class="slds-media slds-listbox__option slds-listbox_option_plain slds-media_small" role="option"><span class="slds-media_figure slds-listbox_option-icon"></span><span class="slds-media_body"><span class="slds-truncate" title="loading"><div class="slds-spinner_container"><div role="status" class="slds-spinner slds-spinner_small slds-spinner_brand"><span class="slds-assistive-text">Loading</span><div class="slds-spinner__dot-a"></div><div class="slds-spinner__dot-b"></div></div></div></span></span></div></li>';
                $('#listCategories').html(htmloptions);
                Visualforce.remoting.Manager
                    .invokeAction(
                        '{!$RemoteAction.AssortmentMatrixComparatorController.searchOrgaHEOptions}',
                        searchTerm, function (
                            result, event) {
                            // change cursor
                            searchOrgaHEOptionsCallback(result);
                        }, {
                            escape: false
                        });
            }

            function searchOrgaHEOptionsCallback(result) {
                var categories = JSON.parse(result);
                var htmloptions = '';
                if (categories.length > 0) {
                    for (var index = 0; index < categories.length; index++) {
                        orgaHeMap[categories[index].Id] = categories[index].Name;
                        htmloptions += ' <li role="presentation" class="slds-listbox_item"><div id="optionCategory' + index + '" class="slds-media slds-listbox__option slds-listbox_option_plain slds-media_small" role="option" onclick="setCategory(this);"><span class="slds-media_figure slds-listbox_option-icon"></span><span class="slds-media_body"><span class="slds-truncate" title="' + categories[index].Name + '" >' + categories[index].Name + '</span><span style="display: none !important;" title="' + categories[index].Id + '" >' + categories[index].Id + '</span></span></div></li>'
                    }
                }
                if (categories.length == 0) {
                    htmloptions += '<li role="presentation" class="slds-listbox_item"><div id="optionCategory" class="slds-media slds-listbox__option slds-listbox_option_plain slds-media_small" role="option"><span class="slds-media_figure slds-listbox_option-icon"></span><span class="slds-media_body"><span class="slds-truncate" title="No Data Found" onclick="closeAllInputs();">No Data Found</span></span></div></li>'
                }
                $('#listCategories').html(htmloptions);
            }

            function firstPage() {
                var changedAssortmentDetailsIdSet_serialized = JSON.stringify(changedAssortmentDetailsIdSet);
                first(changedAssortmentDetailsIdSet_serialized);
            }

            function nextPage() {
                var changedAssortmentDetailsIdSet_serialized = JSON.stringify(changedAssortmentDetailsIdSet);
                next(changedAssortmentDetailsIdSet_serialized);
            }

            function previousPage() {
                var changedAssortmentDetailsIdSet_serialized = JSON.stringify(changedAssortmentDetailsIdSet);
                previous(changedAssortmentDetailsIdSet_serialized);
            }

            function lastPage() {
                var changedAssortmentDetailsIdSet_serialized = JSON.stringify(changedAssortmentDetailsIdSet);
                last(changedAssortmentDetailsIdSet_serialized);
            }

            function refreshPageSize_js() {
                var changedAssortmentDetailsIdSet_serialized = JSON.stringify(changedAssortmentDetailsIdSet);
                refreshPageSize(changedAssortmentDetailsIdSet_serialized);
            }

            function setFormulaFieldValues() {
                var fields = [package_prefix + 'New_Client_ProductNumber__c', package_prefix + 'New_Client_WD_MarketBased_Pts__c', package_prefix + 'New_Client_WD_ClientBased_Pts__c'];
                for (var index1 = 0; index1 < changedAssortmentDetails.length; index1++) {
                    var detail = changedAssortmentDetails[index1];
                    detailId = detail['Id'];
                    for (var index2 = 0; index2 < fields.length; index2++) {
                        var fieldName = fields[index2];
                        var childNode = $('.' + detailId + '-' + fieldName)[0].childNodes[0];
                        if (childNode != null && childNode !== 'undefined' && childNode.tagName === 'SPAN') {
                            childNode.textContent = formatNumber(detail[fieldName], fieldsScaleMap[fieldName]);
                        }
                    }
                }
            }

            function confirmAssortmentValidation(assortmentId, assortmentName) {
                var confirmStatus = confirm(assortmentName + ': {!JSENCODE($Label.negoptim__MSG_Confirm_Change_Status)}');
                if (confirmStatus) {
                    changedAssortmentDetailsIdSet = [];
                    changedAssortmentDetails = [];
                    subTotalsMap = {};
                    validateAssortment(assortmentId);
                }
            }

            function confirmAssortmentRequestForApproval(assortmentId, assortmentName) {
                changedAssortmentDetailsIdSet = [];
                changedAssortmentDetails = [];
                subTotalsMap = {};
                requestForApproval(assortmentId);
            }
            // remove focus from DatePicker
            function setFocusOnLoad() { }

            function applyFilters() {
                var searchTerm = $('#searchBox').val();
                search(searchTerm);
            }

            function applyScopeFilters() {
                closeAllInputs();
                var selectedRecordType = document.getElementById('Nego').checked ? 'Nego' : 'Target';
                var selectedformatOrigin = formatOrigin;
                var selectedBuCentral = central;
                var selectedOrgaHe = orgaHe;
                var selectedYear = Year;
                moveDatePickerOutOfTheForm();
                changePageScope(selectedformatOrigin, selectedBuCentral, selectedOrgaHe, selectedYear, selectedRecordType);
            }

            function toggleTotalsTree() {
                showGrid = !showGrid;
                renderTree();
                setDivSize();
            }

            function renderTree() {
                if (showGrid) {
                    $('.treegrid-container').removeClass('slds-hide');
                   document.getElementById('toggleTotalsTree').setAttribute('checked','checked');
                } else {
                    $('.treegrid-container').addClass('slds-hide');
                   document.getElementById('toggleTotalsTree').removeAttribute('checked');
                }
            }

            function cancel() { var isClassic = {!$User.UIThemeDisplayed == 'Theme2' || $User.UIThemeDisplayed == 'Theme3'};
            var returnUrl = isClassic ? '/home/home.jsp' : '/one/one.app';
            window.open(returnUrl, "_self");
            }

            function reload() {
                location.reload();
            }

            // utils
            function stringToDecimal(str) {
                if (str == null) return 0;
                var d = str.toString().replace(/&nbsp/g, "").replace(/;/g, '');
                d = d.replace(/\s/g, "");
                if (decimalSeparator == ',') {
                    d = d.replace(",", ".");
                }
                else {
                    d = d.replace(/,/g, "");
                }
                if (!isNaN(d) && d.length !== 0) {
                    return parseFloat(d);
                }
                return 0;
            }

            function formatNumber(num, scale) {
                if (num == null || isNaN(num) || num.length == 0) num = 0;
                if (scale == 0)
                    num = parseInt(num);
                else {
                    num = num.toFixed(scale);
                }
                var formatedValue = negoptimApp.formatCurrency(num);
                if (scale > 0) {
                    formatedValue = formatedValue.split(decimalSeparator)[0] + decimalSeparator + num.split('.')[1];
                }
                return formatedValue;
            }

            function getDateFormat() {
                return formats[negoptimApp.locale] || 'dd/MM/yyyy';
            }

            var formats = {
                "ar-SA": "dd/MM/yy",
                "bg-BG": "dd.M.yyyy",
                "ca-ES": "dd/MM/yyyy",
                "zh-TW": "yyyy/M/d",
                "cs-CZ": "d.M.yyyy",
                "da-DK": "dd-MM-yyyy",
                "de-DE": "dd.MM.yyyy",
                "el-GR": "d/M/yyyy",
                "en-US": "M/d/yyyy",
                "fi-FI": "d.M.yyyy",
                "fr-FR": "dd/MM/yyyy",
                "he-IL": "dd/MM/yyyy",
                "hu-HU": "yyyy. MM. dd.",
                "is-IS": "d.M.yyyy",
                "it-IT": "dd/MM/yyyy",
                "ja-JP": "yyyy/MM/dd",
                "ko-KR": "yyyy-MM-dd",
                "nl-NL": "d-M-yyyy",
                "nb-NO": "dd.MM.yyyy",
                "pl-PL": "yyyy-MM-dd",
                "pt-BR": "d/M/yyyy",
                "ro-RO": "dd.MM.yyyy",
                "ru-RU": "dd.MM.yyyy",
                "hr-HR": "d.M.yyyy",
                "sk-SK": "d. M. yyyy",
                "sq-AL": "yyyy-MM-dd",
                "sv-SE": "yyyy-MM-dd",
                "th-TH": "d/M/yyyy",
                "tr-TR": "dd.MM.yyyy",
                "ur-PK": "dd/MM/yyyy",
                "id-ID": "dd/MM/yyyy",
                "uk-UA": "dd.MM.yyyy",
                "be-BY": "dd.MM.yyyy",
                "sl-SI": "d.M.yyyy",
                "et-EE": "d.MM.yyyy",
                "lv-LV": "yyyy.MM.dd.",
                "lt-LT": "yyyy.MM.dd",
                "fa-IR": "MM/dd/yyyy",
                "vi-VN": "dd/MM/yyyy",
                "hy-AM": "dd.MM.yyyy",
                "az-Latn-AZ": "dd.MM.yyyy",
                "eu-ES": "yyyy/MM/dd",
                "mk-MK": "dd.MM.yyyy",
                "af-ZA": "yyyy/MM/dd",
                "ka-GE": "dd.MM.yyyy",
                "fo-FO": "dd-MM-yyyy",
                "hi-IN": "dd-MM-yyyy",
                "ms-MY": "dd/MM/yyyy",
                "kk-KZ": "dd.MM.yyyy",
                "ky-KG": "dd.MM.yy",
                "sw-KE": "M/d/yyyy",
                "uz-Latn-UZ": "dd/MM yyyy",
                "tt-RU": "dd.MM.yyyy",
                "pa-IN": "dd-MM-yy",
                "gu-IN": "dd-MM-yy",
                "ta-IN": "dd-MM-yyyy",
                "te-IN": "dd-MM-yy",
                "kn-IN": "dd-MM-yy",
                "mr-IN": "dd-MM-yyyy",
                "sa-IN": "dd-MM-yyyy",
                "mn-MN": "yy.MM.dd",
                "gl-ES": "dd/MM/yy",
                "kok-IN": "dd-MM-yyyy",
                "syr-SY": "dd/MM/yyyy",
                "dv-MV": "dd/MM/yy",
                "ar-IQ": "dd/MM/yyyy",
                "zh-CN": "yyyy/M/d",
                "de-CH": "dd.MM.yyyy",
                "en-GB": "dd/MM/yyyy",
                "es-MX": "dd/MM/yyyy",
                "fr-BE": "d/MM/yyyy",
                "it-CH": "dd.MM.yyyy",
                "nl-BE": "d/MM/yyyy",
                "nn-NO": "dd.MM.yyyy",
                "pt-PT": "dd-MM-yyyy",
                "sr-Latn-CS": "d.M.yyyy",
                "sv-FI": "d.M.yyyy",
                "az-Cyrl-AZ": "dd.MM.yyyy",
                "ms-BN": "dd/MM/yyyy",
                "uz-Cyrl-UZ": "dd.MM.yyyy",
                "ar-EG": "dd/MM/yyyy",
                "zh-HK": "d/M/yyyy",
                "de-AT": "dd.MM.yyyy",
                "en-AU": "d/MM/yyyy",
                "es-ES": "dd/MM/yyyy",
                "fr-CA": "yyyy-MM-dd",
                "sr-Cyrl-CS": "d.M.yyyy",
                "ar-LY": "dd/MM/yyyy",
                "zh-SG": "d/M/yyyy",
                "de-LU": "dd.MM.yyyy",
                "en-CA": "dd/MM/yyyy",
                "es-GT": "dd/MM/yyyy",
                "fr-CH": "dd.MM.yyyy",
                "ar-DZ": "dd-MM-yyyy",
                "zh-MO": "d/M/yyyy",
                "de-LI": "dd.MM.yyyy",
                "en-NZ": "d/MM/yyyy",
                "es-CR": "dd/MM/yyyy",
                "fr-LU": "dd/MM/yyyy",
                "ar-MA": "dd-MM-yyyy",
                "en-IE": "dd/MM/yyyy",
                "es-PA": "MM/dd/yyyy",
                "fr-MC": "dd/MM/yyyy",
                "ar-TN": "dd-MM-yyyy",
                "en-ZA": "yyyy/MM/dd",
                "es-DO": "dd/MM/yyyy",
                "ar-OM": "dd/MM/yyyy",
                "en-JM": "dd/MM/yyyy",
                "es-VE": "dd/MM/yyyy",
                "ar-YE": "dd/MM/yyyy",
                "en-029": "MM/dd/yyyy",
                "es-CO": "dd/MM/yyyy",
                "ar-SY": "dd/MM/yyyy",
                "en-BZ": "dd/MM/yyyy",
                "es-PE": "dd/MM/yyyy",
                "ar-JO": "dd/MM/yyyy",
                "en-TT": "dd/MM/yyyy",
                "es-AR": "dd/MM/yyyy",
                "ar-LB": "dd/MM/yyyy",
                "en-ZW": "M/d/yyyy",
                "es-EC": "dd/MM/yyyy",
                "ar-KW": "dd/MM/yyyy",
                "en-PH": "M/d/yyyy",
                "es-CL": "dd-MM-yyyy",
                "ar-AE": "dd/MM/yyyy",
                "es-UY": "dd/MM/yyyy",
                "ar-BH": "dd/MM/yyyy",
                "es-PY": "dd/MM/yyyy",
                "ar-QA": "dd/MM/yyyy",
                "es-BO": "dd/MM/yyyy",
                "es-SV": "dd/MM/yyyy",
                "es-HN": "dd/MM/yyyy",
                "es-NI": "dd/MM/yyyy",
                "es-PR": "dd/MM/yyyy",
                "am-ET": "d/M/yyyy",
                "tzm-Latn-DZ": "dd-MM-yyyy",
                "iu-Latn-CA": "d/MM/yyyy",
                "sma-NO": "dd.MM.yyyy",
                "mn-Mong-CN": "yyyy/M/d",
                "gd-GB": "dd/MM/yyyy",
                "en-MY": "d/M/yyyy",
                "prs-AF": "dd/MM/yy",
                "bn-BD": "dd-MM-yy",
                "wo-SN": "dd/MM/yyyy",
                "rw-RW": "M/d/yyyy",
                "qut-GT": "dd/MM/yyyy",
                "sah-RU": "MM.dd.yyyy",
                "gsw-FR": "dd/MM/yyyy",
                "co-FR": "dd/MM/yyyy",
                "oc-FR": "dd/MM/yyyy",
                "mi-NZ": "dd/MM/yyyy",
                "ga-IE": "dd/MM/yyyy",
                "se-SE": "yyyy-MM-dd",
                "br-FR": "dd/MM/yyyy",
                "smn-FI": "d.M.yyyy",
                "moh-CA": "M/d/yyyy",
                "arn-CL": "dd-MM-yyyy",
                "ii-CN": "yyyy/M/d",
                "dsb-DE": "d. M. yyyy",
                "ig-NG": "d/M/yyyy",
                "kl-GL": "dd-MM-yyyy",
                "lb-LU": "dd/MM/yyyy",
                "ba-RU": "dd.MM.yy",
                "nso-ZA": "yyyy/MM/dd",
                "quz-BO": "dd/MM/yyyy",
                "yo-NG": "d/M/yyyy",
                "ha-Latn-NG": "d/M/yyyy",
                "fil-PH": "M/d/yyyy",
                "ps-AF": "dd/MM/yy",
                "fy-NL": "d-M-yyyy",
                "ne-NP": "M/d/yyyy",
                "se-NO": "dd.MM.yyyy",
                "iu-Cans-CA": "d/M/yyyy",
                "sr-Latn-RS": "d.M.yyyy",
                "si-LK": "yyyy-MM-dd",
                "sr-Cyrl-RS": "d.M.yyyy",
                "lo-LA": "dd/MM/yyyy",
                "km-KH": "yyyy-MM-dd",
                "cy-GB": "dd/MM/yyyy",
                "bo-CN": "yyyy/M/d",
                "sms-FI": "d.M.yyyy",
                "as-IN": "dd-MM-yyyy",
                "ml-IN": "dd-MM-yy",
                "en-IN": "dd-MM-yyyy",
                "or-IN": "dd-MM-yy",
                "bn-IN": "dd-MM-yy",
                "tk-TM": "dd.MM.yy",
                "bs-Latn-BA": "d.M.yyyy",
                "mt-MT": "dd/MM/yyyy",
                "sr-Cyrl-ME": "d.M.yyyy",
                "se-FI": "d.M.yyyy",
                "zu-ZA": "yyyy/MM/dd",
                "xh-ZA": "yyyy/MM/dd",
                "tn-ZA": "yyyy/MM/dd",
                "hsb-DE": "d. M. yyyy",
                "bs-Cyrl-BA": "d.M.yyyy",
                "tg-Cyrl-TJ": "dd.MM.yy",
                "sr-Latn-BA": "d.M.yyyy",
                "smj-NO": "dd.MM.yyyy",
                "rm-CH": "dd/MM/yyyy",
                "smj-SE": "yyyy-MM-dd",
                "quz-EC": "dd/MM/yyyy",
                "quz-PE": "dd/MM/yyyy",
                "hr-BA": "d.M.yyyy.",
                "sr-Latn-ME": "d.M.yyyy",
                "sma-SE": "yyyy-MM-dd",
                "en-SG": "d/M/yyyy",
                "ug-CN": "yyyy-M-d",
                "sr-Cyrl-BA": "d.M.yyyy",
                "es-US": "M/d/yyyy"
            };
            function setSticky() {
                var tableHeader = $('.grid-container table thead');
                var trs = $(tableHeader).find('tr');
                var sumTrHeights = 0;
                var fixedColumnsCount = 4;
                for (var index = 0; index < trs.length; index++) {
                    var leftPosition = 0;
                    var ths = $(trs[index]).find('th');
                    for (var index2 = 0; index2 < ths.length; index2++) {
                        var style = {};
                        style["top"] = sumTrHeights;
                        style["position"] = "sticky";
                        if (index === 0 && index2 < fixedColumnsCount) {
                            style["z-index"] = 6;
                            style["left"] = leftPosition + 'px';
                            leftPosition = leftPosition + $(ths[index2]).outerWidth();
                        } else {
                            style["z-index"] = 5;
                        }
                        $(ths[index2]).css(style);
                    }
                    sumTrHeights += $(trs[index]).outerHeight();
                }
                var tableHeaderHeight = tableHeader.outerHeight();
                var tableBody = $('.grid-container table tbody');
                trs = $(tableBody).find('tr');
                for (var index = 0; index < trs.length; index++) {
                    if ($(trs[index]).hasClass('sticky-category-row')) {
                        var tds = $(trs[index]).find('td');
                        for (var i = 0; i < tds.length; i++) {
                            var Cell = tds[i];
                            if (i === 0) {
                                $(Cell).attr('style', 'top: ' + tableHeaderHeight + 'px !important; z-index: 4; text-align:left !important; position: sticky !important; left: 0px !important;');
                            } else {
                                $(Cell).attr('style', 'top: ' + tableHeaderHeight + 'px !important; z-index: 2; position: sticky !important;');
                            }
                        }
                    } else {
                        var leftPosition = 0;
                        var tds = $(trs[index]).find('td');
                        for (var j = 0; j < tds.length && j < fixedColumnsCount; j++) {
                            $(tds[j]).css({ left: leftPosition, "position": 'sticky', 'z-index': 3 });
                            leftPosition = leftPosition + $(tds[j]).outerWidth();
                        }
                    }
                }
            }
            function openListCategory() {
                closeAllInputs();
                if ($('#category_scope').val() == '') {
                    orgaHe = null;
                    orgaHeName = "";
                }
                var htmloptions = ' <li><div class="slds-spinner_container"><div role="status" class="slds-spinner slds-spinner_small slds-spinner_brand"><span class="slds-assistive-text">Loading</span><div class="slds-spinner__dot-a"></div><div class="slds-spinner__dot-b"></div></div></div></li>';
                $('#listCategories').html(htmloptions);
                $('#category_combobox').addClass('slds-is-open');
                searchCategory();
            }
            function setCategory(element) {
                $('#category_combobox').removeClass('slds-is-open');
                orgaHeName = element.getElementsByTagName('span')[2].textContent;
                $('#category_scope').val(orgaHeName);
                orgaHe = element.getElementsByTagName('span')[3].textContent;
            }
            function searchCategory() {
                searchOrgaHEOptions($('#category_scope').val());
            }
            function openListCountry() {
                closeAllInputs();
                if ($('#country_scope').val() == '') {
                    central = null;
                    centralName = '';
                }
                var htmloptions = ' <li><div class="slds-spinner_container"><div role="status" class="slds-spinner slds-spinner_small slds-spinner_brand"><span class="slds-assistive-text">Loading</span><div class="slds-spinner__dot-a"></div><div class="slds-spinner__dot-b"></div></div></div></li>';
                $('#listCountries').html(htmloptions);
                $('#country_combobox').addClass('slds-is-open');
                searchCountry();
            }
            function setCountry(element) {
                $('#country_combobox').removeClass('slds-is-open');
                centralName = element.getElementsByTagName('span')[2].textContent;
                $('#country_scope').val(centralName);
                central = element.getElementsByTagName('span')[3].textContent;
            }
            function searchCountry() {
                searchBUCentralOptions($('#country_scope').val());
            }
            function buFormatSelectionChange(e) {
                var buFormatOptions = $('.buFormatOption');
                if (e.value == '{!JSENCODE($Label.negoptim__LBL_All)}') {
                    for (var i = 0; i < buFormatOptions.length - 1; i++) {
                        buFormatOptions[i].checked = e.checked;
                        toggleSelection(buFormatOptions[i]);
                    }
                } else {
                    if (!e.checked) {
                        buFormatOptions[buFormatOptions.length - 1].checked = false;
                        toggleSelection(buFormatOptions[buFormatOptions.length - 1]);
                    }
                }
                toggleSelection(e);
            }
            function toggleSelection(e) {
                if (e.checked)
                    $(e).parent().addClass('selected-option');
                else
                    $(e).parent().removeClass('selected-option');
            }
            function showBuFormatOptions() {
                closeAllInputs();
                $('#buFormatOptionsSection').removeClass('slds-hide');
            }
            function displayBuFormatSelection() {
                var options = $('.buFormatOption');
                var selectedOptions = ''; // for display (contains labels)
                let allSelected = false;
                let allOption = '';
                formatOrigin = ''; // for search (contains api names)
                for (var i = 0; i < options.length; i++) {
                    if (options[i].checked) {
                        if (options[i].value == '{!JSENCODE($Label.negoptim__LBL_All)}') {
                            allOption = options[i].name;
                            allSelected = true;
                            continue;
                        }
                        selectedOptions += selectedOptions.length == 0 ? options[i].name : ', ' + options[i].name;
                        formatOrigin += formatOrigin.length == 0 ? options[i].value : ', ' + options[i].value;
                    }
                }
                selectedOptions = allSelected ? allOption : selectedOptions;
                $('#selectedBuFormatOptions').val(selectedOptions);
            }
            function setYear() {
                Year = $('#year_scope').val();
            }
            function closeAllInputs() {
                displayBuFormatSelection();
                $('#buFormatOptionsSection').addClass('slds-hide');
                $('#category_combobox').removeClass('slds-is-open');
                $('#country_combobox').removeClass('slds-is-open');
            }

            function setHideDatePickerListener() {
                $('#scrollableDivChild').on("scroll", function () {
                    $('#datePicker').hide();
                });
            }

            function rerenderIcons() {
                let downlaodIcon = `<svg id="downloadIconContainer" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="slds-button__icon slds-button__icon_left"
                                        aria-hidden="true">
                                        <use xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#download')}"></use>
                                    </svg>`;
                let expandIcon = `<svg id="expandIconContainer" class="slds-button__icon slds-m-around_xxx-small" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                                        xmlns:xlink="http://www.w3.org/1999/xlink">
                                        <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#expand')}"></use>
                                    </svg>`;
                let downloadIconContainer = document.getElementById('downloadIconContainer');
                let expandIconContainer = document.getElementById('expandIconContainer');
                if (downloadIconContainer) {
                    let div = document.createElement('DIV');
                    div.innerHTML = downlaodIcon;
                    downloadIconContainer.replaceWith(div);
                }
                if (expandIconContainer) {
                    let div = document.createElement('DIV');
                    div.innerHTML = expandIcon;
                    expandIconContainer.replaceWith(div);
                }
            }
            
            function moveDatePickerToGridContainer(){
                let datePickerInGrid = $("#scrollableDiv #datePicker");
                if(!(typeof datePickerInGrid != undefined && datePickerInGrid.length > 0)) {
                    var datepicker = $("#datePicker").remove();
                    $('#scrollableDiv').append(datepicker);
                }
            }
            
            function moveDatePickerOutOfTheForm(){
                var datepicker = $("#datePicker").remove();
                if(typeof datepicker != undefined && datepicker.length > 0) {
                    $('#outTheForm').append(datepicker);
                }
            }
       
        function LookupHoverDetail(a, b) {
            b && (b = window.Shepherd ? window.Shepherd.fixRetUrl(b) : UserContext.getUrl(b));
            this.id = a;
            this.width = LookupHoverDetail.STANDARD_BUBBLE_WIDTH;
            this.bubbleOffset = Sfdc.userAgent.isIE6 ? 5 : 14;
            this.height = LookupHoverDetail.STANDARD_BUBBLE_HEIGHT;
            this.hover = document.createElement("div");
            this.hover.id = a + "Hover";
            this.hover.className = "individualPalette lookupHoverDetail lookupHoverDetailLoading lookupHoverDetailOverridable";
            this.hover.innerHTML = '\x3cdiv class\x3d"topLeft"\x3e\x3cdiv class\x3d"bPageBlock"\x3e\x3cdiv class\x3d"pbBody"\x3e' + LC.getLabel("Global", "loading") + '\x3cdiv\x3e\x3cdiv class\x3d"pbFooter"\x3e\x3cdiv class\x3d"bg"\x3e\x3cdiv\x3e\x3c/div\x3e\x3c/div\x3e\x3cdiv\x3e';
            let scrollableDiv = document.getElementById('scrollableDiv');
            if(scrollableDiv) {
                scrollableDiv.appendChild(this.hover);
            } else {
                document.body.appendChild(this.hover);
            }
            
            var c = this;
            addEvent(this.hover, "mouseover", function() {
                c.show()
            }, !0);
            addEvent(this.hover, "mouseout", function() {
                c.hide()
            }, !0);
            this.hover = new iframeShim(this.hover);
            this.originalClass = "";
            this.fadingIn = this.fadingOut = null;
            this.loaderURL = b;
            this.loaded = !1
        }
        LookupHoverDetail.STANDARD_BUBBLE_WIDTH = 302;
        LookupHoverDetail.STANDARD_BUBBLE_HEIGHT = 262;
        LookupHoverDetail.SHOW_DELAY = 800;
        LookupHoverDetail.HIDE_DELAY = 250;
        LookupHoverDetail.stopLoading = !1;
        LookupHoverDetail.hovers = {};
        LookupHoverDetail.getHover = function(a, b) {
            if (LookupHoverDetail.hovers[a])
                return LookupHoverDetail.hovers[a];
            var c = new LookupHoverDetail(a,b);
            return LookupHoverDetail.hovers[a] = c
        };
        LookupHoverDetail.hideAllHovers = function() {
            var a = LookupHoverDetail.hovers, b;
            for (b in a)
                a.hasOwnProperty(b) && a[b] && a[b].hide()
                };
        LookupHoverDetail.prototype.show = function() {
            if (6 !== this.id.indexOf("00k"))
                if (this.fadingOut)
                    clearTimeout(this.fadingOut),
                        this.fadingOut = null;
                else {
                    var a = this;
                    !this.fadingIn && !this.isShowing() && (this.fadingIn = setTimeout(function() {
                        a.showNow()
                    }, LookupHoverDetail.SHOW_DELAY))
                }
        };
        LookupHoverDetail.prototype.showNow = function() {
            if (getElementByIdCS(this.id)) {
                if (!this.loaded)
                    if (null != this.loaderURL) {
                        var a = this;
                        Sfdc.Ajax.get(this.loaderURL, function(b, c) {
                            a.load(b, c)
                        }, {
                            failure: function(b) {
                                a.failedLoad(b)
                            }
                        })
                    } else
                        return;
                this.position();
                this.hover.setStyle("display", "block");
                this.fadingIn = null
            }
        };
        LookupHoverDetail.prototype.hide = function() {
            if (6 !== this.id.indexOf("00k"))
                if (this.fadingIn)
                    clearTimeout(this.fadingIn),
                        this.fadingIn = null;
                else {
                    var a = this;
                    this.fadingOut = setTimeout(function() {
                        a.hideNow()
                    }, LookupHoverDetail.HIDE_DELAY)
                }
        };
        LookupHoverDetail.prototype.hideNow = function() {
            this.hover.setStyle("display", "none");
            this.fadingOut = null
        };
        LookupHoverDetail.prototype.isShowing = function() {
            return "block" === this.hover.getStyle("display")
        };
        LookupHoverDetail.prototype.load = function(a, b) {
            a && -1 !== a.indexOf("\x3cscript\x3e\nif (this.SfdcApp") ? (top.Ext.Msg.alert(LC.getLabel("ServiceDeskApp", "errorTitle"), LC.getLabel("ServiceDesk", "sessionTimedOutError")),
                                                                         this.hover.div.innerHTML = "") : (this.hover.div.innerHTML = a,
                                                                                                           Util.evalScriptsUnderElement(this.hover.div),
                                                                                                           this.originalClass = this.hover.div.firstChild.className,
                                                                                                           this.height = this.hover.div.offsetHeight,
                                                                                                           delStyleClass(this.hover.div, "lookupHoverDetailLoading"),
                                                                                                           this.position());
            // fixPopUpStyle(this.hover.div);
            this.loaded = !0
        };
        LookupHoverDetail.prototype.failedLoad = function(a) {
            this.hover.div.innerHTML = "";
            this.failed = this.loaded = !0;
            a = Ext.get(this.id);
            this.qtip && (a && a.child("span.x-tab-strip-text", !0)) && (a.child("span.x-tab-strip-text", !0).qtip = this.qtip)
        };
        LookupHoverDetail.prototype.position = function() {
            let scrollableDiv = document.getElementById('scrollableDiv');
            let scrollableDivTop = scrollableDiv.getBoundingClientRect().top;
                    
            var a = getElementByIdCS(this.id)
            , b = a.getBoundingClientRect()
            , c = b.left
            , d = b.top
            , b = a.offsetWidth
            , e = a.offsetHeight
            , f = getScrollX()
            , g = getScrollY()
            , h = getWindowWidth()
            , k = getWindowHeight()
            , a = this.originalClass + " ";

            d + e + this.height < k ? (a += "top",
                                       d = d + e + g) : (a += "bottom",
                                                         d = d - this.height + g);
            c + b - this.bubbleOffset + this.width < h ? (a += "Left",
                                                          c = c + f + b / 2 - this.bubbleOffset) : (a += "Right",
                                                                                                    c = c + f + b / 2 - this.width);

            let newD = d - (scrollableDivTop ? scrollableDivTop : 0);
            this.hover.setStyle("left", c + "px");
            //this.hover.setStyle("top", d + "px");
            this.hover.setStyle("top", newD + "px");
            this.hover.div.firstChild.className = a;
            if (this.hover.div.firstChild && (c = Util.hasStyleEndsWith(this.hover.div.firstChild, "Override")))
                delStyleClass(this.hover.div, "lookupHoverDetailOverridable"),
                    delStyleClass(this.hover.div.firstChild, c),
                    addStyleClass(this.hover.div, c)
                };
        </script>
    </body>

    </html>

</apex:page>