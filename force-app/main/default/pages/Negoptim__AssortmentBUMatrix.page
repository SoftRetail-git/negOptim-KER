<apex:page id="thePage" standardController="Negoptim__Assortment_BU__c" extensions="Negoptim.AssortmentBUMatrixController"
           lightningStylesheets="true" sidebar="false" showHeader="false" applyHtmlTag="false" applyBodyTag="false"
           docType="html-5.0">
    <html class="slds-scope">

        <head>
            <apex:slds />
            <!-- <apex:stylesheet value="{!URLFOR($Resource.Assets, 'assets/css/app.css')}" /> -->
            <apex:stylesheet value="{!URLFOR($Resource.Negoptim__simptip, 'simptip/simptip.css')}" />
            <apex:includeScript value="{!URLFOR($Resource.Negoptim__JQuery, 'jquery.min.js')}" />
            <apex:includeScript value="{!URLFOR($Resource.Negoptim__fancytree, 'fancytree/dist/jquery.fancytree-all-deps.min.js')}" />
            <apex:includeScript value="{!URLFOR($Resource.Negoptim__fancytree, 'fancytree/dist/modules/jquery.fancytree.filter.js')}" />
            <apex:includeScript value="{!URLFOR($Resource.Negoptim__fancytree, 'fancytree/src/jquery.fancytree.table.js')}" />
            <apex:includeScript value="{!URLFOR($Resource.Negoptim__fancytree, 'fancytree/src/jquery.fancytree.gridnav.js')}" />
            <apex:stylesheet value="{!URLFOR($Resource.Negoptim__fancytree, 'fancytree/dist/skin-win8/ui.fancytree.min.css')}" />
            <apex:includeScript value="{!URLFOR($Resource.Negoptim__Assets, 'assets/js/app.js')}" />
        </head>

        <body class="slds-brand-band slds-brand-band_large slds-scrollable_none">
            <div class="loading-overlay" id="welcomeSpinner">
                <div class="slds-spinner_container">
                    <div role="status" class="slds-spinner slds-spinner_large slds-spinner_brand">
                        <span class="slds-assistive-text">
                            {!JSINHTMLENCODE($Label.Loading)}
                        </span>
                        <div class="slds-spinner__dot-a"></div>
                        <div class="slds-spinner__dot-b"></div>
                    </div>
                </div>
            </div>
            <div id="datePickerContainer"></div>
            <div class="slds-p-horizontal_small" onclick="setTimeout(function () {setTreeMargin();setTableDimensions();setStickyColumns();}, 50);">
                <apex:pageMessages id="pageMessages" escape="false"/>
            </div>
            <div style="overflow:hidden;" class="slds-p-around_small">
                <apex:form Id="theForm"
                           rendered="{!AND(!IsNull(Negoptim__Assortment_BU__c.Id), gridSettingsManager.ERRORS.size == 0)}">
                    <!-- title header, buttons, assortment bu information banner -->
                    <div class="slds-page-header slds-m-bottom_small" id="pageHeader">
                        <div class="slds-grid">
                            <div class="slds-col slds-has-flexi-truncate">
                                <!-- HEADING AREA -->
                                <!-- MEDIA OBJECT = FIGURE + BODY -->
                                <div class="slds-media slds-no-space slds-grow">
                                    <div class="slds-media__figure">
                                        <!--icon-->
                                        <div class="slds-avatar slds-icon_container slds-icon-standard-account"
                                             aria-expanded="false" aria-haspopup="true"
                                             title="{!$ObjectType.Negoptim__Assortment_BU__c.labelPlural}"
                                             xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                                            <svg focusable="false" data-key="settings" aria-hidden="true" class="slds-icon">
                                                <use
                                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/standard-sprite/svg/symbols.svg#partner_fund_claim')}">
                                                </use>
                                            </svg>
                                            <span
                                                  class="slds-assistive-text">{!$ObjectType.Negoptim__Assortment_BU__c.labelPlural}</span>
                                        </div>
                                    </div>
                                    <div class="slds-media__body">
                                        <p class="slds-text-title slds-line-height_reset">
                                            <apex:outputText value="{!$ObjectType.Negoptim__Assortment_BU__c.labelPlural}" />
                                        </p>
                                        <h1 class="slds-page-header__title slds-m-right_small slds-align-middle slds-truncate"
                                            title="{!IF(Negoptim__Assortment_BU__c.Id!=Null,Negoptim__Assortment_BU__c.Negoptim__Long_Name__c,'')}">
                                            <apex:outputText value="{!IF(Negoptim__Assortment_BU__c.Id!=Null,Negoptim__Assortment_BU__c.Negoptim__Long_Name__c,'')}"
                                                             id="sectionHeaderPanel" />
                                        </h1>
                                    </div>
                                </div>
                            </div>
                            <!-- ACTION BUTTONS -->
                            <apex:outputPanel id="actionButtons" layout="block"
                                              styleclass="slds-col slds-no-flex slds-grid slds-align-top">
                                <div class="slds-page-header__control">
                                    <div class="slds-grid">
                                        <!-- cancel -->
                                        <apex:commandButton value="{!$Label.negoptim__Cancel}" action="{!cancel}" rendered="true"
                                                            styleClass="slds-button slds-button_neutral" />
                                        <!-- save -->
                                        <apex:outputPanel rendered="{!AND(hasDetails, !readOnly)}">
                                            <button class="slds-button slds-button_brand" onclick="confirmSave();return false;"><apex:outputText value="{!$Label.negoptim__Save}"/></button>
                                        </apex:outputPanel>
                                        <!-- more actions menu toggle -->
                                        <apex:outputPanel layout="block" rendered="{!AND(hasDetails, !readOnly)}" id="settings">
                                            <div class="slds-dropdown-trigger slds-dropdown-trigger_click slds-p-left_xx-small"
                                                 id="settings-menu">
                                                <div class="slds-button slds-button_icon slds-button_icon-more"
                                                     aria-expanded="false" aria-haspopup="true"
                                                     title="ContrÃ´les de vue de liste" onclick="toggleMenu();return false;"
                                                     xmlns="http://www.w3.org/2000/svg"
                                                     xmlns:xlink="http://www.w3.org/1999/xlink">
                                                    <svg focusable="false" data-key="settings" aria-hidden="true"
                                                         class="slds-button__icon">
                                                        <use
                                                             xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#lightning_extension')}">
                                                        </use>
                                                    </svg>
                                                    <svg focusable="false" data-key="down" aria-hidden="true"
                                                         class="slds-button__icon slds-button__icon_x-small slds-m-left_xx-small">
                                                        <use
                                                             xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#down')}">
                                                        </use>
                                                    </svg>
                                                    <span class="slds-assistive-text">{!$Label.LBL_More_Actions}</span>
                                                </div>
                                                <div
                                                     class="slds-dropdown slds-dropdown_right slds-nubbin_top-right">
                                                    <div class="slds-dropdown__list" role="menu" aria-label="Show More"
                                                         style="min-width: 10rem;">
                                                        <apex:outputPanel layout="block"
                                                                          rendered="{!AND(hasDetails, !readOnly, gridSettingsManager.gridLayout.DeveloperName != assortmentMatrixTargetGridLayout)}">
                                                            <div role="presentation" class="slds-dropdown__item">
                                                                <apex:outputPanel layout="none"
                                                                                  rendered="{!AND(Negoptim__Assortment_BU__c.Negoptim__Status__c != 'Open (in bulding process)', nbASDinPreparation == 0)}">
                                                                    <button type="button" disabled="true"
                                                                            class="slds-button slds-size_1-of-1 slds-truncate"
                                                                            style="margin:0px;padding-top:0px;padding-bottom:0px;padding-right:0px;">
                                                                        <span class="slds-truncate">
                                                                            <span
                                                                                  class="slds-icon slds-icon_x-small slds-icon-text-default slds-m-right_x-small">
                                                                            </span>
                                                                            <apex:outputText value="{!$Label.negoptim__LBL_Request_For_Approval_DV_Nego}" />
                                                                        </span>
                                                                    </button>
                                                                </apex:outputPanel>
                                                                <apex:outputPanel layout="none"
                                                                                  rendered="{!!AND(Negoptim__Assortment_BU__c.Negoptim__Status__c != 'Open (in bulding process)', nbASDinPreparation == 0)}">
                                                                    <button
                                                                            onclick="confirmRequestForApproval();return false;"
                                                                            type="button"
                                                                            class="slds-button slds-size_1-of-1 slds-truncate"
                                                                            style="margin:0px;padding-top:0px;padding-bottom:0px;padding-right:0px;">
                                                                        <span class="slds-truncate">
                                                                            <span
                                                                                  class="slds-icon slds-icon_x-small slds-icon-text-default slds-m-right_x-small">
                                                                            </span>
                                                                            <apex:outputText value="{!$Label.negoptim__LBL_Request_For_Approval_DV_Nego}" />
                                                                        </span>
                                                                    </button>
                                                                </apex:outputPanel>
                                                            </div>
                                                        </apex:outputPanel>
                                                        <apex:outputPanel layout="block"
                                                                          rendered="{!AND(hasDetails, !readOnly)}">
                                                            <div role="presentation" class="slds-dropdown__item">
                                                                <apex:outputPanel layout="none"
                                                                                  rendered="{!!AND(Negoptim__Assortment_BU__c.Negoptim__Status__c != 'Open (in bulding process)', Negoptim__Assortment_BU__c.Negoptim__Status__c != 'Request for Approval', nbASDinPreparation == 0, nbASDRequestApproval == 0)}">
                                                                    <button
                                                                            onclick="toggleMenu();confirmValidation();return false;"
                                                                            type="button"
                                                                            class="slds-button slds-size_1-of-1 slds-truncate"
                                                                            style="margin:0px;padding-top:0px;padding-bottom:0px;padding-right:0px;">
                                                                        <span class="slds-truncate">
                                                                            <span
                                                                                  class="slds-icon slds-icon_x-small slds-icon-text-default slds-m-right_x-small">
                                                                            </span>
                                                                            <apex:outputText value="{!$Label.negoptim__Validate}" />
                                                                        </span>
                                                                    </button>
                                                                </apex:outputPanel>
                                                                <apex:outputPanel layout="none"
                                                                                  rendered="{!AND(Negoptim__Assortment_BU__c.Negoptim__Status__c != 'Open (in bulding process)', Negoptim__Assortment_BU__c.Negoptim__Status__c != 'Request for Approval', nbASDinPreparation == 0, nbASDRequestApproval == 0)}">
                                                                    <button type="button" disabled="true"
                                                                            class="slds-button slds-size_1-of-1 slds-truncate"
                                                                            style="margin:0px;padding-top:0px;padding-bottom:0px;padding-right:0px;">
                                                                        <span class="slds-truncate">
                                                                            <span
                                                                                  class="slds-icon slds-icon_x-small slds-icon-text-default slds-m-right_x-small">
                                                                            </span>
                                                                            <apex:outputText value="{!$Label.negoptim__Validate}" />
                                                                        </span>
                                                                    </button>
                                                                </apex:outputPanel>
                                                            </div>
                                                        </apex:outputPanel>
                                                        <apex:outputPanel layout="block"
                                                                          rendered="{!AND(hasDetails, productSwitchCount > 0)}">
                                                            <div role="presentation"
                                                                 class="slds-dropdown__item slds-has-divider_top">
                                                                <button type="button"
                                                                        onclick="toggleMenu();showMultipleSwitchPopup();return false;"
                                                                        class="slds-button slds-size_1-of-1 slds-truncate"
                                                                        style="margin:0px;padding-top:0px;padding-bottom:0px;padding-right:0px;">
                                                                    <span class="slds-truncate">
                                                                        <svg class="slds-icon slds-icon_x-small slds-icon-text-default slds-m-right_x-small"
                                                                             style="transform: rotate(90deg);"
                                                                             aria-hidden="true">
                                                                            <use xmlns="http://www.w3.org/2000/svg"
                                                                                 xmlns:xlink="http://www.w3.org/1999/xlink"
                                                                                 xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#sort')}" />
                                                                        </svg>
                                                                        <apex:outputText value="{!$Label.negoptim__Switch_All}" />
                                                                    </span>
                                                                </button>
                                                            </div>
                                                        </apex:outputPanel>
                                                        <apex:outputPanel layout="block" rendered="{!hasDetails}">
                                                            <div role="presentation"
                                                                 class="slds-dropdown__item slds-has-divider_top">
                                                                <button onclick="popupGenerateExcel(true);toggleMenu();return false;"
                                                                        type="button" status="globalloadingFullscreen"
                                                                        class="slds-button slds-size_1-of-1 slds-truncate"
                                                                        style="margin:0px;padding-top:0px;padding-bottom:0px;padding-right:0px;">
                                                                    <apex:param name="popupGenerateExcel"
                                                                                assignTo="{!popupGenerateExcel}" value="true" />
                                                                    <span class="slds-truncate">
                                                                        <svg class="slds-icon slds-icon_x-small slds-icon-text-default slds-m-right_x-small"
                                                                             aria-hidden="true">
                                                                            <use xmlns="http://www.w3.org/2000/svg"
                                                                                 xmlns:xlink="http://www.w3.org/1999/xlink"
                                                                                 xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/action-sprite/svg/symbols.svg#email')}" />
                                                                        </svg>
                                                                        <apex:outputText value="{!$Label.negoptim__LBL_Send}" />
                                                                    </span>
                                                                </button>
                                                            </div>
                                                            <div role="presentation" class="slds-dropdown__item">
                                                                <button type="button"
                                                                        onclick="toggleMenu();generateExcel(); toggleMenu(); return false;"
                                                                        class="slds-button slds-size_1-of-1 slds-truncate"
                                                                        style="margin:0px;padding-top:0px;padding-bottom:0px;padding-right:0px;">
                                                                    <span class="slds-truncate">
                                                                        <svg class="slds-icon slds-icon_x-small slds-icon-text-default slds-m-right_x-small"
                                                                             aria-hidden="true">
                                                                            <use xmlns="http://www.w3.org/2000/svg"
                                                                                 xmlns:xlink="http://www.w3.org/1999/xlink"
                                                                                 xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/doctype-sprite/svg/symbols.svg#excel')}" />
                                                                        </svg>
                                                                        <apex:outputText value="{!$Label.negoptim__LBL_Export_Details}" />
                                                                    </span>
                                                                </button>
                                                            </div>
                                                        </apex:outputPanel>
                                                    </div>
                                                </div>
                                            </div>
                                        </apex:outputPanel>
                                        <!-- toggle tree button -->
                                        <button id="total-tree-toggle"
                                                class="slds-button slds-button_icon slds-button_icon-border-filled slds-m-left_xx-small"
                                                title="{!$Label.LBL_Show_Total}" onclick="toggleTotals();" type="button">
                                            <svg class="slds-button__icon" aria-hidden="true">
                                                <use xmlns="http://www.w3.org/2000/svg"
                                                     xmlns:xlink="http://www.w3.org/1999/xlink"
                                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#hierarchy')}" />
                                            </svg>
                                            <span class="slds-assistive-text">{!$Label.LBL_Show_Total}</span>
                                        </button>
                                        <!-- toggle filter button -->
                                        <button id="filter-panel-toggle"
                                                class="slds-button slds-button_icon slds-button_icon-border-filled slds-m-left_xx-small"
                                                title="{!$Label.LBL_Filter}" onclick="toggleFilterPanel();return false;">
                                            <svg class="slds-button__icon" aria-hidden="true">
                                                <use xmlns="http://www.w3.org/2000/svg"
                                                     xmlns:xlink="http://www.w3.org/1999/xlink"
                                                     xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#filterList')}" />
                                            </svg>
                                            <span class="slds-assistive-text">{!$Label.negoptim__LBL_Filter}</span>
                                        </button>
                                    </div>
                                </div>
                            </apex:outputPanel>
                        </div>
                        <!-- assortment bu information banner -->
                        <apex:outputPanel layout="block"
                                          rendered="{!gridSettingsManager.BANNER_FIELDS.size != 0 && gridSettingsManager.ERRORS.size == 0}">
                            <ul class="slds-grid slds-page-header__detail-row" id="bannerList" style="overflow: hidden;">
                                <apex:repeat value="{!gridSettingsManager.BANNER_FIELDS}" var="item">
                                    <li class="slds-page-header__detail-block">
                                        <p class="slds-text-title slds-truncate" title="{!item.fieldLabel}">
                                            <apex:outputText value="{!item.fieldLabel}" />
                                        </p>
                                        <p class="slds-text-body_regular slds-show_inline-block slds-truncate" title="">
                                            <span class="banner-labels">
                                                <apex:outputField value="{!assortmentBU[item.fieldName]}" />
                                            </span>
                                        </p>
                                    </li>
                                </apex:repeat>
                            </ul>
                        </apex:outputPanel>
                    </div>
                    <!-- search based on filters -->
                    <apex:actionFunction action="{!search}" name="search"
                                         rerender="filterSection,assortmentDetailsGrid,filterPanel,clientStatus_serialized,buttonsBlock,pageMessages,actionButtons"
                                         status="globalloadingFullscreen" oncomplete="setChangesOnPageTrue();afterRerender();">
                        <apex:param name="clientSatus" value="" assignTo="{!clientStatus}" />
                        <apex:param name="Product_Reference_Type__c" assignTo="{!productReferenceType}" value="" />
                        <apex:param name="isStopProducts" value="" assignTo="{!isStopProducts}" />
                    </apex:actionFunction>
                    <!-- refreshPageSize -->
                    <apex:actionFunction name="refreshPageSize" action="{!refreshPageSize}"
                                         reRender="assortmentDetailsGrid,filterPanel,clientStatus_serialized,actionButtons"
                                         status="fetchStatus" oncomplete="setChangesOnPageTrue();afterRerender();" >
                        <apex:param name="assortmentDetailChangesList" value="" assignTo="{!assortmentDetailChangesList}"/>
                    </apex:actionFunction>
                    <!-- PAGINATION -->
                    <apex:actionFunction name="first" action="{!first}" reRender="assortmentDetailsGrid,clientStatus_serialized, pageMessages" status="fetchStatus" oncomplete="setChangesOnPageTrue();afterRerender();">
                        <apex:param name="assortmentDetailChangesList" value="" assignTo="{!assortmentDetailChangesList}"/>
                    </apex:actionFunction>
                    <apex:actionFunction name="previous" action="{!previous}" reRender="assortmentDetailsGrid,clientStatus_serialized, pageMessages" status="fetchStatus" oncomplete="setChangesOnPageTrue();afterRerender();">
                        <apex:param name="assortmentDetailChangesList" value="" assignTo="{!assortmentDetailChangesList}"/>
                    </apex:actionFunction>
                    <apex:actionFunction name="next" action="{!next}" reRender="assortmentDetailsGrid,clientStatus_serialized, pageMessages" status="fetchStatus" oncomplete="setChangesOnPageTrue();afterRerender();">
                        <apex:param name="assortmentDetailChangesList" value="" assignTo="{!assortmentDetailChangesList}"/>
                    </apex:actionFunction>
                    <apex:actionFunction name="last" action="{!last}" reRender="assortmentDetailsGrid,clientStatus_serialized, pageMessages" status="fetchStatus" oncomplete="setChangesOnPageTrue();afterRerender();">
                        <apex:param name="assortmentDetailChangesList" value="" assignTo="{!assortmentDetailChangesList}"/>
                    </apex:actionFunction>
                    <!-- show popup for mass switch-->
                    <apex:actionFunction name="popupGenerateExcel" action="{!showPopup}"
                                         rerender="popupGenerateExcelForm, pageMessages" status="globalloadingFullscreen">
                        <apex:param name="popupGenerateExcel" assignTo="{!popupGenerateExcel}" value="true" />
                    </apex:actionFunction>
                    <!-- show popup for mass switch-->
                    <apex:actionFunction name="showMultipleSwitchPopup" action="{!showPopup}"
                                         rerender="assortmentDetailsGrid,filterPanel,clientStatus_serialized,popupSwitchProduct,pageMessages,actionButtons"
                                         status="globalloadingFullscreen" oncomplete="afterRerender();">
                        <apex:param name="popupSwitchProduct" assignTo="{!popupSwitchProduct}" value="true" />
                        <apex:param name="singleProductAction" assignTo="{!singleProductAction}" value="false" />
                    </apex:actionFunction>
                    <!-- show popup for single product switch-->
                    <apex:actionFunction name="showSingleSwitchPopup" action="{!showPopup}"
                                         rerender="assortmentDetailsGrid,filterPanel,clientStatus_serialized,popupSwitchProduct,pageMessages,actionButtons"
                                         status="globalloadingFullscreen" oncomplete="afterRerender();">
                        <apex:param name="popupSwitchProduct" assignTo="{!popupSwitchProduct}" value="" />
                        <apex:param name="assortmentDetailId" assignTo="{!assortmentDetailId}" value="" />
                        <apex:param name="assortmentDetailCategory" assignTo="{!assortmentDetailCategory}" value="" />
                        <apex:param name="singleProductAction" assignTo="{!singleProductAction}" value="" />
                    </apex:actionFunction>
                    <!-- show popup for mass stop-->
                    <!--apex:actionFunction name="showMultipleStopPopup" action="{!showPopup}"
                                         rerender="assortmentDetailsGrid,filterPanel,clientStatus_serialized,popupStopProduct,pageMessages,actionButtons"
                                         status="globalloadingFullscreen" oncomplete="afterRerender();">
                        <apex:param name="popupStopProduct" assignTo="{!popupStopProduct}" value="true" />
                        <apex:param name="singleProductAction" assignTo="{!singleProductAction}" value="false" />
                    </apex:actionFunction-->
                    <!-- show popup for single product stop-->
                    <!--apex:actionFunction name="showSingleStopPopup" action="{!showPopup}"
                                         rerender="assortmentDetailsGrid,filterPanel,clientStatus_serialized,popupStopProduct,pageMessages,actionButtons"
                                         status="globalloadingFullscreen" oncomplete="afterRerender();">
                        <apex:param name="productToStopId" assignTo="{!productToStopId}" value="" />
                        <apex:param name="popupStopProduct" assignTo="{!popupStopProduct}" value="" />
                        <apex:param name="singleProductAction" assignTo="{!singleProductAction}" value="" />
                    </apex:actionFunction-->
                    <apex:actionFunction name="save" action="{!save}" status="globalloadingFullscreen" reRender="theForm, pageMessages"
                                         oncomplete="resetChanges(); setChangesOnPageTrue();afterRerender(true);" >
                        <apex:param name="assortmentDetailChangesList" value="" assignTo="{!assortmentDetailChangesList}"/>
                    </apex:actionFunction>
                    <apex:actionFunction name="validateAssortment" action="{!validateAssortment}" status="globalloadingFullscreen"
                                         reRender="theForm, pageMessages" rendered="{!AND(hasDetails, !readOnly)}"
                                         oncomplete="afterRerender(true);" />
                    <apex:actionFunction name="requestForApproval" action="{!requestForApproval}" status="globalloadingFullscreen"
                                         reRender="theForm, pageMessages" rendered="{!AND(hasDetails, !readOnly)}"
                                         oncomplete="afterRerender();" />
                    <apex:actionFunction name="generateExcel" action="{!generateExcel}" />
                    <!-- action function to show the popup SelectHigherLevelPackaging for a specific product -->
                    <apex:actionFunction name="showSelectHigherLevelPackagingPopup" action="{!showPopup}"
                                         rerender="assortmentDetailsGrid,filterPanel,clientStatus_serialized,popupSelectHigherLevelPackaging,pageMessages,actionButtons"
                                         status="globalloadingFullscreen" oncomplete="afterRerender();disableIsMasterCheckboxes();">
                        <apex:param name="productToSelectedHigherLevelPackaging" assignTo="{!productToSelectedHigherLevelPackaging}" value="" />
                        <apex:param name="popupSelectHigherLevelPackaging" assignTo="{!popupSelectHigherLevelPackaging}" value="true" />
                    </apex:actionFunction>
                    <!-- Assortment Details BLOCK -->
                    <apex:outputPanel layout="block" styleClass="totalContainer">
                        <!-- rendered="{!hasDetails}" -->
                        <apex:outputPanel layout="block" id="blockOfTotals" title="{!$Label.negoptim__LBL_Totals}"
                                          styleClass="slds-card">
                            <div class="slds-card__header slds-grid">
                                <header class="slds-media slds-media_center slds-has-flexi-truncate">
                                    <div class="slds-media__body">
                                        <h2 class="slds-card__header-title">
                                            <span>{!$Label.negoptim__LBL_Totals}</span>
                                        </h2>
                                    </div>
                                    <div class="slds-no-flex">
                                        <!-- contract tree button -->
                                        <button class="slds-button slds-button_icon slds-button_icon-border-filled slds-m-left_xx-small slds-m-bottom_xx-small"
                                                title="{!$Label.LBL_Contract_Tree}" onclick="contractTree();return false;">
                                            <svg class="slds-button__icon" aria-hidden="true">
                                                <use xmlns="http://www.w3.org/2000/svg"
                                                     xmlns:xlink="http://www.w3.org/1999/xlink"
                                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#jump_to_top')}" />
                                            </svg>
                                        </button>
                                        <!-- expand tree button -->
                                        <button class="slds-button slds-button_icon slds-button_icon-border-filled slds-m-left_xx-small slds-m-bottom_xx-small"
                                                title="{!$Label.LBL_Expand_Tree}" onclick="expandTree();return false;">
                                            <svg class="slds-button__icon" aria-hidden="true">
                                                <use xmlns="http://www.w3.org/2000/svg"
                                                     xmlns:xlink="http://www.w3.org/1999/xlink"
                                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#jump_to_bottom')}" />
                                            </svg>
                                        </button>
                                        <!-- toggle full screen button -->
                                        <button id="tree-full-screen-toggle"
                                                class="slds-button slds-button_icon slds-button_icon-border-filled slds-m-left_xx-small slds-m-bottom_xx-small"
                                                title="{!$Label.LBL_Open_Fullscreen}"
                                                onclick="toggleTreeFullScreen(this);return false;">
                                            <svg class="slds-button__icon" aria-hidden="true">
                                                <use xmlns="http://www.w3.org/2000/svg"
                                                     xmlns:xlink="http://www.w3.org/1999/xlink"
                                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#expand')}" />
                                            </svg>
                                        </button>
                                    </div>
                                </header>
                            </div>
                            <div id="treeDiv" class="slds-card__body slds-card__body_inner">
                                <apex:outputPanel layout="block" id="dataGridBlock">
                                    <!-- rendered="{!hasDetails}" -->
                                    <apex:outputPanel layout="block">
                                        <div style="max-height: 200px;" class="slds-scrollable">
                                            <!-- Tree Section -->
                                            <table id="treegrid"
                                                   class="slds-table slds-table_cell-buffer slds-table_bordered slds-table_col-bordered">
                                                <thead>
                                                    <tr>
                                                        <th style="display:none;"></th>
                                                        <th style="display:none;"></th>
                                                        <th style="min-width:200px;"></th>
                                                        <apex:repeat value="{!totalFields}" var="field">
                                                            <th>
                                                                <apex:outputText value="{!field.fieldLabel}">
                                                                </apex:outputText>
                                                            </th>
                                                        </apex:repeat>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <tr style="text-align:center;">
                                                        <td style="display:none;"></td>
                                                        <td style="display:none;"></td>
                                                        <td style="text-align:left;"></td>
                                                        <apex:repeat value="{!totalFields}" var="field">
                                                            <td></td>
                                                        </apex:repeat>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </apex:outputPanel>
                                </apex:outputPanel>
                            </div>
                        </apex:outputPanel>
                    </apex:outputPanel>
                    <div class="slds-grid">
                        <div class="slds-col slds-scrollable">
                            <apex:pageBlock id="AssortmentDetailSection">
                                <apex:actionStatus id="searchloading">
                                    <apex:facet name="start">
                                        <div class="slds-spinner_container">
                                            <div role="status" class="slds-spinner slds-spinner_small">
                                                <span class="slds-assistive-text">{!JSINHTMLENCODE($Label.Loading)}</span>
                                                <div class="slds-spinner__dot-a"></div>
                                                <div class="slds-spinner__dot-b"></div>
                                            </div>
                                        </div>
                                    </apex:facet>
                                </apex:actionStatus>
                                <apex:actionStatus id="globalloadingFullscreen">
                                    <apex:facet name="start">
                                        <div class="slds-spinner_container">
                                            <div role="status" class="slds-spinner slds-spinner_large slds-spinner_brand">
                                                <span class="slds-assistive-text">
                                                    {!JSINHTMLENCODE($Label.Loading)}
                                                </span>
                                                <div class="slds-spinner__dot-a"></div>
                                                <div class="slds-spinner__dot-b"></div>
                                            </div>
                                        </div>
                                    </apex:facet>
                                </apex:actionStatus>
                                <!-- --------------------------------------------------  Save/Cancel block. -->
                                <apex:outputPanel layout="block" styleClass="slds-size_1-of-1">
                                    <apex:outputPanel layout="block" id="buttonsBlock" styleClass="slds-float_right">
                                        <!-- legend -->
                                        <apex:outputPanel rendered="{!isOrgCPG}">
                                            <!-- switch icon -->
                                            <span class="lengend-square switchIcon {!IF(CONTAINS(productReferenceType,'Switch'), 'selected', '')}"
                                                  onclick="search('{!JSENCODE(clientStatus)}',
                                                           '{!IF(CONTAINS(productReferenceType,'Switch'),SUBSTITUTE(productReferenceType, 'Switch-', ''),
                                                           productReferenceType & 'Switch-')}',
                                                           {!isStopproducts});"
                                                  title="{!$Label.LBL_Switch_Helptext}"></span>
                                            <span class="legend-label">{!$Label.negoptim__Switch}</span>
                                            <!-- renno icon -->
                                            <span class="lengend-square renoIcon {!IF(CONTAINS(productReferenceType,'Reno'), 'selected', '')}"
                                                  onclick="search('{!JSENCODE(clientStatus)}',
                                                           '{!IF(CONTAINS(productReferenceType,'Reno'),SUBSTITUTE(productReferenceType, 'Reno-', ''),
                                                           productReferenceType & 'Reno-')}',
                                                           {!isStopproducts});"
                                                  title="{!$Label.LBL_Reno_Helptext}"></span>
                                            <span class="legend-label">{!$Label.Rennovation}</span>
                                            <!-- stop icon -->
                                            <span class="lengend-square stopIcon {!IF(isStopproducts, 'selected', '')}"
                                                  onclick="search('{!JSENCODE(clientStatus)}', '{!JSENCODE(productReferenceType)}', {!!isStopproducts});"
                                                  title="{!$Label.LBL_Stop_Helptext}"></span>
                                            <span class="legend-label">{!$Label.Stop}</span>
                                            <!-- colored squares -->
                                            <apex:repeat value="{!clientStatusesPickList}" var="clientStatusVal">
                                                <span class="lengend-square highlight-{!clientStatusVal.value} {!IF(CONTAINS(clientStatus, clientStatusVal.value), 'selected', '')}"
                                                      onclick="search('{!IF(CONTAINS(clientStatus,clientStatusVal.value),
                                                               SUBSTITUTE(clientStatus, clientStatusVal.value, ''),
                                                               clientStatus & '-' & clientStatusVal.value)}', '{!productReferenceType}', {!isStopproducts});">
                                                </span>
                                                <span class="legend-label">{!clientStatusVal.Label}</span>
                                            </apex:repeat>
                                        </apex:outputPanel>
                                        <!-- toggle full screen button -->
                                        <button id="full-screen-toggle"
                                                class="slds-button slds-button_icon slds-button_icon-border-filled slds-m-left_xx-small slds-m-bottom_xx-small"
                                                title="{!$Label.LBL_Open_Fullscreen}"
                                                onclick="toggleFullScreen(this);return false;">
                                            <svg class="slds-button__icon" aria-hidden="true">
                                                <use xmlns="http://www.w3.org/2000/svg"
                                                     xmlns:xlink="http://www.w3.org/1999/xlink"
                                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#expand')}" />
                                            </svg>
                                        </button>
                                    </apex:outputPanel>
                                </apex:outputPanel>

                                <!-- --------------------------------------------------  Grid: Assortment Details grouped by Category. -->
                                <div class="slds-size_1-of-1">
                                    <apex:outputPanel layout="block" id="assortmentDetailsGrid"
                                                      styleClass="slds-grid slds-wrap slds-scrollable_none assortmentDetailsGrid">
                                        <apex:outputPanel layout="block" rendered="{!!hasDetails}"
                                                          styleClass="slds-align-content-center slds-p-around_large">
                                            <div class="slds-media__body">
                                                <h2 class="slds-card__header-title slds-align-content-center">
                                                    <span>{!$Label.negoptim__LBL_No_Item_To_Display}</span>
                                                </h2>
                                            </div>
                                        </apex:outputPanel>
                                        <apex:outputPanel StyleClass="grid-container slds-size_1-of-1 slds-scrollable"
                                                          layout="block" rendered="{!hasDetails}">
                                            <apex:pageBlockTable style="width:100%;"
                                                                 styleClass="initial-table slds-table slds-table_cell-buffer slds-table_col-bordered slds-no-row-hover"
                                                                 id="initial-table" value="{!wAssortmentDetailList}" var="group" width="100%"
                                                                 onrowmouseover="this.classList.remove('highlight')">
                                                <!-- --------------------  COLUMN 1: CATEGORY -->
                                                <apex:column headerClass="outerColumnHeader" styleClass="slds-align-top slds-border_bottom slds-border_left slds-border_right slds-border_top">
                                                    <div class="sticky-top slds-p-left_small slds-p-top_xx-large"
                                                         style="min-width: 100px">
                                                        <apex:outputLink value="/{!group.categoryId}" target="_blank"
                                                                         rendered="{!CONTAINS(categoryNamesMapKeySet_SerialisedJSON,group.categoryId)}">
                                                            <apex:outputText value="{!categoryNamesMap[group.categoryId]}" />
                                                        </apex:outputLink>
                                                    </div>
                                                </apex:column>
                                                <!-- --------------------  COLUMN 2: DESCRIPTION -->
                                                <apex:column headerClass="outerColumnHeader">
                                                    <apex:variable value="{!counts[group.categoryId]}"
                                                                   var="categoryCountMap" />
                                                    <apex:variable value="{!sums[group.categoryId]}" var="categorySumMap" />
                                                    <!-- pageBlockTable for each category -->
                                                    <apex:dynamicComponent componentValue="{!DynamicPageBlockTable}" />
                                                </apex:column>
                                            </apex:pageBlockTable>
                                        </apex:outputPanel>
                                        <apex:outputPanel rendered="{!hasDetails}" layout="block" id="paginationBlock"
                                                          styleClass="slds-p-top_small slds-size_1-of-1">
                                            <apex:selectList value="{!pageSize}" multiselect="false" size="1"
                                                             onchange="refreshPageSize(JSON.stringify(assortmentDetailChangesList));">
                                                <apex:selectOptions value="{!pageSizes}" />
                                            </apex:selectList>
                                            <div class="slds-button-group slds-m-right_xx-small">
                                                <apex:outputPanel rendered="{!!assortmentDetailStdSetCtrl.hasPrevious}" layout="block">
                                                    <button class="slds-button slds-button_neutral" onclick="first(JSON.stringify(assortmentDetailChangesList));return false;"
                                                            disabled="true">
                                                        <apex:outputText value="{!$Label.negoptim__LBL_First}"></apex:outputText>
                                                    </button>
                                                    <button class="slds-button slds-button_neutral" onclick="previous(JSON.stringify(assortmentDetailChangesList));return false;"
                                                            disabled="true">
                                                        <apex:outputText value="{!$Label.negoptim__LBL_Previous}"></apex:outputText>
                                                    </button>
                                                </apex:outputPanel>
                                                <apex:outputPanel rendered="{!assortmentDetailStdSetCtrl.hasPrevious}" layout="block">
                                                    <button class="slds-button slds-button_neutral" onclick="first(JSON.stringify(assortmentDetailChangesList));return false;">
                                                        <apex:outputText value="{!$Label.negoptim__LBL_First}"></apex:outputText>
                                                    </button>
                                                    <button class="slds-button slds-button_neutral" onclick="previous(JSON.stringify(assortmentDetailChangesList));return false;">
                                                        <apex:outputText value="{!$Label.negoptim__LBL_Previous}"></apex:outputText>
                                                    </button>
                                                </apex:outputPanel>
                                                <apex:outputPanel rendered="{!!assortmentDetailStdSetCtrl.hasNext}" layout="block">
                                                    <button class="slds-button slds-button_neutral" onclick="next(JSON.stringify(assortmentDetailChangesList));return false;"
                                                            disabled="true">
                                                        <apex:outputText value="{!$Label.negoptim__LBL_Next}"></apex:outputText>
                                                    </button>
                                                    <button class="slds-button slds-button_neutral" onclick="last(JSON.stringify(assortmentDetailChangesList));return false;"
                                                            disabled="true">
                                                        <apex:outputText value="{!$Label.negoptim__LBL_Last}"></apex:outputText>
                                                    </button>
                                                </apex:outputPanel>
                                                <apex:outputPanel rendered="{!assortmentDetailStdSetCtrl.hasNext}" layout="block">
                                                    <button class="slds-button slds-button_neutral" onclick="next(JSON.stringify(assortmentDetailChangesList));return false;">
                                                        <apex:outputText value="{!$Label.negoptim__LBL_Next}"></apex:outputText>
                                                    </button>
                                                    <button class="slds-button slds-button_neutral" onclick="last(JSON.stringify(assortmentDetailChangesList));return false;">
                                                        <apex:outputText value="{!$Label.negoptim__LBL_Last}"></apex:outputText>
                                                    </button>
                                                </apex:outputPanel>
                                            </div>
                                            <div class="slds-badge">
                                                <apex:outputText style="text-align: right" value="{!(assortmentDetailStdSetCtrl.pageNumber * pageSize)+1-pageSize}-{!IF((assortmentDetailStdSetCtrl.pageNumber * pageSize)>noOfRecords, noOfRecords, (assortmentDetailStdSetCtrl.pageNumber * pageSize))} {!$Label.negoptim__LBL_Of} {!noOfRecords}"/>
                                            </div>
                                            <input type="hidden" name="clientStatus_serialized" id="clientStatus_serialized"
                                                   value="{!clientStatus_serialized}" />
                                            <input type="hidden" name="categoryBUClustersMap_serialized"
                                                   id="categoryBUClustersMap_serialized"
                                                   value="{!categoryBUClustersMap_serialized}" />
                                            <input type="hidden" name="stratsMap_serialized" id="stratsMap_serialized"
                                                   value="{!stratsMap_serialized}" />
                                            <input type="hidden" name="cpltMap_serialized" id="cpltMap_serialized"
                                                   value="{!cpltMap_serialized}" />
                                            <apex:actionStatus id="fetchStatus">
                                                <apex:facet name="start">
                                                    <div class="slds-spinner_container">
                                                        <div role="status" class="slds-spinner slds-spinner_small">
                                                            <span class="slds-assistive-text">{!JSINHTMLENCODE($Label.Loading)}</span>
                                                            <div class="slds-spinner__dot-a"></div>
                                                            <div class="slds-spinner__dot-b"></div>
                                                        </div>
                                                    </div>
                                                </apex:facet>
                                            </apex:actionStatus>
                                        </apex:outputPanel>
                                    </apex:outputPanel>
                                </div>
                                <!--popup generate Excel-->
                                <apex:outputPanel layout="block" id="popupGenerateExcelForm">
                                    <apex:outputPanel rendered="{!popupGenerateExcel}">
                                        <div id="popupExcel">
                                            <div role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true"
                                                 aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open">
                                                <div class="slds-modal__container">
                                                    <header class="slds-modal__header">
                                                        <h2 id="modal-heading-01" class="slds-modal__title slds-hyphenate">
                                                            {!$Label.Email_Form}</h2>
                                                    </header>
                                                    <div class="slds-modal__content slds-p-around_small" id="modal-content-id-1">
                                                        <div class="slds-form-element">
                                                            <label class="slds-form-element__label">
                                                                <apex:outputText value="{!$Label.negoptim__EmailTo}" /></label>
                                                            <div class="slds-form-element__control">
                                                                <apex:inputText value="{!emailTo}" styleClass="slds-input" />
                                                            </div>
                                                        </div>
                                                        <div class="slds-form-element">
                                                            <label class="slds-form-element__label">
                                                                <apex:outputText value="{!$Label.negoptim__emailCc}" /></label>
                                                            <div class="slds-form-element__control">
                                                                <apex:inputText value="{!emailCc}" styleClass="slds-input" />
                                                            </div>
                                                        </div>
                                                        <div class="slds-form-element">
                                                            <label class="slds-form-element__label">
                                                                <apex:outputText value="{!$Label.negoptim__emailBcc}" /></label>
                                                            <div class="slds-form-element__control">
                                                                <apex:inputText value="{!emailBcc}" styleClass="slds-input" />
                                                            </div>
                                                        </div>
                                                        <div class="slds-form-element">
                                                            <label class="slds-form-element__label">
                                                                <apex:outputText value="{!$Label.negoptim__Subject}" /></label>
                                                            <div class="slds-form-element__control">
                                                                <apex:inputText value="{!emailSubject}" styleClass="slds-input" />
                                                            </div>
                                                        </div>
                                                        <div class="slds-form-element">
                                                            <label class="slds-form-element__label">
                                                                <apex:outputText value="{!$ObjectType.Attachment.label}" /></label>
                                                            <div class="slds-form-element__control">
                                                                <apex:outputText value="{!IF(Negoptim__Assortment_BU__c.Id != null, Negoptim__Assortment_BU__c.Negoptim__Long_Name__c, '')}{!NOW()}.xls" />
                                                            </div>
                                                        </div>
                                                        <div class="slds-form-element">
                                                            <label class="slds-form-element__label">
                                                                <apex:outputText value="{!$Label.negoptim__Email_Body}" /></label>
                                                            <div class="slds-form-element__control">
                                                                <apex:inputTextarea rows="7" value="{!emailBody}"
                                                                                    styleClass="slds-textarea" />
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <footer class="slds-modal__footer">
                                                        <apex:commandButton value="{!$Label.negoptim__Cancel}" action="{!cancelPopup}"
                                                                            onclick="$('#popupExcel').hide();"
                                                                            reRender="popupGenerateExcelForm,pageMessages"
                                                                            styleClass="slds-button slds-button_neutral" />
                                                        <apex:commandButton value="{!$Label.negoptim__Send}" action="{!send}"
                                                                            onclick="$('#popupExcel').hide();"
                                                                            styleClass="slds-button slds-button_brand">
                                                            <apex:param name="popupGenerateExcel" assignTo="{!popupGenerateExcel}"
                                                                        value="false" />
                                                        </apex:commandButton>
                                                    </footer>
                                                </div>
                                            </div>
                                            <div class="slds-backdrop slds-backdrop_open"></div>
                                        </div>
                                    </apex:outputPanel>
                                </apex:outputPanel>
                                <!-- popup switch product -->
                                <apex:outputPanel layout="block" id="popupSwitchProduct">
                                    <apex:outputPanel rendered="{!popupSwitchProduct}">
                                        <div id="popupSwitch">
                                            <div role="dialog" tabindex="-1" aria-labelledby="modal-heading-02" aria-modal="true"
                                                 aria-describedby="modal-content-id-2"
                                                 class="slds-modal slds-fade-in-open slds-modal_medium">
                                                <div class="slds-modal__container">
                                                    <header class="slds-modal__header">
                                                        <h2 id="modal-heading-02" class="slds-modal__title slds-hyphenate">{!popupTitle}
                                                        </h2>
                                                    </header>
                                                    <div class="slds-modal__content" id="modal-content-id-2">
                                                        <apex:dataTable value="{!switchProductsList}" var="item"
                                                                        styleClass="slds-table slds-table_cell-buffer slds-no-row-hover slds-table_bordered">
                                                            <apex:column width="1%" rendered="{!AND(!singleProductAction, !readOnly)}">
                                                                <apex:facet name="header">
                                                                    <apex:inputCheckbox onchange="toggleSelectAll();" id="selectAll"
                                                                                        selected="true" />
                                                                </apex:facet>
                                                                <apex:inputCheckbox value="{!item.isSelected}" id="switchCheckbox" />
                                                            </apex:column>
                                                            <apex:column value="{!item.currentProduct}"
                                                                         headerValue="{!$Label.negoptim__Current_Product}" />
                                                            <apex:column value="{!item.newProduct}"
                                                                         headerValue="{!$Label.negoptim__New_Product}" />
                                                            <apex:column headerValue="{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__Movement_Date__c.label}">
                                                                <apex:inputField value="{!item.assortmentDetail.Negoptim__Movement_Date__c}" />
                                                            </apex:column>
                                                        </apex:dataTable>
                                                    </div>
                                                    <footer class="slds-modal__footer">
                                                        <apex:commandButton value="{!$Label.negoptim__Cancel}"
                                                                            reRender="popupSwitchProduct, pageMessages" status="globalloadingFullscreen"
                                                                            onclick="$('#popupSwitch').hide();" oncomplete="afterRerender();"
                                                                            styleClass="slds-button slds-button_neutral">
                                                            <apex:param name="popupSwitchProduct" assignTo="{!popupSwitchProduct}"
                                                                        value="false" />
                                                        </apex:commandButton>
                                                        <apex:commandButton value="{!$Label.negoptim__Switch}" action="{!switchProduct}"
                                                                            onclick="$('#popupSwitch').hide();"
                                                                            reRender="theForm,clientStatus_serialized,pageMessages" status="globalloadingFullscreen"
                                                                            oncomplete="(true);" rendered="{!!readOnly}"
                                                                            styleClass="slds-button slds-button_brand">
                                                            <apex:param name="popupSwitchProduct" assignTo="{!popupSwitchProduct}"
                                                                        value="false" />
                                                        </apex:commandButton>
                                                    </footer>
                                                </div>
                                            </div>
                                            <div class="slds-backdrop slds-backdrop_open"></div>
                                        </div>
                                    </apex:outputPanel>
                                </apex:outputPanel>
                                <!-- popup stop product -->
                                <!--apex:outputPanel layout="block" id="popupStopProduct">
                                    <apex:outputPanel rendered="{!popupStopProduct}">
                                        <div id="popupStop">
                                            <div role="dialog" tabindex="-1" aria-labelledby="modal-heading-03" aria-modal="true"
                                                 aria-describedby="modal-content-id-3" class="slds-modal slds-fade-in-open">
                                                <div class="slds-modal__container">
                                                    <header class="slds-modal__header">
                                                        <h2 id="modal-heading-03" class="slds-modal__title slds-hyphenate">
                                                            {!IF(singleProductAction, 'Stop', 'Stop All')}
                                                        </h2>
                                                    </header>
                                                    <div class="slds-modal__content" id="modal-content-id-3">
                                                        <apex:dataTable value="{!stopProductsList}" var="item"
                                                                        styleClass="slds-table slds-table_cell-buffer slds-no-row-hover slds-table_bordered">
                                                            <apex:column width="1%" rendered="{!AND(!singleProductAction, !readOnly)}">
                                                                <apex:facet name="header">
                                                                    <apex:inputCheckbox onchange="toggleSelectAll();" id="selectAll"
                                                                                        selected="true" />
                                                                </apex:facet>
                                                                <apex:inputCheckbox value="{!item.isSelected}" id="switchCheckbox" />
                                                            </apex:column>
                                                            <apex:column value="{!item.history.Product__c}"
                                                                         headerValue="{!$ObjectType.Product_Assortment_Introduction_History__c.fields.Product__c.label}" />
                                                            <apex:column headerValue="{!$ObjectType.Product_Assortment_Introduction_History__c.fields.Load_Rules__c.label}">
                                                                <apex:inputField value="{!item.history.Load_Rules__c}" />
                                                            </apex:column>
                                                        </apex:dataTable>

                                                    </div>
                                                    <footer class="slds-modal__footer">
                                                        <apex:commandButton value="{!$Label.negoptim__Cancel}" onclick="$('#popupStop').hide();"
                                                                            reRender="popupStopProduct, pageMessages" status="stopStatus"
                                                                            oncomplete="afterRerender();" styleClass="slds-button slds-button_neutral">
                                                            <apex:param name="popupStopProduct" assignTo="{!popupStopProduct}"
                                                                        value="false" />
                                                        </apex:commandButton>
                                                        <apex:commandButton value="Stop" action="{!stopProducts}"
                                                                            onclick="$('#popupStop').hide();"
                                                                            reRender="theForm,clientStatus_serialized,pageMessages" status="stopStatus"
                                                                            oncomplete="afterRerender(true);" rendered="{!!readOnly}"
                                                                            styleClass="slds-button slds-button_brand">
                                                            <apex:param name="popupStopProduct" assignTo="{!popupStopProduct}"
                                                                        value="false" />
                                                        </apex:commandButton>
                                                    </footer>
                                                </div>
                                            </div>
                                            <div class="slds-backdrop slds-backdrop_open"></div>
                                        </div>
                                    </apex:outputPanel>
                                </apex:outputPanel-->
                                <!-- popup SelectHigherLevelPackaging for products -->
                                <apex:outputPanel layout="block" id="popupSelectHigherLevelPackaging">
                                    <apex:outputPanel rendered="{!popupSelectHigherLevelPackaging}">
                                        <div role="dialog" tabindex="-1" aria-labelledby="modal-heading-02" aria-modal="true"
                                             aria-describedby="modal-content-id-2"
                                             class="slds-modal slds-fade-in-open slds-modal_medium">
                                            <div class="slds-modal__container">
                                                <header class="slds-modal__header">
                                                    <h2 id="modal-heading-02" class="slds-modal__title slds-hyphenate">{!higherLevelPackagingMasterDetail.Product__r.Name}</h2>
                                                </header>
                                                <div class="slds-modal__content" id="modal-content-id-2">
                                                    <apex:outputPanel layout="block" rendered="{!higherLevelPackagingWrapperList.size == 0}">
                                                        <div class="slds-media__body">
                                                            <h2 class="slds-card__header-title slds-align-content-center">
                                                                <span>{!$Label.negoptim__LBL_No_Item_To_Display}</span>
                                                            </h2>
                                                        </div>
                                                    </apex:outputPanel>
                                                    <apex:dataTable value="{!higherLevelPackagingWrapperList}" var="item" rendered="{!higherLevelPackagingWrapperList.size != 0}"
                                                                    styleClass="slds-table slds-table_cell-buffer slds-table_bordered">
                                                        <apex:column headerValue="{!$ObjectType.Product2.fields.ProductCode.Label}" styleClass="higherLevelPackaging" >
                                                            <apex:outputField value="{!item.higherLevelPackaging.ProductCode}" />
                                                        </apex:column>
                                                        <apex:column headerValue="{!$ObjectType.Product2.fields.Name.Label}" styleClass="higherLevelPackaging" >
                                                            <a target="_blank" href="/{!item.higherLevelPackaging.Id}">{!item.higherLevelPackaging.Name}</a>
                                                        </apex:column>
                                                        <apex:column headerValue="{!$ObjectType.Product2.fields.Negoptim__Product_EAN__c.Label}" styleClass="higherLevelPackaging" >
                                                            <apex:outputField value="{!item.higherLevelPackaging.Negoptim__Product_EAN__c}" />
                                                        </apex:column>
                                                        <!--<apex:column headerValue="{!$ObjectType.Product2.fields.Element_nb__c.Label}" rendered="{!!isOrgCPG}" styleClass="higherLevelPackaging" >
                                                            <apex:outputField value="{!item.higherLevelPackaging.Element_nb__c}" />
                                                        </apex:column>-->
                                                        <apex:column headerValue="{!$ObjectType.Product2.fields.Negoptim__IsMaster_Higher_Level_Packaging__c.Label}" styleClass="higherLevelPackaging" >
                                                            <apex:outputField value="{!item.higherLevelPackaging.Negoptim__IsMaster_Higher_Level_Packaging__c}" />
                                                        </apex:column>
                                                        <apex:column headerValue="{!$Label.negoptim__LBL_Select}">
                                                            <apex:inputCheckbox styleClass="{!item.higherLevelPackaging.Id}_isSelected" value="{!item.isSelected}"
                                                                                onchange="handleProductSelectionChange(this, '{!item.higherLevelPackaging.Id}')" />
                                                        </apex:column>
                                                        <apex:column headerValue="{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__IsMaster_Higher_Level_Packaging__c.Label}" >
                                                            <apex:inputCheckbox styleClass="{!item.higherLevelPackaging.Id}_isMasterHigherLevelPackagingDetail isMasterHigherLevelPackagingDetail"
                                                                                value="{!item.isMasterHigherLevelPackagingDetail}"
                                                                                onchange="handleIsMasterHigherLevelPackagingDetailChange(this, '{!item.higherLevelPackaging.Id}')" />
                                                        </apex:column>
                                                    </apex:dataTable>
                                                </div>
                                                <footer class="slds-modal__footer">
                                                    <apex:commandButton value="{!$Label.negoptim__Cancel}" action="{!cancelPopup}"
                                                                        reRender="popupSelectHigherLevelPackaging, pageMessages" status="globalloadingFullscreen"
                                                                        oncomplete="setChangesOnPageTrue();afterRerender();"
                                                                        styleClass="slds-button slds-button_neutral"/> <!-- $('#popupSwitch').hide();-->
                                                    <apex:commandButton value="{!$Label.negoptim__Save}" action="{!saveHigherLevelPackagingSelection}"
                                                                        reRender="theForm,clientStatus_serialized,pageMessages" status="globalloadingFullscreen"
                                                                        oncomplete="setChangesOnPageTrue();afterRerender();" rendered="{!AND(!readOnly, higherLevelPackagingWrapperList.size != 0)}"
                                                                        styleClass="slds-button slds-button_brand"/>
                                                </footer>
                                            </div>
                                            <script>
                                            function disableIsMasterCheckboxes() {
                                                let isMasterCheckboxes = document.getElementsByClassName('isMasterHigherLevelPackagingDetail');
                                                if (isMasterCheckboxes) {
                                                    for (let i = 0; i < isMasterCheckboxes.length; i++) {
                                                        let isMasterCheckbox = isMasterCheckboxes[i];
                                                        let productId = isMasterCheckbox.className
                                                        .replace('isMasterHigherLevelPackagingDetail', '')
                                                        .replace('isMasterHigherLevelPackagingDetail', '')
                                                        .replace('_', '').trim();
                                                        let isSelectedCheckboxes = document.getElementsByClassName(productId + '_isSelected');
                                                        if (isSelectedCheckboxes && isSelectedCheckboxes.length > 0) {
                                                            let isSelectedCheckbox = isSelectedCheckboxes[0];
                                                            if (!isSelectedCheckbox.checked) {
                                                                isMasterCheckbox.setAttribute('disabled', 'true');
                                                            }
                                                        }
                                                    }
                                                }
                                            }

                                            function handleIsMasterHigherLevelPackagingDetailChange(e, productId) {
                                                // check if product is selected
                                                let isSelectedCheckboxes = document.getElementsByClassName(productId + '_isSelected');
                                                if (isSelectedCheckboxes && isSelectedCheckboxes.length > 0) {
                                                    let isSelectedCheckbox = isSelectedCheckboxes[0];
                                                    if (!isSelectedCheckbox.checked) {
                                                        e.checked = false;
                                                        alert('You can\'t check a product that isn\'t selected');
                                                        return false;
                                                    }
                                                }
                                                let allCheckboxes = document.getElementsByClassName('isMasterHigherLevelPackagingDetail');
                                                if (allCheckboxes) {
                                                    for (let i = 0; i < allCheckboxes.length; i++) {
                                                        if(allCheckboxes[i] != e) {
                                                            allCheckboxes[i].checked = false;
                                                        }
                                                    }
                                                }
                                            }

                                            function handleProductSelectionChange(e, productId) {
                                                let isMasterCheckboxes = document.getElementsByClassName(productId + '_isMasterHigherLevelPackagingDetail');
                                                if (isMasterCheckboxes && isMasterCheckboxes.length > 0) {
                                                    let isMasterCheckbox = isMasterCheckboxes[0];
                                                    if (e.checked) {
                                                        isMasterCheckbox.removeAttribute('disabled');
                                                    } else {
                                                        isMasterCheckbox.setAttribute('disabled', 'true');
                                                        isMasterCheckbox.checked = false;
                                                    }
                                                }
                                            }
                                            </script>
                                        </div>
                                        <div class="slds-backdrop slds-backdrop_open"></div>
                                    </apex:outputPanel>
                                </apex:outputPanel>
                            </apex:pageBlock>
                        </div>
                        <!-- filter section -->
                        <div id="filter-panel" class="slds-col slds-grid slds-no-flex slds-hide">
                            <apex:outputpanel layout="block" id="filterPanel"
                                              styleClass="slds-panel slds-size_medium slds-panel_docked slds-panel_docked-right slds-grid slds-grid_vertical">
                                <div class="slds-panel__header">
                                    <h2 class="slds-panel__header-title slds-text-heading_small slds-truncate"
                                        title="{!$Label.LBL_Filter}">{!$Label.LBL_Filter}</h2>
                                    <button class="slds-button slds-button_icon slds-button_icon-small slds-panel__close"
                                            title="Collapse Panel Header" onclick="toggleFilterPanel();return false;">
                                        <svg class="slds-button__icon" aria-hidden="true">
                                            <use xmlns="http://www.w3.org/2000/svg"
                                                 xmlns:xlink="http://www.w3.org/1999/xlink"
                                                 xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#close')}" />
                                        </svg>
                                        <span class="slds-assistive-text">Collapse Panel Header</span>
                                    </button>
                                </div>
                                <div class="slds-col slds-scrollable filterPanelBody" id="filterPanelBody">
                                    <div class="slds-grid slds-wrap slds-p-around_small">
                                        <!-- --------------------------------------------------  Filter -->
                                        <div class="slds-list_vertical slds-list_vertical-space slds-size_1-of-1">
                                            <!-- Search Box -->
                                            <div class="slds-item">
                                                <div class="slds-form-element">
                                                    <label class="slds-form-element__label">
                                                        <apex:outputText value="{!$Label.negoptim__LBL_Search}" /></label>
                                                    <div class="slds-form-element__control">
                                                        <apex:inputText onkeypress="enterPress(event)"
                                                                        value="{!productSearch}" label=" " styleClass="slds-input"
                                                                        html-placeholder="{!$ObjectType.Negoptim__Orga_HE__c.Label},{!$ObjectType.Product2.Label},{!$ObjectType.Product2.fields.ProductCode.Label},{!$ObjectType.Product2.fields.Negoptim__Product_EAN__c.Label},{!$ObjectType.Product2.fields.Negoptim__VIP__c.Label}" />
                                                    </div>
                                                </div>
                                            </div>
                                            <!-- Category Search Box -->
                                            <div class="slds-item">
                                                <div class="slds-form-element">
                                                    <label class="slds-form-element__label">
                                                        <apex:outputText value="{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__Category__c.Label}"/>
                                                    </label>
                                                    <div class="slds-form-element__control">
                                                        <apex:inputField onkeypress="enterPress(event)" id="filterCategory"
                                                                         value="{!product.Negoptim__Category__c}" />
                                                    </div>
                                                </div>
                                            </div>
                                            <!-- Mvt Date Search Box -->
                                            <div class="slds-item">
                                                <div class="slds-form-element">
                                                    <label class="slds-form-element__label">
                                                        <apex:outputText value="{!$ObjectType.Negoptim__Assortment_Detail__c.fields.Negoptim__Movement_Date__c.Label}" />
                                                    </label>
                                                    <div class="slds-form-element__control slds-grid">
                                                        <apex:selectList styleClass="slds-input slds-size--2-of-5" multiselect="false" value="{!selectedOperator}" size="1">
                                                            <apex:selectOptions value="{!operatorsOptions}" />
                                                        </apex:selectList>
                                                        <div class="slds-size--3-of-5 slds-m-left--small">
                                                            <apex:inputField value="{!filterDetail.Negoptim__Movement_Date__c}"/>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <!-- filter checkboxes -->
                                            <div class="slds-item slds-has-divider_top-space">
                                                <div class="slds-form__row">
                                                    <div class="slds-form__item" role="listitem">
                                                        <div class="slds-form-element__control">
                                                            <apex:outputPanel layout="block" styleClass="slds-checkbox" rendered="{!isOrgCPG}">
                                                                <apex:inputCheckbox label="{!$Label.negoptim__LBL_Hide_Blank_Status}"
                                                                                    id="hideBlankStatus" value="{!hideBlankStatus}"
                                                                                    onchange="search();" />
                                                                <label class="slds-checkbox__label"
                                                                       for="{!$Component.theForm.hideBlankStatus}">
                                                                    <span class="slds-checkbox_faux"></span>
                                                                    <span
                                                                          class="slds-form-element__label">{!$Label.negoptim__LBL_Hide_Blank_Status}</span>
                                                                </label>
                                                            </apex:outputPanel>
                                                            <apex:outputPanel layout="block" styleClass="slds-checkbox" rendered="{!isOrgCPG}">
                                                                <apex:inputCheckbox label="{!$Label.negoptim__LBL_Show_Intro_Products}"
                                                                                    id="showIntroProducts" value="{!showIntroProducts}"
                                                                                    onchange="search();" disabled="{!!hideBlankStatus}" />
                                                                <label class="slds-checkbox__label"
                                                                       for="{!$Component.theForm.showIntroProducts}">
                                                                    <span class="slds-checkbox_faux"></span>
                                                                    <span
                                                                          class="slds-form-element__label">{!$Label.negoptim__LBL_Show_Intro_Products}</span>
                                                                </label>
                                                            </apex:outputPanel>
                                                            <apex:outputPanel layout="block" styleClass="slds-checkbox" rendered="{!isOrgCPG}">
                                                                <apex:inputCheckbox label="{!$Label.negoptim__LBL_Only_Show_Intro_Products}"
                                                                                    id="onlyShowIntroProducts" value="{!onlyShowIntroProducts}"
                                                                                    onchange="search();" />
                                                                <label class="slds-checkbox__label"
                                                                       for="{!$Component.theForm.onlyShowIntroProducts}">
                                                                    <span class="slds-checkbox_faux"></span>
                                                                    <span
                                                                          class="slds-form-element__label">{!$Label.negoptim__LBL_Only_Show_Intro_Products}</span>
                                                                </label>
                                                            </apex:outputPanel>
                                                            <apex:outputPanel layout="block" styleClass="slds-checkbox">
                                                                <apex:inputCheckbox label="{!$Label.negoptim__LBL_Show_History}"
                                                                                    value="{!isShowHistory}" id="showHistory"
                                                                                    onchange="search();" />
                                                                <label class="slds-checkbox__label"
                                                                       for="{!$Component.theForm.showHistory}">
                                                                    <span class="slds-checkbox_faux"></span>
                                                                    <span
                                                                          class="slds-form-element__label">{!$Label.negoptim__LBL_Show_History}</span>
                                                                </label>
                                                            </apex:outputPanel>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <!-- calculation checkboxes -->
                                            <apex:outputPanel layout="block" styleClass="slds-item slds-has-divider_top-space" rendered="{!isOrgCPG}">
                                                <div class="slds-form__row">
                                                    <div class="slds-form__item" role="listitem">
                                                        <div class="slds-form-element__control">
                                                            <div class="slds-checkbox">
                                                                <apex:inputCheckbox label="{!$Label.negoptim__LBL_Show_SubTotal}"
                                                                                    id="showSubTotal" styleClass="showSubTotalClass"
                                                                                    onchange="showHideSubTotals()" />
                                                                <label class="slds-checkbox__label"
                                                                       for="{!$Component.theForm.showSubTotal}">
                                                                    <span class="slds-checkbox_faux"></span>
                                                                    <span
                                                                          class="slds-form-element__label">{!$Label.negoptim__LBL_Show_SubTotal}</span>
                                                                </label>
                                                            </div>
                                                            <div class="slds-checkbox">
                                                                <apex:inputCheckbox label="{!$Label.negoptim__LBL_Include_Nb_Of_Store}"
                                                                                    value="{!includeStores}" id="includeStores"
                                                                                    onchange="calculateClusterTotals();" />
                                                                <label class="slds-checkbox__label"
                                                                       for="{!$Component.theForm.includeStores}">
                                                                    <span class="slds-checkbox_faux"></span>
                                                                    <span
                                                                          class="slds-form-element__label">{!$Label.negoptim__LBL_Include_Nb_Of_Store}</span>
                                                                </label>
                                                            </div>
                                                            <div class="slds-checkbox">
                                                                <apex:inputCheckbox label="{!$Label.negoptim__LBL_Include_All_Status}"
                                                                                    id="includeAllStatus" value="{!includeAllStatus}"
                                                                                    onchange="promptToSave();" />
                                                                <label class="slds-checkbox__label"
                                                                       for="{!$Component.theForm.includeAllStatus}">
                                                                    <span class="slds-checkbox_faux"></span>
                                                                    <span
                                                                          class="slds-form-element__label">{!$Label.negoptim__LBL_Include_All_Status}</span>
                                                                </label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </apex:outputPanel>
                                            <!-- Number Of Fixed Columns picklist -->
                                            <div class="slds-item">
                                                <apex:outputPanel layout="block" rendered="{!hasDetails}">
                                                    <div class="slds-form-element">
                                                        <label class="slds-form-element__label">
                                                            <apex:outputText value="{!$Label.negoptim__LBL_Number_Of_Fixed_Columns}" />
                                                        </label>
                                                        <div class="slds-form-element__control">
                                                            <select id="numberOfFixedColumns" class="slds-input">
                                                            </select>
                                                        </div>
                                                    </div>
                                                </apex:outputPanel>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="slds-card__footer slds-grid slds-m-top_none">
                                    <apex:commandButton Id="resetBtn" value="{!$Label.negoptim__LBL_Reset}" action="{!resetFilters}" onclick="resetFiltersJs();"
                                                        rerender="assortmentDetailsGrid,filterPanel,clientStatus_serialized,pageMessages,actionButtons"
                                                        status="globalloadingFullscreen" styleClass="slds-button slds-button_neutral slds-col"
                                                        oncomplete="setChangesOnPageTrue();afterRerender();" />
                                    <apex:commandButton value="{!$Label.negoptim__LBL_Search}" action="{!search}"
                                                        rerender="assortmentDetailsGrid,filterPanel,clientStatus_serialized,pageMessages,actionButtons"
                                                        status="globalloadingFullscreen" styleClass="slds-button slds-button_brand slds-col"
                                                        oncomplete="setChangesOnPageTrue();afterRerender();" />
                                </div>
                            </apex:outputpanel>
                        </div>
                    </div>
                    <apex:outputPanel layout="block" id="jsTree">
                        <script>
                        var totalFields = [];
                        try {
                            totalFields = JSON.parse('{!JSENCODE(totalFields_serialized)}');
                        }
                        catch(error) {
                            console.log(error);
                        }
                        var jsonCategoryTree = {!jsonCategoryTree};
                        var maxClusterCount = '{!maxClusterCount}';
                        </script>
                    </apex:outputPanel>
                    <script>
                    var firstTreeLoad = true;
                    </script>
                </apex:form>
            </div>
            <script>
            function setChangesOnPageTrue() {
                window.hasChanges = true;
            }
            document.addEventListener('onchange', logKey);
            document.addEventListener('mouseup', logKey);
            function resetChanges() {
                window.hasChanges = false;
            }
            function logKey(e) {
                if (e.target 
                    && !e.target.classList.contains('slds-button')
                    && (e.type == 'mouseup' || e.type == 'onchange')
                    && (e.target.tagName == 'INPUT' || e.target.tagName == 'TEXTAREA' || e.target.tagName == 'SELECT' || e.target.tagName == 'OPTION'))
                {
                    window.hasChanges = true;
                }else{
                    window.hasChanges = false;
                }
            }
            function internalHandler(e) {
                if (window.hasChanges) {
                    e.preventDefault(); // required in some browsers
                    e.returnValue = ""; // required in some browsers
                    return "   "; // only works in old browsers
                }
                return false;
            }
            if (window.addEventListener) {
                window.addEventListener('beforeunload', internalHandler, true);
            } else if (window.attachEvent) {
                window.attachEvent('onbeforeunload', internalHandler);
            }

            var package_prefix = '{!JSENCODE(prefix)}';
            var manageAssortByPersonalizedCategory = {!manageAssortByPersonalizedCategory};
            var clientStatus_initialMap = {}; // Map of initial records positions and statuses in clusters
            var clientStatus_map = {};
            var gridFields = [];
            var NbStoreMap = {};
            try {
                gridFields = JSON.parse('{!JSENCODE(gridFields_serialized)}');
            }
            catch(error) {
                console.log(error);
            }
            var fieldsToCountList = [];
            try {
                fieldsToCountList = JSON.parse('{!JSENCODE(fieldsToCountList_serialized)}');
            }
            catch(error) {
                console.log(error);
            }
            var fieldsToSum_serialized = '{!JSENCODE(fieldsToSumList_serialized)}';
            var fieldsToSumList = fieldsToSum_serialized ? JSON.parse(fieldsToSum_serialized) : [];
            var formulaFields_serialized = '{!JSENCODE(formulasFieldsList_serialized)}';
            var formulaFieldsList = formulaFields_serialized ? JSON.parse(formulaFields_serialized) : [];
            var categoryBUClustersMap = {};
            var stratsMap = {};
            var cpltMap = {};
            var picklistValuesMap = {};
            try {
                picklistValuesMap = JSON.parse('{!JSENCODE(picklistValuesMap_serialized)}');
            }
            catch(error) {
                console.log(error);
            }
            var clientStatusPicklistValuesMap = new Map();
            var updatedAssortmentDetailsMap = new Map(); // Map of assortmentDetails from remote callback
            var categorySubTotalMap = new Map(); // Map of sub totals
            var totalColumnsMap = new Map();
            var assortmentYear = {!IF(ISNULL(assortmentBU.Year__c), 'null', assortmentBU.Year__c)};
            var multipleComplementary = {!multipleComplementary};
            var clientStatusToExcludeFromTotals = ['Probably deleted', 'Opportunity', ''];
            negoptimApp = new App('{!locale}', '{!localeDecimalSeparator}');
            var decimalSeparator = '{!localeDecimalSeparator}';
            var numberOfFixedColumnsVar = 3;
            var focusedDateInput;
            var assortmentDetailChangesList = [];

            function getIncludeStores() {
                return $('[id*=includeStores]')[0] != undefined ? $('[id*=includeStores]')[0].checked : false;
            }

            function calculateClusterTotals(categoryId) {
                setTimeout(() => {
                    if (document.getElementsByName('categoryBUClustersMap_serialized').length > 0) {
                    var categoryBUClustersMap_serialized = document.getElementsByName('categoryBUClustersMap_serialized')[0].value;
                    categoryBUClustersMap = JSON.parse(categoryBUClustersMap_serialized);
                }
                var categoryIds = categoryId ? [categoryId] : Object.keys(categoryBUClustersMap);
                //var categoryIds = Object.keys(categoryBUClustersMap);
                let includeAllStores = getIncludeStores();
                for (var index = 0; index < categoryIds.length; index++) {
                    var categoryId = categoryIds[index];
                    for (var fieldIndex = 0; fieldIndex < fieldsToCountList.length; fieldIndex++) {
                        var fieldName = fieldsToCountList[fieldIndex];
                        var count = $('.' + categoryId + fieldName).text();
                        var nbStore = (includeAllStores && NbStoreMap ? NbStoreMap.hasOwnProperty(categoryId + '_' + fieldName) ? NbStoreMap[categoryId + '_' + fieldName] : getNbStore(categoryId, fieldName) : 1);
                        // var nbStore = getNbStore(categoryId, fieldName);
                        $('.visible_' + categoryId + fieldName).text(stringToDecimal(count) * nbStore);
                        if (!firstTreeLoad)
                            calculateParentTotalCount(categoryId, categoryId + fieldName, 0);
                    }
                }
                // $(document).find('body').css('cursor', 'default');
            }, 10);
            }

            function getNbStore(categoryId, fieldName) {
                var nbStore = 1;
                if ((fieldName.startsWith(package_prefix + 'Client_Clust') || fieldName.startsWith(package_prefix + 'Ref_Client_Clust')) && fieldName.endsWith('__c')) {
                    var temp = fieldName.replace('__c', '');
                    var stratIndex = parseInt(temp[temp.length - 1]) - 1;
                    // var count = $('.' + categoryId + fieldName).text();
                    // if (count != null && count != '' && typeof count !== 'undefined') {
                    if (categoryBUClustersMap.hasOwnProperty(categoryId) && categoryBUClustersMap[categoryId].hasOwnProperty(stratIndex)) {
                        let gap = assortmentYear - new Date().getFullYear();
                        let nbSos;
                        if (gap >= 1) {
                            nbSos = categoryBUClustersMap[categoryId][stratIndex].orgaBU[package_prefix + 'SiteOfSales_Number_N1__c'];
                        }
                        if (gap == 0) {
                            nbSos = categoryBUClustersMap[categoryId][stratIndex].orgaBU[package_prefix + 'SiteOfSales_Number__c'];
                        }
                        if (gap == -1) {
                            nbSos = categoryBUClustersMap[categoryId][stratIndex].orgaBU[package_prefix + 'SiteOfSales_Number_P1__c'];
                        }
                        if (gap <= -2) {
                            nbSos = categoryBUClustersMap[categoryId][stratIndex].orgaBU[package_prefix + 'SiteOfSales_Number_P2__c'];
                        }
                        nbStore = nbSos ? nbSos : 0;
                    }
                    // }
                }
                NbStoreMap[categoryId + '_' + fieldName] = nbStore;
                return nbStore;
            }

            $(document).ready(async function () {
                console.log('Grid Settings Layout :::: ' + `{!assortmentMatrixGridLayout}`);
                let showSubtotal = {!showSubtotal};
                if(document.getElementsByClassName("showSubTotalClass")[0] != undefined){
                    document.getElementsByClassName("showSubTotalClass")[0].checked = showSubtotal;
                }
                showHideSubTotals();
                fixLookupHoverDetail();
                setMessageDissmisable();
                renderFilter();
                // the page css makes the filter panel hidden by default, therefor, we should call toggleFilterPanel()
                // if the global settings indicated that the filter panel should be open by default
                if ({!openPagesFilterSectionByDefault}) { // no need for JSENCODE because openPagesFilterSectionByDefault is a boolean
                    toggleFilterPanel();
                }
                setTreeMargin();
                setPBClass();
                renderTree();
                /*let messageSpan = document.getElementById('thePage:Messages');
                if (messageSpan !== undefined && messageSpan !== null && messageSpan.innerHTML != '') {
                    document.getElementById('welcomeSpinner').classList.add('slds-hide');
                    return;
                }*/
                //move datepicker to fullscreen element
                setMoveDatePicker();
                // fill clientStatusPicklistValuesMap from picklistValuesMap['Client_Status__c'] by mapping value => key (for translation)
                for (var key in picklistValuesMap['Client_Status__c']) {
                    clientStatusPicklistValuesMap.set(picklistValuesMap['Client_Status__c'][key], key);
                }
                // add html to display switch, reno, stop icon on the page
                rerenderLegendIcons();
                // escape enter key press
                $(".inputNoEnter").on('keypress', function (e) {
                    code = e.keyCode ? e.keyCode : e.which;
                    if (code.toString() == 13) {
                        e.preventDefault();
                    }
                });
                // remove the picklist value 'Previously Validated' from Status__c picklist
                removePreviouslyValidatedOption();
                // render the tree and expand and collapse tree to render all rows (to show after calculation arrows)
                renderTotalsTree();
                // to remove focus from the first datepicker field (if any)
                setFocusOnLoad();
                collapseFilterSection();
                setBannerLinks();
                // init client status map for handling clusters
                initClientStatusMap();
                // disable all client_clust for row with client_status__c = 'Delete'
                disableClustForDelete();
                // hide totals on load
                let blockOfTotals = document.getElementById('{!$Component.theForm.blockOfTotals}');
                if(blockOfTotals) {
                    blockOfTotals.classList.add('slds-hide');
                }
                window.onresize = function (event) {
                    $('#datePicker').hide();
                    setTimeout(function () {
                        updateFullscreenButton();
                        setTableDimensions();
                        setStickyColumns();
                    }, 50);
                }
                setTableDimensions();
                setSelectList();
                setStickyColumns();
                calculateClusterTotals();
                formatGridNumbers();
                if ($("[id$=numberOfFixedColumns]").length > 0) {
                    $("[id$=numberOfFixedColumns]").change(function () {
                        setStickyColumns();
                    });
                }
                DatePicker.prototype.position = function () {
                    for (var a = 0, b = 0, c = this.myElement; null != c && c != this.calendarDiv.offsetParent;)
                        a += c.offsetLeft - c.scrollLeft,
                            b += c.offsetTop - c.scrollTop,
                            c = c.offsetParent;
                    !c && this.calendarDiv.offsetParent && (a -= this.calendarDiv.offsetParent.offsetLeft,
                                                            b -= this.calendarDiv.offsetParent.offsetTop);
                    b = getObjY(this.myElement) + this.calendarDiv.offsetHeight > Sfdc.Window.getScrollY() + Sfdc.Window.getWindowHeight() ? b - (this.calendarDiv.offsetHeight + 1) : b + (this.myElement.offsetHeight + 1);
                    c = "left";
                    LC.isRtlPage() && (c = "right",
                                       a = this.calendarDiv.offsetParent.offsetWidth - a - this.myElement.offsetWidth);
                    var gridContainerDiv = isParent(this.myElement, 'filterPanelBody') ? $('.filterPanelBody') : $('.grid-container');
                    a = a - gridContainerDiv.scrollLeft();
                    b = b - gridContainerDiv.scrollTop();
                    this.shim.setStyle(c, a + "px");
                    this.shim.setStyle("top", b + "px");
                };
                DatePicker.prototype.display = function () {
                    this.position();
                    this.shim.setStyle("display", "block");
                    this.skipReopen = !1
                };
                DatePicker.prototype.show = function(a, b, c, d) {
                    if (this.skipReopen)
                        this.skipReopen = !1;
                    else {
                        this.callOnChange = a;
                        this.hasTime = c;
                        this.myField = DatePicker.getDateField(b);
                        this.myElement = d ? d : this.myField;
                        var e = this;
                        "hidden" != this.myField.type && (this.addedFields[b] !== this.myField && (this.addedFields[b] = null),
                                                          this.addedFields[b] || (this.addedFields[b] = this.myField,
                                                                                  addEvent(this.myField, "keydown", function(a) {
                                                                                      e.handleKeyPress(a)
                                                                                  }, !1),
                                                                                  !c && LC.isEnglishLanguage() && (a = LC.isEnglishUS() ? function() {
                                                                                      DateUtil.checkYear(e.myField, e.callOnChange)
                                                                                  }
                                                                                                                   : function() {
                                                                                                                       DateUtil.evaluateShortcut(e.myField, e.callOnChange)
                                                                                                                   }
                                                                                                                   ,
                                                                                                                   addEvent(this.myField, "blur", a, !1))));
                        c = c ? DateUtil.getDateFromFormat(this.myField.value, UserContext.dateTimeFormat) : DateUtil.getDateFromFormat(this.myField.value, UserContext.dateFormat);
                        0 != c ? (this.currentDate = new Date(c),
                                  this.setMyDate(this.currentDate)) : this.setMyDate(this.today);
                        this.generateMonth();
                    }
                };
                setHideDatePickerListener();
                openLinksInNewTab();
                handleClientStatusColors();
                document.getElementById('welcomeSpinner').classList.add('slds-hide');
                setChangesListener();
            });

            function resetFiltersJs() {
                document.getElementById('{!$Component.theForm.filterCategory}').value = '';
            }

            function setMessageDissmisable(){
                $(document).on("click", ".message[role='alert']", function() {
                    // fade out takes 400 ms by default
                    $(this).fadeOut();
                    setTimeout(function(){
                        setTableDimensions();
                        setStickyColumns();
                    },450);
                });
            }

            function afterRerender(isAfterSave) {
                // clear LookupHoverDetail
                fixLookupHoverDetail();
                setMessageDissmisable();
                renderFilter();
                setTreeMargin();
                setPBClass();
                let counter = 1;
                isAfterSave = (typeof isAfterSave === 'undefined') ? false : isAfterSave;
                //move datepicker to fullscreen element
                setMoveDatePicker();
                removePreviouslyValidatedOption();
                rerenderLegendIcons();
                if (isAfterSave) {
                    initClientStatusMap();
                }
                renderTree();
                // expand tree for rerender all tree cells
                /*$("#treegrid").fancytree("getTree").expandAll();
                $("#treegrid").fancytree("getTree").expandAll(false);
                $("#treegrid").fancytree("getTree").rootNode.children[0].isExpanded() || !$("#treegrid").fancytree("getTree").rootNode.children[0].toggleExpanded();
                $("#treegrid .fancytree-expander").on('click', function () {
                    setTimeout(function () {
                        setTableDimensions();
                        setStickyColumns();
                    }, 50);
                });*/
                handleClientStatusColors();
                collapseFilterSection();
                setBannerLinks();
                //toggleTotals();
                showHideSubTotals();
                if (!isAfterSave) {
                    refreshClientStatusMaps();
                    for (const detail of updatedAssortmentDetailsMap.values()) {
                        mapCalculationToView(detail, false);
                        for (var index = 0; index < fieldsToCountList.length; index++) {
                            var fieldName = fieldsToCountList[index];
                            var totalClassname = detail[package_prefix + (manageAssortByPersonalizedCategory ? 'Client_Category__c' : 'Category__c')] + fieldName;
                            var grandTotalClassname = detail.Id + fieldName + 'total';
                            if (categorySubTotalMap.has(totalClassname)) {
                                $('.' + totalClassname).text(categorySubTotalMap.get(totalClassname));
                            }
                            if (categorySubTotalMap.has(grandTotalClassname)) {
                                $('.' + grandTotalClassname).text(categorySubTotalMap.get(grandTotalClassname));
                            }
                        }
                        for (var index = 0; index < fieldsToSumList.length; index++) {
                            var fieldName = fieldsToSumList[index];
                            var totalClassname = detail[package_prefix + (manageAssortByPersonalizedCategory ? 'Client_Category__c' : 'Category__c')] + fieldName;
                            var grandTotalClassname = detail.Id + fieldName + 'total';
                            if (categorySubTotalMap.has(totalClassname)) {
                                $('.' + totalClassname).text(categorySubTotalMap.get(totalClassname));
                            }
                            if (categorySubTotalMap.has(grandTotalClassname)) {
                                $('.' + grandTotalClassname).text(categorySubTotalMap.get(grandTotalClassname));
                            }
                        }
                    }
                }
                disableClustForDelete();
                calculateClusterTotals();
                formatGridNumbers();
                setTableDimensions();
                setSelectList();
                setStickyColumns();
                if ($("[id$=numberOfFixedColumns]").length > 0) {
                    $("[id$=numberOfFixedColumns]").change(function () {
                        setStickyColumns();
                    });
                }
                openLinksInNewTab();
                setHideDatePickerListener();
                // escape enter key press
                $(".inputNoEnter").on('keypress', function (e) {
                    code = e.keyCode ? e.keyCode : e.which;
                    if (code.toString() == 13) {
                        e.preventDefault();
                    }
                });
                setChangesListener();
            }

            function setChangesListener() {
                // Check change on nego plan
                let inputs = document.querySelectorAll('[class*=\'ASD_\']');
                if (inputs) {
                    inputs.forEach(element => {
                        element.addEventListener('change', (event) => {
                        let classList = element.classList.toString().split(" ")[0];
                        let assortmentDetailId = classList.split("_")[1];
                        if (!this.assortmentDetailChangesList.includes(assortmentDetailId)) {
                             assortmentDetailChangesList.push(assortmentDetailId);
                        }
                    });
                 });
               }
            }

            function resetChanges() {
                assortmentDetailChangesList = [];
            }

            function setBannerLinks() {
                let bannersLinks = document.querySelectorAll('.banner-labels a');
                for (let index = 0; bannersLinks && index < bannersLinks.length; index++) {
                    bannersLinks[index].target = '_blank';
                }
            }

            function removePreviouslyValidatedOption() {
                var inputSelect = $('[class*=_Status__c]');
                for (var index = 0; index < inputSelect.length; index++) {
                    if (inputSelect[index].tagName == 'SELECT' && !$(inputSelect[index]).attr('class').includes('Client_Status__c')) {
                        for (var optionIndex = 0; optionIndex < inputSelect[index].options.length; optionIndex++) {
                            if (inputSelect[index].options[optionIndex].value == 'Previously Validated') {
                                inputSelect[index].remove(optionIndex);
                            }
                        }
                    }
                }
            }

            function openLinksInNewTab() {
                // make sure all links (lookups) in the table will open in a new tab
                var grid = $('.grid-container');
                if (grid.length > 0) {
                    var links = $('.grid-container').find('a');
                    for (var i = 0; i < links.length; i++) {
                        if (!$(links[i]).html().includes('<img'))
                            $(links[i]).attr('target', '_blank');
                    }
                }
            }

            function formatGridNumbers() {
                var formatNumberFields = $('[class*=formatNumber-]');
                for (var i = 0; i < formatNumberFields.length; i++) {
                    var fieldName;
                    var classList = $(formatNumberFields[i]).attr('class').split(' ');
                    for (var j = 0; j < classList.length; j++) {
                        if (classList[j].includes('formatNumber-')) {
                            fieldName = classList[j].split('-')[1];
                        }
                    }
                    var formatedValue = formatNumber(stringToDecimal($(formatNumberFields[i]).text()), gridFields[fieldName].scale);
                    // Conditional formatting for specific field
                    // TODO: define in Grid Settings
                    if (fieldName == package_prefix + 'Ref_Budget_WD_MarketBased_Pts__c' && ($(formatNumberFields[i]).text() == '' || parseFloat($(formatNumberFields[i]).text()) == 0)) {
                        $(formatNumberFields[i]).css({ 'font-weight': 'bold', 'color': 'red' });
                    }
                    $(formatNumberFields[i]).text(formatedValue);
                }
            }

            function setTableDimensions() {
                if (document.querySelector('#treeDiv .slds-scrollable') != null) {
                    // height
                    let clientHeight = document.documentElement.clientHeight;
                    var grid_h = document.querySelector('#treeDiv .slds-scrollable').offsetTop;
                    //treeDiv
                    var new_grid_h = clientHeight - grid_h;
                    if (isTreefullscreen()) {
                        document.querySelector('#treeDiv .slds-scrollable').style.maxHeight = new_grid_h + "px";
                        document.querySelector('#treeDiv .slds-scrollable').style.height = new_grid_h + "px";
                    } else {
                        document.querySelector('#treeDiv .slds-scrollable').style.height = "";
                        document.querySelector('#treeDiv .slds-scrollable').style.maxHeight = "200px";
                    }
                }
                if (document.getElementsByClassName('grid-container').length != 0) {
                    // height
                    let clientHeight = document.documentElement.clientHeight;
                    var grid_h = document.getElementsByClassName('grid-container')[0].offsetTop;
                    var footer_h = 1.4 * $('[id*="paginationBlock"]').outerHeight();
                    //AssortmentDetailSection
                    var new_grid_h = clientHeight - grid_h - footer_h;
                    document.getElementsByClassName('grid-container')[0].style.height = new_grid_h + "px";
                    document.getElementById('filterPanelBody').style.height = new_grid_h + "px";
                }
            }

            function setreeTableDimensions() {
                if (document.getElementsByClassName('grid-container').length == 0) return;
                // height
                let clientHeight = document.documentElement.clientHeight;
                var grid_h = document.getElementsByClassName('grid-container')[0].offsetTop;
                var footer_h = 1.4 * $('[id*="paginationBlock"]').outerHeight();
                //AssortmentDetailSection
                var new_grid_h = clientHeight - grid_h - footer_h;
                document.getElementsByClassName('grid-container')[0].style.height = new_grid_h + "px";
                document.getElementById('filterPanelBody').style.height = new_grid_h + "px";
            }

            // expand and collapse tree to render all rows (to show after calculation arrows)
            function renderTotalsTree() {
                if (document.getElementById('treegrid') == undefined) return;
                var i = 3;
                for (var index = 0; index < totalFields.length; index++)
                    totalColumnsMap.set(totalFields[index].fieldName, i++);

                // Attach the fancytree widget to an existing <div id="treegrid"> element
                // and pass the tree options as an argument to the fancytree() function:
                if(firstTreeLoad)
                    $("#treegrid").fancytree({
                        extensions: ["table"],
                        checkbox: false,
                        table: {
                            indentation: 20,      // indent 20px per node level
                            nodeColumnIdx: 2,     // render the node title into the 2nd column
                            checkboxColumnIdx: 1  // render the checkboxes into the 1st column
                        }, icon: function (event, data) {
                            return '';
                        },
                        source: JSON.parse(JSON.stringify(jsonCategoryTree)),
                        titlesTabbable: true,     // Add all node titles to TAB chain
                        lazyLoad: function (event, data) { setTreeSticky(); },
                        renderColumns: function (event, data) {
                            var node = data.node, $tdList = $(node.tr).find(">td");
                            i = 3;
                            for (var index = 0; index < totalFields.length; index++) {
                                var field = totalFields[index].fieldName;
                                $tdList.eq(i).addClass("slds-text-align_right");
                                if (totalFields[index].bgColor) {
                                    // $tdList.eq(i).css({ backgroundColor: totalFields[index].bgColor });
                                    $tdList.eq(i).css('background-color', totalFields[index].bgColor);
                                }
                                if (totalFields[index].isBorderColumn && totalFields[index].borderColor) {
                                    $tdList.eq(i).css('border-left-color', totalFields[index].borderColor);
                                    $tdList.eq(i).css('border-left-style', 'solid');
                                    $tdList.eq(i).css('border-left-width', '5px');
                                }
                                if (node.data.counts[field] != null)
                                    $tdList.eq(i++).text(formatNumber(node.data.counts[field], gridFields[field].scale));
                                else if (node.data.sums[field] != null)
                                    $tdList.eq(i++).text(formatNumber(node.data.sums[field], gridFields[field].scale));
                            }
                        }
                    });
                firstTreeLoad = false;
                $("#treegrid").fancytree("getTree").expandAll();
                $("#treegrid").fancytree("getTree").expandAll(false);
                $("#treegrid").fancytree("getTree").rootNode.children[0].isExpanded() || !$("#treegrid").fancytree("getTree").rootNode.children[0].toggleExpanded();
                $("#treegrid .fancytree-expander").on('click', function () {
                    setTimeout(function () {
                        setTableDimensions();
                        setStickyColumns();
                    }, 50);
                });
            }

            function refreshClientStatusMaps() {
                if (document.getElementsByName('clientStatus_serialized').length > 0) {
                    var clientStatus_serialized = document.getElementsByName('clientStatus_serialized')[0].value;
                    ////clientStatus_map = JSON.parse(clientStatus_serialized);
                    var clientStatus_temp1 = JSON.parse(clientStatus_serialized);
                    var clientStatus_temp2 = JSON.parse(clientStatus_serialized);
                    for (var key in clientStatus_temp1) {
                        if (clientStatus_initialMap[key] == null)
                            clientStatus_initialMap[key] = clientStatus_temp1[key];
                    }
                    for (var key in clientStatus_temp2)
                        if (clientStatus_map[key] == null)
                            clientStatus_map[key] = clientStatus_temp2[key];
                }
                initClustersMap();
            }

            function initClientStatusMap() {
                if (document.getElementsByName('clientStatus_serialized').length > 0) {
                    var clientStatus_serialized = document.getElementsByName('clientStatus_serialized')[0].value;
                    var clientStatus_temp1 = JSON.parse(clientStatus_serialized);
                    var clientStatus_temp2 = JSON.parse(clientStatus_serialized);

                    for (var key in clientStatus_initialMap)
                        if (clientStatus_temp1[key] == null)
                            clientStatus_temp1[key] = clientStatus_initialMap[key];
                    for (var key in clientStatus_map)
                        if (clientStatus_temp2[key] == null)
                            clientStatus_temp2[key] = clientStatus_map[key];

                    clientStatus_initialMap = clientStatus_temp1;
                    clientStatus_map = clientStatus_temp2;
                }
                initClustersMap();
            }

            function initClustersMap() {
                let strat_hidden = document.getElementsByName('stratsMap_serialized');
                let cplt_hidden = document.getElementsByName('cpltMap_serialized');
                let categoryBUClusters_hidden = document.getElementsByName('categoryBUClustersMap_serialized');
                if (strat_hidden.length > 0) {
                    stratsMap = JSON.parse(strat_hidden[0].value);
                }
                if (cplt_hidden.length > 0) {
                    cpltMap = JSON.parse(cplt_hidden[0].value);
                }
                if (categoryBUClusters_hidden.length > 0) {
                    categoryBUClustersMap = JSON.parse(categoryBUClusters_hidden[0].value);
                }
            }

            function rerenderLegendIcons() {
                // switch
                var source = '';
                source += '<svg xmlns="http://www.w3.org/2000/svg"';
                source += 'xmlns:xlink="http://www.w3.org/1999/xlink"';
                source += 'style="width: 12px;height: 12px;float: right;transform: rotate(90deg);" aria-hidden="true">';
                source += '<use xlink:href="{!URLFOR($Asset.SLDS, "/assets/icons/action-sprite/svg/symbols.svg#user_activation")}"></use>';
                source += '</svg>';
                $('.switchIcon').html(source);
                // stop
                var source = '';
                source += '<svg xmlns="http://www.w3.org/2000/svg"';
                source += 'xmlns:xlink="http://www.w3.org/1999/xlink"';
                source += 'style="width: 12px;height: 12px;float: right;transform: rotate(90deg);cursor:context-menu;" aria-hidden="true">';
                source += '<use xlink:href="{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#stop")}"></use>';
                source += '</svg>';
                $('.stopIcon').html(source);
                // renno
                var source = '';
                source += '<svg xmlns="http://www.w3.org/2000/svg"';
                source += 'xmlns:xlink="http://www.w3.org/1999/xlink"';
                source += 'style="width: 12px;height: 12px;float: right;transform: rotate(90deg);" aria-hidden="true">';
                source += '<use xlink:href="{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#refresh")}"></use>';
                source += '</svg>';
                $('.renoIcon').html(source);
                // fullScreen
                var source = '';
                source += '<svg xmlns="http://www.w3.org/2000/svg"';
                source += 'xmlns:xlink="http://www.w3.org/1999/xlink"';
                source += 'style="width: 14px;height: 14px;float: right; padding-left: 5px;" aria-hidden="true">';
                source += '<use xlink:href="{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#expand")}"></use>';
                source += '</svg>';
                $('.fullscreenIcon').html(source);
                // select HigherLevelPackaging
                var source = '';
                source += '<svg xmlns="http://www.w3.org/2000/svg"';
                source += 'xmlns:xlink="http://www.w3.org/1999/xlink"';
                source += 'style="width: 14px;height: 14px;float: right; padding-left: 5px;" aria-hidden="true">';
                source += '<use xlink:href="{!URLFOR($Asset.SLDS, "/assets/icons/utility-sprite/svg/symbols.svg#summarydetail")}"></use>';
                source += '</svg>';
                $('.selectHigherLevelPackagingIcon').html(source);
            }

            // remove focus from DatePicker
            function setFocusOnLoad() { }

            function collapseFilterSection() {
                $('#filter-panel .lookupInput').addClass('slds-size_1-of-1');
                $('#filter-panel .lookupInput input').addClass('slds-input');
            }

            function handleClientStatusColors(elementclass) {
                var clientStatusVal = '';
                $('table tr .clientStatus_col' + (elementclass ? '.' + elementclass : '')).each(function () {
                    var element = $(this)[0].childNodes[0];
                    clientStatusVal = element.tagName == 'SPAN' ? clientStatusPicklistValuesMap.get($(element).text()) : $(element).val();
                    if (clientStatusVal != 1/* && clientStatusVal != ''*/) {

                        var clientStatusClass = $(this).attr('class').split(/\s+/);
                        var classId = '';
                        for (var i = 0; i < clientStatusClass.length; i++)
                            if (clientStatusClass[i].match(/\_Client_Status__c/g))
                                classId = clientStatusClass[i].split('_')[0];
                        var parentTR = $(this).parent().get(0);
                        var classes = $('.' + classId + '_Client_Status__col').attr('class');
                        var classList = classes.match((/highlight-\S+/g) || [] || (/catRow\S+/g));
                        if (classList != null) {
                            for (var i = 0; i < classList.length; i++) {
                                $('.' + classId).removeClass(classList[i]);
                            }
                        }
                        if (clientStatusVal == 'Probably deleted')
                            clientStatusVal = 'Probablydeleted';
                        $('.' + classId).addClass('highlight-' + clientStatusVal);
                    }
                });
            }

            function setReleaseDate(rd) {
                var fieldIdArray = rd.getAttribute('id').split(':');
                fieldIdArray.splice(-1, 1);
                fieldIdArray.push('release-date');
                var releaseDateFieldId = fieldIdArray.join('\\:');
                var releaseDateField = $('[id*=' + releaseDateFieldId + "]").val(rd.value);
            }

            function enterPress(e) {
                if (e.keyCode == 13) {
                    if (e.preventDefault) {
                        e.preventDefault();
                    } else {
                        e.returnValue = false;
                    }
                    search();
                }
            }

            function disableClustForDelete() {
                for (var detailId in clientStatus_map) {
                    mapDataToView(detailId, false);
                }
                setTimeout(function () {
                    setTreeMargin();
                    setTableDimensions();
                    setStickyColumns();
                }, 50);
            }

            function toggleCheckboxes(element, detailId, field, stratIndex,categoryId) {
                var clientStatusToExclude = ['Opportunity', 'Delete', 'Probably deleted'];
                var initialClientStatusWrapper = clientStatus_initialMap[detailId];
                var clientStatusWrapper = clientStatus_map[detailId];
                var stratList = stratsMap[clientStatusWrapper['categoryId']];
                var cpltList = cpltMap[clientStatusWrapper['categoryId']];
                switch (field) {
                    case 'corpClust':
                        // check crop clusters greater than selected
                        for (var i = 0; i < stratIndex - 1; i++)
                            clientStatusWrapper['corpClusters'][i] = false;
                        // uncheck crop clusters less than selected
                        for (var i = stratIndex; i < 8; i++)
                            clientStatusWrapper['corpClusters'][i] = true;
                        clientStatusWrapper['corpClusters'][stratIndex - 1] = element.checked;
                        break;
                    case 'clientClust':
                        var clientClustChecked = element.checked;
                        // uncheck all cplt clusters
                        clientStatusWrapper['cpltIndex'] = 0;
                        for (var i = 0; cpltList && i < cpltList.length; i++) {
                            clientStatusWrapper['clientClustersCplt'][i] = false;
                        }
                        clientStatusWrapper['strat'] = stratIndex;
                        var lastValidClientStatus = clientStatusWrapper['lastValidClientStatus'];
                        var lastValidStratCount = clientStatusWrapper['lastValidStratCount'];
                        var initialClientStatus = initialClientStatusWrapper['clientStatus'];
                        var currentClientStatus = clientStatusWrapper['clientStatus'];
                        var lastValidStratIndex = clientStatusWrapper['lastValidStratIndex'];
                        var currentStratIndex = clientClustChecked ? stratIndex : stratIndex + 1;
                        var selectedStratIndex;
                        var currentStratCount = 0;
                        // get client clust count
                        for (var i = 0; stratList && i < stratList.length; i++) {
                            if ((stratList[i] + 1) >= stratIndex) {
                                currentStratCount++;
                            }
                            if ((stratList[i] + 1) == stratIndex) {
                                selectedStratIndex = i;
                                if (!clientClustChecked) currentStratCount--;
                            }
                        }
                        if (lastValidClientStatus == null) {
                            if (currentStratCount == 0) {
                                clientStatusWrapper['clientStatus'] = '';
                                clientStatusWrapper['clientAssortment'] = false;
                            } else if ((initialClientStatus == null || initialClientStatus == '' || initialClientStatus == 'New' || initialClientStatus == 'Cplt' || initialClientStatus == 'Opportunity') && (currentClientStatus == null || currentClientStatus == '' || currentClientStatus == 'Cplt')) {
                                clientStatusWrapper['clientStatus'] = 'New';
                                clientStatusWrapper['clientAssortment'] = true;
                            }
                        } else {
                            clientStatusWrapper['clientAssortment'] = false;
                            if (currentStratCount == 0) {
                                var response = window.confirm('{!JSENCODE($Label.MSG_After_saving_the_product_will_be_deleted_from_this_client_assortment)}');
                                if (response) {
                                    clientStatusWrapper['clientStatus'] = 'Delete';
                                } else {
                                    element.checked = !clientClustChecked;
                                    return;
                                }
                            } else if (!clientStatusToExclude.includes(currentClientStatus) && !clientStatusToExclude.includes(lastValidClientStatus)) {
                                if(lastValidStratIndex >= 0) {
                                    if (currentStratIndex < lastValidStratIndex) {
                                        clientStatusWrapper['clientStatus'] = 'Increase';
                                    } else if (currentStratIndex > lastValidStratIndex) {
                                        clientStatusWrapper['clientStatus'] = 'Decrease';
                                    } else {
                                        clientStatusWrapper['clientStatus'] = lastValidClientStatus;
                                    }
                                } else {
                                    clientStatusWrapper['clientStatus'] = 'Increase';
                                }
                            } else if (currentClientStatus != 'Opportunity') {
                                // case lastValidClientStatus = Delete and stratX is checked
                                clientStatusWrapper['clientStatus'] = 'New';
                                clientStatusWrapper['clientAssortment'] = true;
                            }
                        }
                        for (var i = 0; stratList && i < stratList.length; i++) {
                            if ((stratList[i] + 1) < stratIndex) {
                                // uncheck client clusters less than selected
                                clientStatusWrapper['clientClusters'][i] = false;
                            } else {
                                // check client clusters greater than selected
                                clientStatusWrapper['clientClusters'][i] = true;
                                if ((stratList[i] + 1) == stratIndex) {
                                    if (!element.checked) clientStatusWrapper['clientClusters'][i] = false;
                                }
                            }
                        }
                        element.checked = !clientStatusWrapper['clientClusters'][selectedStratIndex];
                        updateTotals(detailId, clientStatusWrapper['categoryId'], currentClientStatus, clientStatusWrapper['clientStatus']);
                        break;
                    case 'clientStatus':
                        // uncheck all cplt clusters
                        clientStatusWrapper['cpltIndex'] = 0;
                        for (var i = 0; cpltList && i < cpltList.length; i++) {
                            clientStatusWrapper['clientClustersCplt'][i] = false;
                        }
                        var selectedStatus = element.value;
                        // get initial client status
                        var initialState_status = initialClientStatusWrapper['clientStatus'];
                        var lastValidClientStatus = clientStatusWrapper['lastValidClientStatus'];
                        var lastValidStratCount = clientStatusWrapper['lastValidStratCount'];
                        var lastValidStratIndex = clientStatusWrapper['lastValidStratIndex'];
                        var includeAllStatus = $('[id*=includeAllStatus]')[0] && $('[id*=includeAllStatus]')[0].checked;
                        if(selectedStatus == 'Delete' || selectedStatus != clientStatusWrapper['clientStatus'] && (selectedStatus == 'Delete' || clientStatusWrapper['clientStatus'] == 'Delete') || !includeAllStatus)
                            updateTotals(detailId, clientStatusWrapper['categoryId'], clientStatusWrapper['clientStatus'], selectedStatus);
                        clientStatusWrapper['clientStatus'] = selectedStatus;
                        if (selectedStatus == 'Cplt') {
                            for (var i = 1; cpltList && i <= cpltList.length; i++) {
                                element = document.getElementsByClassName(detailId + '_' + package_prefix + "Client_Clust_Cplt" + (cpltList[i - 1] + 1) + '__c')[0];
                                if (typeof element !== 'undefined' && element != null) {
                                    //element.checked = ((cpltList[i - 1] + 1) == (clientStatusWrapper['selectedClustCpltIndex'] + 1)); // TODO fix !!!
                                    clientStatusWrapper['clientClustersCplt'][i-1] = initialClientStatusWrapper['clientClustersCplt'][i-1];
                                }
                            }
                            // uncheck client clusters
                            for (var i = 0; stratList && i < stratList.length; i++) {
                                clientStatusWrapper['clientClusters'][i] = false;
                            }
                        } else {
                            if (selectedStatus == '') {
                                // uncheck client clusters less than selected
                                for (var i = 0; stratList && i < stratList.length; i++) {
                                    clientStatusWrapper['clientClusters'][i] = false;
                                    clientStatusWrapper['clientAssortment'] = false;
                                }
                            } else if (initialState_status != null && initialState_status != ''
                                       && initialState_status != 'Blank' && initialState_status != 'New'
                                       && selectedStatus === 'New'
                                       && clientStatusToExclude.includes(clientStatusWrapper['clientStatus'])) {
                                clientStatusWrapper['clientStatus'] = initialState_status;
                                alert('{!JSENCODE($Label.MSG_Cannot_Select_Intro_for_Product_Referenced_in_Assortment)}');
                            }
                            // uncheck all client clusters
                            if (selectedStatus == 'Delete') {
                                clientStatusWrapper['clientAssortment'] = false;
                                for (var i = 0; stratList && i < stratList.length; i++) {
                                    clientStatusWrapper['clientClusters'][i] = false;
                                }
                            } else if (selectedStatus == lastValidClientStatus && lastValidClientStatus != 'Delete') {
                                clientStatusWrapper['clientAssortment'] = lastValidClientStatus;
                                // uncheck all client clusters
                                for (var i = 0; stratList && i < stratList.length; i++) {
                                    clientStatusWrapper['clientClusters'][i] = false;
                                }
                                // check last valid client clusters
                                if (stratList && stratList.length > 0) {
                                    for (var i = (stratList.length - lastValidStratCount); i < stratList.length; i++) {
                                        clientStatusWrapper['clientClusters'][i] = true;
                                    }
                                }
                            } else if (selectedStatus == initialState_status && initialState_status != 'Delete') {
                                // check client clusters to initial value
                                for (var i = 0; stratList && i < stratList.length; i++) {
                                    clientStatusWrapper['clientClusters'][i] = initialClientStatusWrapper['clientClusters'][i];
                                }
                            } else if (selectedStatus != 'Delete' && initialState_status == 'Delete') {
                                // check last strat in list
                                if (stratList && stratList.length > 0) clientStatusWrapper['clientClusters'][stratList.length - 1] = true;
                            }
                        }
                        break;
                    case 'clientAss':
                        // uncheck all cplt clusters
                        clientStatusWrapper['cpltIndex'] = 0;
                        for (var i = 0; cpltList && i < cpltList.length; i++) {
                            clientStatusWrapper['clientClustersCplt'][i] = false;
                        }
                        var lastValidClientStatus = clientStatusWrapper['lastValidClientStatus'];
                        var currentClientStatus = clientStatusWrapper['clientStatus'];
                        if (clientStatusWrapper['clientAssortment']) {
                            clientStatusWrapper['clientAssortment'] = false;
                            clientStatusWrapper['clientStatus'] = lastValidClientStatus == null ? '' : 'Delete';
                            for (var i = 0; stratList && i < stratList.length; i++) {
                                clientStatusWrapper['clientClusters'][i] = false;
                            }
                        } else if (lastValidClientStatus != null && lastValidClientStatus != 'New') {
                            alert('{!JSENCODE($Label.MSG_Cannot_Select_Intro_for_Product_Referenced_in_Assortment)}');
                            clientStatusWrapper['clientAssortment'] = false;
                        } else {
                            clientStatusWrapper['clientAssortment'] = true;
                            clientStatusWrapper['clientStatus'] = 'New';
                            var noStratSelected = true;
                            for (var i = 0; stratList && i < stratList.length; i++) {
                                if (initialClientStatusWrapper['clientClusters'][i]) {
                                    noStratSelected = false;
                                    break;
                                }
                            }
                            if (!noStratSelected) {
                                for (var i = 0; stratList && i < stratList.length; i++) {
                                    clientStatusWrapper['clientClusters'][i] = initialClientStatusWrapper['clientClusters'][i];
                                }
                            } else {
                                // check last strat in list
                                if (stratList && stratList.length > 0) clientStatusWrapper['clientClusters'][stratList.length - 1] = true;
                            }
                        }
                        updateTotals(detailId, clientStatusWrapper['categoryId'], currentClientStatus, clientStatusWrapper['clientStatus']);
                        break;
                    case 'clientClusterCplt':
                        var lastValidClientStatus = clientStatusWrapper['lastValidClientStatus'];
                        if (multipleComplementary == false) {
                            // uncheck all cplt clusters
                            clientStatusWrapper['cpltIndex'] = 0;
                            for (var i = 0; cpltList && i < cpltList.length; i++) {
                                clientStatusWrapper['clientClustersCplt'][i] = false;
                            }
                        }
                        var currentClientStatus = clientStatusWrapper['clientStatus'];
                        // ** unchecking all cplt clusters is done before switch statement **
                        // uncheck all client clusters
                        for (var i = 0; stratList && i < stratList.length; i++) {
                            clientStatusWrapper['clientClusters'][i] = false;
                        }
                        var selectedCpltIndex;
                        var currentCpltCount = 0;
                        for (var i = 0; cpltList && i < cpltList.length; i++) {
                            if ((cpltList[i] + 1) == stratIndex) {
                                selectedCpltIndex = i;
                                if (element.checked) {
                                    clientStatusWrapper['clientClustersCplt'][i] = true;
                                    clientStatusWrapper['clientStatus'] = 'Cplt';
                                    clientStatusWrapper['cpltIndex'] = stratIndex;
                                    currentCpltCount++;
                                } else {
                                    clientStatusWrapper['clientClustersCplt'][i] = false;
                                }
                            } else {
                                if (clientStatusWrapper['clientClustersCplt'][i]) currentCpltCount++;
                            }
                        }
                        if (currentCpltCount == 0) {
                            if (lastValidClientStatus == null) {
                                clientStatusWrapper['clientStatus'] = '';
                                clientStatusWrapper['cpltIndex'] = 0;
                            } else {
                                var response = window.confirm('{!JSENCODE($Label.MSG_After_saving_the_product_will_be_deleted_from_this_client_assortment)}');
                                if (response) {
                                    clientStatusWrapper['clientStatus'] = 'Delete';
                                    clientStatusWrapper['cpltIndex'] = 0;
                                } else {
                                    element.checked = !clientStatusWrapper['clientClustersCplt'][selectedCpltIndex];
                                    clientStatusWrapper['clientClustersCplt'][selectedCpltIndex] = true;
                                    return;
                                }
                            }
                        }
                        element.checked = !element.checked;
                        updateTotals(detailId, clientStatusWrapper['categoryId'], currentClientStatus, clientStatusWrapper['clientStatus']);
                }
                clientStatus_map[detailId] = clientStatusWrapper;
                setTimeout(function () {
                    mapDataToView(detailId, true, categoryId);
                    setTreeMargin();
                    setTableDimensions();
                    setStickyColumns();
                }, 30);
            }

            function updateTotals(assortmentDetailId, categoryId, previousStatus, currentStatus) {
                var includeAllStatus = $('[id*=includeAllStatus]')[0] && $('[id*=includeAllStatus]')[0].checked;
                if (previousStatus == currentStatus || includeAllStatus) return;
                if (!clientStatusToExcludeFromTotals.includes(currentStatus) && clientStatusToExcludeFromTotals.includes(previousStatus))
                    exclude = false;
                else if (clientStatusToExcludeFromTotals.includes(currentStatus) && !clientStatusToExcludeFromTotals.includes(previousStatus))
                    exclude = true;
                    else return;
                for (var index = 0; index < fieldsToCountList.length; index++) {
                    var fieldName = fieldsToCountList[index];
                    var input = $('.' + assortmentDetailId + '_' + fieldName)[0];
                    if (typeof input !== 'undefined' && input != null && input.checked) {
                        var totalClassname = categoryId + fieldName;
                        var grandTotalClassname = assortmentDetailId + fieldName + 'total';
                        var value = exclude ? -1 : 1;
                        calculateCount(input, value, categoryId, totalClassname, grandTotalClassname);
                    }
                }
                for (var index = 0; index < fieldsToSumList.length; index++) {
                    var fieldName = fieldsToSumList[index];
                    var element = $('.' + assortmentDetailId + '_' + fieldName)[0];
                    var value;
                    if ($(element).is('input')) {
                        value = $(element).val();
                    } else {
                        value = $(element).text();
                    }
                    value = stringToDecimal(value);
                    value = exclude ? value * -1 : value;
                    if (typeof element !== 'undefined' && element != null && value != 0) {
                        var totalClassname = categoryId + fieldName;
                        var grandTotalClassname = assortmentDetailId + fieldName + 'total';
                        var oldValueClassname = assortmentDetailId + 'initial' + fieldName;
                        calculateSum(fieldName, assortmentDetailId, categoryId, value);
                    }
                }
            }

            // TODO merge includeRowInTotals and excludeRowFromTotals in one function
            function includeRowInTotals(assortmentDetailId, categoryId) {
                for (var index = 0; index < fieldsToCountList.length; index++) {
                    var fieldName = fieldsToCountList[index];
                    var input = $('.' + assortmentDetailId + '_' + fieldName)[0];
                    if (typeof input !== 'undefined' && input != null && input.checked) {
                        var totalClassname = categoryId + fieldName;
                        var grandTotalClassname = assortmentDetailId + fieldName + 'total';
                        calculateCount(input, 1, categoryId, totalClassname, grandTotalClassname);
                    }
                }
                for (var index = 0; index < fieldsToSumList.length; index++) {
                    var fieldName = fieldsToSumList[index];
                    var element = $('.' + assortmentDetailId + '_' + fieldName)[0];
                    var value;
                    if ($(element).is('input')) {
                        value = $(element).val();
                    } else {
                        value = $(element).text();
                    }
                    value = stringToDecimal(value);
                    if (typeof element !== 'undefined' && element != null && value != 0) {
                        var totalClassname = categoryId + fieldName;
                        var grandTotalClassname = assortmentDetailId + fieldName + 'total';
                        var oldValueClassname = assortmentDetailId + 'initial' + fieldName;
                        calculateSum(fieldName, assortmentDetailId, categoryId, value);
                    }
                }
            }

            function excludeRowFromTotals(assortmentDetailId, categoryId) {
                for (var index = 0; index < fieldsToCountList.length; index++) {
                    var fieldName = fieldsToCountList[index];
                    var input = $('.' + assortmentDetailId + '_' + fieldName)[0];
                    if (typeof input !== 'undefined' && input != null && input.checked) {
                        var totalClassname = categoryId + fieldName;
                        var grandTotalClassname = assortmentDetailId + fieldName + 'total';
                        calculateCount(input, -1, categoryId, totalClassname, grandTotalClassname);
                    }
                }
                for (var index = 0; index < fieldsToSumList.length; index++) {
                    var fieldName = fieldsToSumList[index];
                    var element = $('.' + assortmentDetailId + '_' + fieldName)[0];
                    var value;
                    if ($(element).is('input')) {
                        value = $(element).val();
                    } else {
                        value = $(element).text();
                    }
                    value = stringToDecimal(value) * -1;
                    if (typeof element !== 'undefined' && element != null && value != 0) {
                        var totalClassname = categoryId + fieldName;
                        var grandTotalClassname = assortmentDetailId + fieldName + 'total';
                        var oldValueClassname = assortmentDetailId + 'initial' + fieldName;
                        calculateSum(fieldName, assortmentDetailId, categoryId, value);
                    }
                }
            }

            /**
         * handels changing values and disable/enable columns
         * doCalculate: Boolean to indicate whether or not subtotals and totals should be updated (set to false when called on load)
        */
            function mapDataToView(detailId, doCalculate, categoryId) {
                var clientStatusWrapper = clientStatus_map[detailId];
                var initialStatusWrapper = clientStatus_initialMap[detailId];
                let cpltIndex = clientStatusWrapper && clientStatusWrapper.hasOwnProperty('cpltIndex') ? clientStatusWrapper['cpltIndex'] : undefined;
                var stratList = clientStatusWrapper && stratsMap && clientStatusWrapper.hasOwnProperty('categoryId') && stratsMap.hasOwnProperty(clientStatusWrapper['categoryId']) ? stratsMap[clientStatusWrapper['categoryId']] : undefined;
                var cpltList = cpltMap && clientStatusWrapper && clientStatusWrapper.hasOwnProperty('categoryId') && cpltMap.hasOwnProperty(clientStatusWrapper['categoryId']) ? cpltMap[clientStatusWrapper['categoryId']] : undefined;
                var element;
                var oldValue;
                var doRemoteAction = false;
                var fieldName;
                for (var i = 1; stratList && i <= stratList.length; i++) {
                    element = document.getElementsByClassName(detailId + '_' + package_prefix + 'Client_Clust' + (stratList[i - 1] + 1) + '__c')[0];
                    if (typeof element !== 'undefined' && element != null) {
                        element.disabled = clientStatusWrapper['clientStatus'] == 'Delete';
                    }
                }
                for (var i = 1; cpltList && i <= cpltList.length; i++) {
                    element = document.getElementsByClassName(detailId + '_' + package_prefix + "Client_Clust_Cplt" + (cpltList[i - 1] + 1) + '__c')[0];
                    if (typeof element !== 'undefined' && element != null) {
                        element.disabled = clientStatusWrapper['clientStatus'] == 'Delete';
                    }
                }
                for (var i = 1; i <= 8; i++) {
                    element = document.getElementsByClassName(detailId + '_' + package_prefix + 'Corp_Clust' + i + '__c')[0];
                    if (typeof element !== 'undefined' && element != null) {
                        oldValue = element.checked;
                        element.checked = clientStatusWrapper['corpClusters'][i - 1];
                        // calculate only if value changed
                        if (doCalculate && oldValue != element.checked) {
                            fieldName = package_prefix + 'Corp_Clust' + i + '__c';
                            calculateTotal(fieldName, detailId, clientStatusWrapper['categoryId'], clientStatusWrapper['assortmentBUId']);
                        }
                    }
                }
                if (doCalculate) {
                    // for cluster calculations
                    for (var i = 1; stratList && i <= stratList.length; i++) {
                        element = document.getElementsByClassName(detailId + '_' + package_prefix + 'Client_Clust' + (stratList[i - 1] + 1) + '__c')[0];
                        if (typeof element !== 'undefined' && element != null) {
                            oldValue = element.checked;
                            element.checked = clientStatusWrapper['clientClusters'][i - 1];
                            if (oldValue != element.checked) {
                                doRemoteAction = true;
                                fieldName = package_prefix + 'Client_Clust' + (stratList[i - 1] + 1) + '__c';
                                calculateTotal(fieldName, detailId, clientStatusWrapper['categoryId'], clientStatusWrapper['assortmentBUId']);
                            }
                        }
                    }
                    // for Cplt cluster calculations
                    for (var i = 1; cpltList && i <= cpltList.length; i++) {
                        element = document.getElementsByClassName(detailId + '_' + package_prefix + 'Client_Clust_Cplt' + (cpltList[i - 1] + 1) + '__c')[0];
                        if (typeof element !== 'undefined' && element != null) {
                            oldValue = element.checked;
                            element.checked = clientStatusWrapper['clientClustersCplt'][i - 1];
                            if (oldValue != element.checked) {
                                doRemoteAction = true;
                                fieldName = package_prefix + 'Client_Clust_Cplt' + (cpltList[i - 1] + 1) + '__c';
                                calculateTotal(fieldName, detailId, clientStatusWrapper['categoryId'], clientStatusWrapper['assortmentBUId']);
                            }
                        }
                    }
                }
                element = document.getElementsByClassName(detailId + '_' + package_prefix + "Client_Ass__c")[0];
                if (typeof element !== 'undefined' && element != null) {
                    oldValue = element.checked;
                    element.checked = clientStatusWrapper['clientAssortment'];
                    // calculate only if value changed
                    if (doCalculate && oldValue != element.checked) {
                        doRemoteAction = true;
                        fieldName = package_prefix + 'Client_Ass__c';
                        calculateTotal(fieldName, detailId, clientStatusWrapper['categoryId'], clientStatusWrapper['assortmentBUId']);
                    }
                    element.disabled = clientStatusWrapper['clientStatus'] == 'Delete';
                }
                element = document.getElementsByClassName(detailId + '_' + package_prefix + "Client_Status__c")[0];
                if (typeof element !== 'undefined' && element != null) {
                    if (clientStatusWrapper['clientStatus'] == null) clientStatusWrapper['clientStatus'] = '';
                    var keyNote = document.getElementsByClassName(detailId + '_' + package_prefix + "Key_Note__c")[0];
                    if (typeof keyNote !== 'undefined' && keyNote != null) {
                        keyNote = keyNote.parentElement;
                        if (clientStatusWrapper['clientStatus'] == 'Probably deleted')
                            keyNote.classList.add('keyNoteAnimate');
                        else
                            keyNote.classList.remove('keyNoteAnimate');
                    }
                    if (element.nodeName == 'SELECT') {
                        element.value = clientStatusWrapper['clientStatus'];
                    } else {
                        if (clientStatusWrapper['clientStatus'] == '') {
                            element.textContent = `{!$Label.LBL_None_Picklist_Value}`;
                        } else {
                           element.textContent =  picklistValuesMap['Client_Status__c'][clientStatusWrapper['clientStatus']];
                        }
                    }
                    $(element).children('option').each(function () {
                        if (initialStatusWrapper['clientStatus'] == null) initialStatusWrapper['clientStatus'] = '';
                        var disabled = isDisabled(this, initialStatusWrapper['clientStatus'], clientStatusWrapper['clientStatus'], clientStatusWrapper['hasLastHistory'], clientStatusWrapper['isValidDetail']);
                        this.disabled = disabled;
                    });
                    var includeAllStatus = $('[id*=includeAllStatus]')[0] && $('[id*=includeAllStatus]')[0].checked;
                }
                if (doCalculate) {
                    calculateClusterTotals(categoryId);
                    handleClientStatusColors(detailId + '_Client_Status__col');
                }
                // call remote action
                if (doRemoteAction == true)
                    remoteCallout(package_prefix, fieldName, detailId, clientStatusWrapper['categoryId'], clientStatusWrapper['assortmentBUId']);
            }

            function isDisabled(element, initialValue, currentValue, hasLastHistory, isValidDetail) {
                if (initialValue != currentValue) {
                    if (element.value == initialValue || element.value == currentValue)
                        return false;
                    return true;
                }
                if (element.value == currentValue) return false;

                switch (initialValue) {
                    case '':
                        if (element.value == 'Opportunity') {
                            return false;
                        }
                        break;
                    case 'Increase':
                        if (element.value == 'Probably deleted' || element.value == 'Opportunity' || element.value == 'Delete') {
                            return false;
                        }
                        break;
                    case 'Decrease':
                        if (element.value == 'Probably deleted' || element.value == 'Opportunity' || element.value == 'Delete') {
                            return false;
                        }
                        break;
                    case 'New':
                        if (element.value == 'Opportunity' || (element.value == '' && !hasLastHistory && !isValidDetail)) {
                            return false;
                        }
                        break;
                    case 'Keep':
                        if (element.value == 'Probably deleted' || element.value == 'Opportunity' || element.value == 'Delete') {
                            return false;
                        }
                        break;
                    case 'Delete':
                        if (element.value == 'New') {
                            return false;
                        }
                        break;
                    case 'Opportunity':
                        if (element.value == 'Keep' || element.value == 'Probably deleted' || element.value == 'Delete' || ((!hasLastHistory || isValidDetail) && element.value == 'New')) {
                            return false;
                        }
                        break;
                    case 'Probably deleted':
                        if (element.value == 'Keep' || element.value == 'Delete') {
                            return false;
                        }
                        break;
                }
                return true;
            }

            function stringToDecimal(str) {
                if (str == null) return 0;
                var d = removeWhiteSpace(str);
                if (decimalSeparator == ',') {
                    d = d.replace(",", ".");
                }
                else {
                    d = d.replace(/,/g, "");
                }
                if (!isNaN(d) && d.length !== 0) {
                    return parseFloat(d);
                }
                return 0;
            }

            function formatNumber(num, scale, removeWhiteSpaces) {
                if (num == null || isNaN(num) || num.length == 0) num = 0;
                if (scale == 0)
                    num = parseInt(num);
                else {
                    num = num.toFixed(scale);
                }
                var formatedValue = negoptimApp.formatCurrency(num);
                if (scale > 0) {
                    formatedValue = formatedValue.split(decimalSeparator)[0] + decimalSeparator + num.split('.')[1];
                }
                if (removeWhiteSpaces) {
                    formatedValue = removeWhiteSpace(formatedValue);
                }
                return formatedValue;
            }

            function removeWhiteSpace(str) {
                str = str.toString().replace(/&nbsp/g, "").replace(/;/g, '');
                str = str.replace(/\s/g, "");
                return str;
            }

            function showColumnArrows(difference, cell) {
                $(cell).find('span').remove();
                if (difference > -1 && difference < 1) return;
                if (difference <= -1) {
                    var arrow = '<span class="arrow down"/>';
                } else if (difference >= 1) {
                    var arrow = '<span class="arrow up"/>';
                }
                cell.append(arrow);
            }

            // toggle select all on multiple product switch popup
            function toggleSelectAll() {
                var main = $('[id*=selectAll]');
                var checked = main[0].checked;
                var productCheckboxs = $('[id*=switchCheckbox]');
                for (var i = 0; i < productCheckboxs.length; i++) {
                    productCheckboxs[i].checked = checked;
                }
            }

            // show/hide subtotals
            function showHideSubTotals() {
                var isShowSubChecked = $('.showSubTotalClass').is(':checked');
                if (isShowSubChecked)
                    $('.totalRow').show();
                else
                    $('.totalRow').hide();
                setTableDimensions();
            }

            // show/hide totals
            function toggleTotals() {
                if (document.getElementById('{!$Component.theForm.blockOfTotals}') == undefined) return;
                let toggleButton = document.getElementById('total-tree-toggle');
                if (toggleButton) {
                    toggleButton.classList.toggle('slds-is-selected');
                    renderTree();
                }
                setTimeout(function () {
                    setTableDimensions();
                    setStickyColumns();
                }, 30);
            }
            // show tree if total tree toggle button is toggled
            function renderTree() {
                let toggleButton = document.getElementById('total-tree-toggle');
                if (toggleButton) {
                    var isShowTotalChecked = toggleButton.classList.contains('slds-is-selected');
                    if (isShowTotalChecked) {
                        document.getElementById('{!$Component.theForm.blockOfTotals}').classList.remove('slds-hide');
                        setTreeMargin();
                        renderTotalsTree();
                    }
                    else {
                        document.getElementById('{!$Component.theForm.blockOfTotals}').classList.add('slds-hide');
                    }
                }
            }

            // functions related to Total caluculations
            function Assortment_Detail__c() {
                this.Id = null;
                this.Name = null;
                this[package_prefix + 'Assortment_BU__c'] = null;
                this[package_prefix + (manageAssortByPersonalizedCategory ? 'Client_Category__c' : 'Category__c')] = null;
                this[package_prefix + 'Year__c'] = assortmentYear;
                for (var index = 0; index < fieldsToCountList.length; index++)
                    this[fieldsToCountList[index]] = false;
                for (var index = 0; index < fieldsToSumList.length; index++)
                    this[fieldsToSumList[index]] = null;
            }

            function calculateTotal(fieldName, assortmentDetailId, categoryId, assortmentBUId) {
                if (fieldName !== package_prefix + 'Movement_Date__c') {
                    var inputClassname = assortmentDetailId + '_' + fieldName;
                    var input = $('.' + inputClassname)[0];
                    var oldValueClassname = assortmentDetailId + 'initial' + fieldName;
                    var totalClassname = categoryId + fieldName;
                    var grandTotalClassname = assortmentDetailId + fieldName + 'total';
                    var clientStatus = clientStatus_map[assortmentDetailId]['clientStatus'];
                    var excludeFromCalculation = $('[id*=includeAllStatus]')[0] && !$('[id*=includeAllStatus]')[0].checked && clientStatusToExcludeFromTotals.includes(clientStatus);
                    var tr = $(input).closest('tr').get(0);

                    // update Count
                    if (fieldsToCountList.indexOf(fieldName) >= 0 && !excludeFromCalculation) {
                        calculateCount(input, null, categoryId, totalClassname, grandTotalClassname);
                    }
                    //update sum
                    if (fieldsToSumList.indexOf(fieldName) >= 0 && !excludeFromCalculation) {
                        let span = $('.' + oldValueClassname);
                        if (span.length > 0 && typeof input !== 'undefined') {
                            let oldValue = stringToDecimal(span[0].textContent);
                            let newValue = stringToDecimal(input.value);
                            span[0].textContent = newValue;
                            calculateSum(fieldName, assortmentDetailId, categoryId, newValue - oldValue);
                        }
                        remoteCallout(package_prefix, fieldName, assortmentDetailId, categoryId, assortmentBUId);
                    }
                } else {
                    remoteCallout(package_prefix, fieldName, assortmentDetailId, categoryId, assortmentBUId);
                }
            }

            function calculateCount(input, value, categoryId, totalClassname, grandTotalClassname) {
                var total = parseInt($('.' + totalClassname).text());
                var grandTotal = parseInt($('.' + grandTotalClassname).text());
                if (value == null) {
                    if (input.checked) value = 1;
                    else value = -1;
                }
                $('.' + totalClassname).text(total + value); categorySubTotalMap.set(totalClassname, total + value);
                $('.' + grandTotalClassname).text(grandTotal + value); categorySubTotalMap.set(grandTotalClassname, grandTotal + value);
                // update parent counts
                if (!firstTreeLoad)
                    calculateParentTotalCount(categoryId, totalClassname, value);
            }

            function calculateParentTotalCount(categoryId, totalClassname, value) {
                var columnName = totalClassname.split(categoryId)[1];
                var tree = $("#treegrid").fancytree("getTree");
                var node = tree.getNodeByKey(categoryId);
                if (node != null) {
                    let includeAllStores = getIncludeStores();
                    do {
                        $tdList = $(node.tr).find(">td");
                        var bcNode = tree.getNodeByKey(node.key + '_bc');
                        var oldValue = parseInt(node.data.counts[columnName]);
                        var newValue = oldValue + value;
                        var column = $tdList.eq(totalColumnsMap.get(columnName));
                        var nbStore = (includeAllStores && NbStoreMap ? NbStoreMap.hasOwnProperty(categoryId + '_' + columnName) ? NbStoreMap[categoryId + '_' + columnName] : getNbStore(categoryId, columnName) : 1);
                        // var nbStore = getNbStore(categoryId, columnName);
                        column.text(formatNumber(newValue * nbStore, gridFields[columnName].scale));
                        oldValue = bcNode != null ? parseInt(bcNode.data.counts[columnName]) : oldValue;
                        if (oldValue != newValue) {
                            addBeforeCalculationNode(node);
                            bcNode = tree.getNodeByKey(node.key + '_bc');
                        }
                        showColumnArrows((newValue - oldValue), column);
                        // update before calculation node if includeStores changes
                        if (bcNode != null) {
                            $tdList = $(bcNode.tr).find(">td");
                            column = $tdList.eq(totalColumnsMap.get(columnName));
                            column.text(parseInt(bcNode.data.counts[columnName]) * nbStore);
                        }
                        //
                        node.data.counts[columnName] = newValue;
                        node = node.parent;
                    } while (node != null && node.title != 'root');
                }
            }

            function calculateSum(fieldName, assortmentDetailId, categoryId, value) {
                var oldValueClassname = assortmentDetailId + 'initial' + fieldName;
                var totalClassname = categoryId + fieldName;
                var grandTotalClassname = assortmentDetailId + fieldName + 'total';
                var total = stringToDecimal($('.' + totalClassname).text());
                var grandTotal = stringToDecimal($('.' + grandTotalClassname).text());
                $('.' + totalClassname).text(formatNumber(parseFloat(total + value), gridFields[fieldName].scale));
                categorySubTotalMap.set(totalClassname, formatNumber(parseFloat(total + value), gridFields[fieldName].scale));
                $('.' + grandTotalClassname).text(formatNumber(parseFloat(grandTotal + value), gridFields[fieldName].scale));
                categorySubTotalMap.set(grandTotalClassname, formatNumber(parseFloat(grandTotal + value), gridFields[fieldName].scale));
                // update parent sums
                if (!firstTreeLoad)
                    calculateParentTotalSum(categoryId, totalClassname, value);
            }

            function calculateParentTotalSum(categoryId, totalClassname, diffValue) {
                var nodeKey = categoryId;
                var columnName = totalClassname.split(categoryId)[1];
                var tree = $("#treegrid").fancytree("getTree");
                var node = tree.getNodeByKey(nodeKey);
                if (node != null) {
                    do {
                        $tdList = $(node.tr).find(">td");
                        var column = $tdList.eq(totalColumnsMap.get(columnName));
                        var bcNode = tree.getNodeByKey(node.key + '_bc');
                        var oldValue = node.data.sums[columnName];
                        var newValue = oldValue + diffValue;
                        column.text(formatNumber(newValue, gridFields[columnName].scale));
                        oldValue = bcNode != null ? parseInt(bcNode.data.sums[columnName]) : oldValue;
                        if (oldValue != newValue) {
                            addBeforeCalculationNode(node);
                        }
                        node.data.sums[columnName] = newValue;
                        showColumnArrows((newValue - oldValue), column);
                        showColumnArrows(diffValue, column);
                        node = node.parent;
                    } while (node != null && node.title != 'root');
                }
            }

            function addBeforeCalculationNode(node) {
                if (node.hasChildren() == false || (node.hasChildren() == true && node.children[0].key != node.key + '_bc')) {
                    var beforeClacNode = jQuery.extend(true, {}, node);
                    beforeClacNode.key += '_bc';
                    beforeClacNode.title += ' ' + '{!JSENCODE($Label.LBL_Previous_Value)}';
                    beforeClacNode.children = null;
                    var firstChild = node.hasChildren() == true ? firstChild = node.children[0] : null;
                    node.addChildren(new Array(beforeClacNode), firstChild);
                }
            }

            function remoteCallout(package_prefix, fieldName, assortmentDetailId, categoryId, assortmentBUId) {
                $(document).find('body').css('cursor', 'wait');
                // get movement date
                let mvmtDate = null;
                let mvmtDateElements = document.getElementsByClassName(assortmentDetailId + '_' + package_prefix + 'Movement_Date__c');
                if (mvmtDateElements && mvmtDateElements.length > 0) {
                    mvmtDate = mvmtDateElements[0].value;
                    if (mvmtDate) {
                        let date_split = mvmtDate.split('/');
                        if (negoptimApp.locale.includes('en') && negoptimApp.locale.includes('US')) {
                            mvmtDate = date_split[2] + '-' + date_split[0] + '-' + date_split[1];
                        } else {
                            mvmtDate = date_split[2] + '-' + date_split[1] + '-' + date_split[0];
                        }
                    }
                }
                // fetch the assortment detail row
                var inputClassname = assortmentDetailId + '_' + fieldName;
                var input = $('.' + inputClassname)[0];
                var tr = $(input).closest('tr').get(0);
                // fill assortment detail
                var assortmentDetail = new Assortment_Detail__c();
                assortmentDetail.Id = assortmentDetailId;
                assortmentDetail[package_prefix + 'Assortment_BU__c'] = assortmentBUId;
                assortmentDetail[package_prefix + (manageAssortByPersonalizedCategory ? 'Client_Category__c' : 'Category__c')] = categoryId;
                if (mvmtDate) {
                    assortmentDetail[package_prefix + 'Movement_Date__c'] = mvmtDate;
                }
                for (var index = 0; index < fieldsToCountList.length; index++) {
                    var field = fieldsToCountList[index];
                    assortmentDetail[field] = $('td input:checkbox.' + assortmentDetailId + '_' + field, tr).is(':checked');
                }
                for (var index = 0; index < fieldsToSumList.length; index++) {
                    var field = fieldsToSumList[index];
                    var element = document.getElementsByClassName(assortmentDetailId + '_' + field)[0];
                    var fieldValue;
                    if (element.tagName == 'SPAN') {
                        fieldValue = element.textContent;
                    } else if (element.tagName == 'INPUT') {
                        fieldValue = element.value;
                    }
                    if (typeof element !== 'undefined' && element != null) {
                        assortmentDetail[field] = stringToDecimal(fieldValue);
                    }
                }
                assortmentDetail = JSON.stringify(assortmentDetail);
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.AssortmentBUMatrixController.evaluateAssortmentDetail}',
                    assortmentDetail, fieldsToSum_serialized, formulaFields_serialized, function (result, event) {
                        if (event.status) {
                            // change cursor
                            remoteCallback(result);
                        }
                        else {
                            $(document).find('body').css('cursor', 'default');
                            alert(event.message);
                        }
                    }, {escape: false});
            }

            function remoteCallback(result) {
                try {
                    updatedAssortmentDetailsMap.set(result.Id, result);
                    mapCalculationToView(result, true);
                } catch (error) {
                    console.log(error);
                }
                $(document).find('body').css('cursor', 'default');
            }

            function mapCalculationToView(result, recalculate) {
                var oldValue, newValue, diffValue, total, grandtotal;
                /// var htmlElement = $('.' + result.Id + '_Status__c').val(result['Status__c']);
                var includeAllStatus = $('[id*=includeAllStatus]')[0] && $('[id*=includeAllStatus]')[0].checked;
                for (var index = 0; index < formulaFieldsList.length; index++) {
                    var field = formulaFieldsList[index];
                    $('.' + result.Id + '_' + field).text(result[field]);
                }
                for (var index = 0; index < fieldsToSumList.length; index++) {
                    var field = fieldsToSumList[index];
                    var initialhtmlElement = $('.' + result.Id + 'initial' + field);
                    // get field old value
                    oldValue = stringToDecimal(initialhtmlElement.text());
                    // get field new value
                    newValue = typeof result[field] === 'undefined' ? 0 : result[field];
                    // get difference
                    diffValue = newValue - oldValue;
                    // always update field value with newValue
                    var htmlElement = $('.' + result.Id + '_' + field);
                    var formatedValue = formatNumber(newValue, gridFields[field].scale);
                    if (diffValue != 0) {
                        if (result[field] != 'undefined' && result[field] != null) {
                            if ($(htmlElement).is('input')) {
                                $(htmlElement).val(formatNumber(newValue, gridFields[field].scale, true));
                            } else {
                                $('.' + result.Id + '_' + field).text(formatedValue);
                            }
                        }
                        // change totals only if field value changed
                        // if (diffValue != 0) {
                        initialhtmlElement.text(formatedValue);
                        if (recalculate && typeof clientStatus_map[result.Id] !== 'undefined') {
                            var clientStatus = clientStatus_map[result.Id]['clientStatus'];
                            var excludeFromCalculation = !includeAllStatus && clientStatusToExcludeFromTotals.includes(clientStatus);
                            if (!excludeFromCalculation)
                                calculateSum(field, result.Id, result[package_prefix + (manageAssortByPersonalizedCategory ? 'Client_Category__c' : 'Category__c')], diffValue);
                        }
                    }
                }
            }

            function checkProductForStop(assortmentDetailId, productId) {
                var clientStatus = clientStatus_map[assortmentDetailId]['clientStatus'];
                if (clientStatus != null && clientStatus !== '') {
                    showSingleStopPopup(productId, true, true);
                } else {
                    alert('Status is null > Cannot be stopped');
                }
                return false;
            }

            function promptToSave() {
                if ({!AND(hasDetails, !readOnly)
                    }) {
                    var confirmation = window.confirm('{!JSENCODE($Label.MSG_Save_Before_Search)}');
                    if (confirmation) {
                        save();
                    } else {
                        if($('[id*=includeAllStatus]')[0]) {
                            $('[id*=includeAllStatus]')[0].checked = !$('[id*=includeAllStatus]')[0].checked;
                        }
                    }
                } else {
                    search();
                }
            }

            // set grid table and tree table sticky
            function setSticky() {
                setTreeSticky();
                if (numberOfFixedColumnsVar == undefined || numberOfFixedColumnsVar == null || numberOfFixedColumnsVar < 1) {
                    numberOfFixedColumnsVar = 1;
                }
                var initialTableRows = $($("[id$=initial-table]").find('tbody')[0]).children('tr');
                if (initialTableRows.length > 0) {
                    var categorywidth = $($(initialTableRows[0]).children('td')[0]).outerWidth();
                    var paddingLeft;
                    for (var i = 0; i < initialTableRows.length; i++) {
                        var tds = $(initialTableRows[i]).children('td');
                        $(tds[0]).css({ position: 'sticky', left: '0px', 'z-index': 2 });
                        $($(tds[0]).children('td')).css({ position: 'sticky', top: '0px' });
                        var table = $(tds[1]).children('table');
                        if (typeof ($(table).css("padding-left")) !== 'undefined')
                            paddingLeft = parseInt($(table).css("padding-left").replace('px', ''));
                        var space = (categorywidth ? categorywidth : 0) + (paddingLeft ? paddingLeft : 0);
                        var tableHeadThs = $($(table).find('thead')).find('th');
                        var tableFootThs = $($(table).find('tfoot')).find('th');
                        var tableTbodyRows = $($(table).find('tbody')).find('tr');
                        let left = space;
                        for (var k = 0; k < tableHeadThs.length; k++) {
                            $(tableHeadThs[k]).css({ position: 'sticky', top: '0px', left: '', 'z-index': 1 });
                            $(tableFootThs[k]).css({ position: 'sticky', bottom: '0px', left: '', 'z-index': 1 });
                            if (k < numberOfFixedColumnsVar) {
                                $(tableHeadThs[k]).css({ position: 'sticky', top: '0px', left: left, 'z-index': 2 });
                                $(tableFootThs[k]).css({ position: 'sticky', bottom: '0px', left: left, 'z-index': 2 });
                            }
                            left = left + $(tableHeadThs[k]).outerWidth();
                        }
                        for (var k = 0; k < tableTbodyRows.length; k++) {
                            var tableRowTds = $(tableTbodyRows[k]).find('td');
                            left = space;
                            for (var j = 0; j < tableRowTds.length; j++) {
                                $(tableRowTds[j]).css({ position: 'auto', left: '', 'z-index': 0 });
                                if (j < numberOfFixedColumnsVar) {
                                    $(tableRowTds[j]).css({ position: 'sticky', left: left, 'z-index': 1 });
                                }
                                left = left + $(tableRowTds[j]).outerWidth();
                            }
                        }
                    }
                }
            }
            // set tree table sticky
            function setTreeSticky() {
                let headertrs = document.querySelector('#treegrid thead').children;
                for (let index = 0; index < headertrs.length; index++) {
                    let ths = headertrs[index].children;
                    let left = 0;
                    for (let index2 = 0; index2 < ths.length; index2++) {
                        $(ths[index2]).css({ position: 'sticky', top: '0px', left: '', 'z-index': 2 });
                        if (index2 == 2) {
                            $(ths[index2]).css({ position: 'sticky', top: '0px', left: left, 'z-index': 3 });
                            left = left + $(ths[index2]).outerWidth();
                        }
                    }
                }

                let bodytrs = document.querySelector('#treegrid tbody').children;
                for (let index = 0; index < bodytrs.length; index++) {
                    let tds = bodytrs[index].children;
                    let left = 0;
                    for (let index2 = 0; bodytrs[index].style.display != 'none' && index2 < tds.length; index2++) {
                        $(tds[index2]).css({ position: 'sticky', left: '', 'z-index': 1 });
                        if (index2 == 2) {
                            $(tds[index2]).css({ position: 'sticky', left: left, 'z-index': 2 });
                            left = left + $(tds[index2]).outerWidth();
                        }
                    }
                }
            }
            // set fixed columns select options
            function setSelectList() {
                var initialTableRows = $($("[id$=initial-table]").children('tbody')[0]).children('tr');
                var tds = $(initialTableRows[0]).children('td');
                var table = $(tds[1]).children('table');
                var tableHeadThs = $($(table).find('thead')).find('th');
                var nbOfFields = tableHeadThs.length;
                var selectList = $("[id$=numberOfFixedColumns]");
                if (selectList.length > 0) {
                    selectList.empty();
                    for (var i = 1; i <= nbOfFields && i <= 10; i++) {
                        var option = new Option('' + i, '' + i);
                        selectList.append($(option));
                    }
                    if (numberOfFixedColumnsVar != null && numberOfFixedColumnsVar != undefined) {
                        $(selectList.val('' + numberOfFixedColumnsVar)).attr("selected");
                    }
                }
            }

            function setStickyColumns() {
                if ($("[id$=numberOfFixedColumns]").length > 0) {
                    numberOfFixedColumnsVar = parseInt($("[id$=numberOfFixedColumns]").children("option:selected").val());
                    setSticky();
                }
            }
            // set listener to hide date picker while scrolling
            function setHideDatePickerListener() {
                $('.grid-container').on("scroll", function () {
                    $('#datePicker').hide();
                });
            }

            function confirmRequestForApproval() {
                requestForApproval();
            }

            function confirmValidation() {
                var confirmStatus = confirm('{!JSENCODE($Label.MSG_Confirm_Change_Status)}');
                if (confirmStatus) {
                    if (!validateClientStatus()) {
                        alert('{!JSENCODE($Label.MSG_Select_Cluster_For_Client_Status_New)}');
                    } else {
                        validateAssortment();
                    }
                }
            }

            function confirmSave() {
                if (!validateClientStatus()) {
                    alert('{!JSENCODE($Label.MSG_Select_Cluster_For_Client_Status_New)}');
                } else {
                    save(JSON.stringify(assortmentDetailChangesList));
                }
            }

            function validateClientStatus() {
                var saved = true;
                if (gridFields.hasOwnProperty(package_prefix + 'Client_Status__c')) {
                    for (var detailId in clientStatus_map) {
                        var clientStatusWrapper = clientStatus_map[detailId];
                        if (clientStatusWrapper['version']) continue;
                        var clientStatus = clientStatusWrapper['clientStatus'];
                        var initialStatusWrapper = clientStatus_initialMap[detailId];
                        var stratCount = clientStatusWrapper['clientClusters'].length;
                        let clientClustChecked = false;
                        if (clientStatus == 'New' && stratCount != 0 && clientStatusWrapper['clientClusters']) {
                            for (let index = 0; index < clientStatusWrapper['clientClusters'].length; index++) {
                                if (clientStatusWrapper['clientClusters'][index]) {
                                    clientClustChecked = true;
                                    break;
                                }
                            }
                            if (!clientClustChecked) {
                                saved = false;
                                break;
                            }
                        }
                    }
                }
                return saved;
            }

            // toogle filter panel
            function toggleFilterPanel() {
                let toggleButton = document.getElementById('filter-panel-toggle');
                if (toggleButton) {
                    toggleButton.classList.toggle('slds-is-selected');
                }
                renderFilter();
            }

            // show tree if total tree toggle button is toggled
            function renderFilter() {
                let panel = document.getElementById('filter-panel');
                let toggleButton = document.getElementById('filter-panel-toggle');
                if (panel) {

                    if (toggleButton && toggleButton.classList.contains('slds-is-selected')) {
                        panel.classList.remove('slds-hide');
                    } else {
                        panel.classList.add('slds-hide');
                    }
                } else {
                    console.log('renderFilter failed');
                }
            }
            // toggle full screen on main grid
            function toggleFullScreen(element) {
                if (!isfullscreen()) {
                    let div = document.getElementById('{!$Component.theForm.AssortmentDetailSection}');
                    if (div) {
                        div.style = 'background: white;'
                        if (div.requestFullscreen) {
                            div.requestFullscreen();
                        } else if (div.mozRequestFullScreen) { /* Firefox */
                            div.mozRequestFullScreen();
                        } else if (div.webkitRequestFullscreen) { /* Chrome, Safari & Opera */
                            div.webkitRequestFullscreen();
                        } else if (div.msRequestFullscreen) { /* IE/Edge */
                            div.msRequestFullscreen();
                        }
                    }
                    setTimeout(() => {
                        if (!isfullscreen()) {
                        alert("{!JSENCODE($Label.MSG_Cant_Open_Fullscreen)}");
                    }
                               setTableDimensions();
                    setStickyColumns();
                    updateFullscreenButton();
                }, 300);
            } else {
                document.exitFullscreen();
            }
            setTableDimensions();
            setStickyColumns();
            updateFullscreenButton();
            }

            // toggle full screen on tree grid
            function toggleTreeFullScreen(element) {
                if (!isTreefullscreen()) {
                    let div = document.getElementById('{!$Component.theForm.blockOfTotals}');
                    if (div) {
                        if (div.requestFullscreen) {
                            div.requestFullscreen();
                        } else if (div.mozRequestFullScreen) { /* Firefox */
                            div.mozRequestFullScreen();
                        } else if (div.webkitRequestFullscreen) { /* Chrome, Safari & Opera */
                            div.webkitRequestFullscreen();
                        } else if (div.msRequestFullscreen) { /* IE/Edge */
                            div.msRequestFullscreen();
                        }
                    }
                    setTimeout(() => {
                        if (!isTreefullscreen()) {
                        alert("{!JSENCODE($Label.MSG_Cant_Open_Fullscreen)}");
                    }
                               setTableDimensions();
                    setStickyColumns();
                    updateFullscreenButton();
                }, 300);
            } else {
                document.exitFullscreen();
            }
            setTableDimensions();
            setStickyColumns();
            updateFullscreenButton();
            }

            // expand all tree nodes
            function expandTree() {
                $("#treegrid").fancytree("getTree").expandAll();
                setTimeout(function () {
                    setTableDimensions();
                    setStickyColumns();
                }, 30);
            }

            // contract all tree nodes
            function contractTree() {
                $("#treegrid").fancytree("getTree").expandAll(false);
                setTimeout(function () {
                    setTableDimensions();
                    setStickyColumns();
                }, 30);
            }

            // update tree/main grid toggle button icon
            function updateFullscreenButton() {
                let element = document.getElementById('full-screen-toggle');
                if (!isfullscreen()) {
                    element.classList.remove('slds-is-selected');
                    element.innerHTML = `<svg class="slds-button__icon" aria-hidden="true">
                        <use xmlns="http://www.w3.org/2000/svg"
                        xmlns:xlink="http://www.w3.org/1999/xlink"
                        xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#expand')}" />
                            </svg>`;
                } else {
                    element.classList.add('slds-is-selected');
                    element.innerHTML = `<svg class="slds-button__icon" aria-hidden="true">
                        <use xmlns="http://www.w3.org/2000/svg"
                        xmlns:xlink="http://www.w3.org/1999/xlink"
                        xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#contract')}" />
                            </svg>`;
                }
                element = document.getElementById('tree-full-screen-toggle');
                if (!isTreefullscreen()) {
                    element.classList.remove('slds-is-selected');
                    element.innerHTML = `<svg class="slds-button__icon" aria-hidden="true">
                        <use xmlns="http://www.w3.org/2000/svg"
                        xmlns:xlink="http://www.w3.org/1999/xlink"
                        xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#expand')}" />
                            </svg>`;
                } else {
                    element.classList.add('slds-is-selected');
                    element.innerHTML = `<svg class="slds-button__icon" aria-hidden="true">
                        <use xmlns="http://www.w3.org/2000/svg"
                        xmlns:xlink="http://www.w3.org/1999/xlink"
                        xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#contract')}" />
                            </svg>`;
                }
            }

            //move datepicker closest div
            function setMoveDatePicker() {
                let datesFields = document.querySelectorAll('.dateInput.dateOnlyInput input');
                for (let index = 0; datesFields && index < datesFields.length; index++) {
                    let element = datesFields[index];
                    element.addEventListener('mouseup', (event) => {
                        moveDatePickerHere(event.target);
                    });
                        /*element.addEventListener('focus', (event) => {
                        event.target.blur();
                    });*/
                }
            }

            function moveDatePickerHere(element) {
                let datepickerDiv = DatePicker.datePicker.shim.div;
                let closestDiv = getParentDiv(element);
                // reset default datepicker event listener
                DatePicker.datePickEventRemove();
                // set close handler on datepicker
                DatePicker.datePicker.closeHandler = function (b) {
                    if (b.target != element) {
                        DatePicker.datePicker.shim.div.remove();
                        $('#datePickerContainer').append(DatePicker.datePicker.shim.div);
                    }
                    DatePicker.datePicker.hide(b);
                };
                addEvent(document, "click", DatePicker.datePicker.closeHandler, !1);
                if (closestDiv) {
                    $(datepickerDiv).remove();
                    closestDiv.appendChild(datepickerDiv);
                } else {
                    console.log('failed to load datepicker');
                }
                //display datepicker
                DatePicker.datePicker.display();
                //display datepicker in the right place
                DatePicker.datePicker.display();
            }
            function isParent(element, parentclass) {
                if (element) {
                    if (element.classList.contains(parentclass)) {
                        return true;
                    } else {
                        return isParent(element.parentElement, parentclass);
                    }
                }
                return false;
            }
            // get closest ancestor div
            function getParentDiv(element) {
                if (element) {
                    if (element.tagName == 'DIV') {
                        return element
                    } else {
                        return getParentDiv(element.parentElement);
                    }
                }
                return null;
            }

            function isfullscreen() {
                return document.fullscreenElement && document.fullscreenElement.getAttribute("id") == ('{!$Component.theForm.AssortmentDetailSection}');
            }

            function isTreefullscreen() {
                return document.fullscreenElement && document.fullscreenElement.getAttribute("id") == ('{!$Component.theForm.blockOfTotals}');
            }

            //show hide settings menu
            function toggleMenu() {
                let toggleButton = document.getElementById('settings-menu');
                if (toggleButton) {
                    toggleButton.classList.toggle('slds-is-open');
                } else {
                    console.log('toggleMenu failed');
                }
            }

            function setPBClass() {
                $(document.getElementById('{!$Component.theForm.AssortmentDetailSection}')).find(".list").removeClass('list');
                $('[id*="AssortmentDetailSection"] .pbBody').addClass('slds-grid slds-wrap slds-scrollable_none  slds-p-top_xx-small');
            }

            function setTreeMargin() {
                let blockOfTotals = document.getElementById('{!$Component.theForm.blockOfTotals}');
                if(blockOfTotals) {
                    blockOfTotals.classList.add('slds-m-bottom_small');
                }
            }

            function fixLookupHoverDetail() {
                if(LookupHoverDetail) {
                    LookupHoverDetail.hovers = {};
                }
                let lookups = document.querySelectorAll('[id^=lookup]');
                for (let i of lookups) {
                    let parentElement = i.parentElement;
                    if (!parentElement.innerHTML.toString().includes(parentElement.id)) {
                        let modifiedlookup = parentElement.innerHTML.toString().replaceAll(i.id, i.id + parentElement.id);
                        parentElement.innerHTML = modifiedlookup;
                    }
                }
            }

            function LookupHoverDetail(a, b) {
                b && (b = window.Shepherd ? window.Shepherd.fixRetUrl(b) : UserContext.getUrl(b));
                this.id = a;
                this.width = LookupHoverDetail.STANDARD_BUBBLE_WIDTH;
                this.bubbleOffset = Sfdc.userAgent.isIE6 ? 5 : 14;
                this.height = LookupHoverDetail.STANDARD_BUBBLE_HEIGHT;
                this.hover = document.createElement("div");
                this.hover.id = a + "Hover";
                this.hover.className = "individualPalette lookupHoverDetail lookupHoverDetailLoading lookupHoverDetailOverridable";
                this.hover.innerHTML = '\x3cdiv class\x3d"topLeft"\x3e\x3cdiv class\x3d"bPageBlock"\x3e\x3cdiv class\x3d"pbBody"\x3e' + LC.getLabel("Global", "loading") + '\x3cdiv\x3e\x3cdiv class\x3d"pbFooter"\x3e\x3cdiv class\x3d"bg"\x3e\x3cdiv\x3e\x3c/div\x3e\x3c/div\x3e\x3cdiv\x3e';
                let scrollableDiv = document.getElementById('{!$Component.theForm.AssortmentDetailSection}');
                if(scrollableDiv) {
                    scrollableDiv.appendChild(this.hover);
                } else {
                    document.body.appendChild(this.hover);
                }

                var c = this;
                addEvent(this.hover, "mouseover", function() {
                    c.show()
                }, !0);
                addEvent(this.hover, "mouseout", function() {
                    c.hide()
                }, !0);
                this.hover = new iframeShim(this.hover);
                this.originalClass = "";
                this.fadingIn = this.fadingOut = null;
                this.loaderURL = b;
                this.loaded = !1
            }
            LookupHoverDetail.STANDARD_BUBBLE_WIDTH = 302;
            LookupHoverDetail.STANDARD_BUBBLE_HEIGHT = 262;
            LookupHoverDetail.SHOW_DELAY = 800;
            LookupHoverDetail.HIDE_DELAY = 250;
            LookupHoverDetail.stopLoading = !1;
            LookupHoverDetail.hovers = {};
            LookupHoverDetail.getHover = function(a, b) {
                if (LookupHoverDetail.hovers[a])
                    return LookupHoverDetail.hovers[a];
                var c = new LookupHoverDetail(a,b);
                return LookupHoverDetail.hovers[a] = c
            };
            LookupHoverDetail.hideAllHovers = function() {
                var a = LookupHoverDetail.hovers, b;
                for (b in a)
                    a.hasOwnProperty(b) && a[b] && a[b].hide()
                    };
            LookupHoverDetail.prototype.show = function() {
                if (6 !== this.id.indexOf("00k"))
                    if (this.fadingOut)
                        clearTimeout(this.fadingOut),
                            this.fadingOut = null;
                    else {
                        var a = this;
                        !this.fadingIn && !this.isShowing() && (this.fadingIn = setTimeout(function() {
                            a.showNow()
                        }, LookupHoverDetail.SHOW_DELAY))
                    }
            };
            LookupHoverDetail.prototype.showNow = function() {
                if (getElementByIdCS(this.id)) {
                    if (!this.loaded)
                        if (null != this.loaderURL) {
                            var a = this;
                            Sfdc.Ajax.get(this.loaderURL, function(b, c) {
                                a.load(b, c)
                            }, {
                                failure: function(b) {
                                    a.failedLoad(b)
                                }
                            })
                        } else
                            return;
                    this.position();
                    this.hover.setStyle("display", "block");
                    this.fadingIn = null
                }
            };
            LookupHoverDetail.prototype.hide = function() {
                if (6 !== this.id.indexOf("00k"))
                    if (this.fadingIn)
                        clearTimeout(this.fadingIn),
                            this.fadingIn = null;
                    else {
                        var a = this;
                        this.fadingOut = setTimeout(function() {
                            a.hideNow()
                        }, LookupHoverDetail.HIDE_DELAY)
                    }
            };
            LookupHoverDetail.prototype.hideNow = function() {
                this.hover.setStyle("display", "none");
                this.fadingOut = null
            };
            LookupHoverDetail.prototype.isShowing = function() {
                return "block" === this.hover.getStyle("display")
            };
            LookupHoverDetail.prototype.load = function(a, b) {
                a && -1 !== a.indexOf("\x3cscript\x3e\nif (this.SfdcApp") ? (top.Ext.Msg.alert(LC.getLabel("ServiceDeskApp", "errorTitle"), LC.getLabel("ServiceDesk", "sessionTimedOutError")),
                                                                             this.hover.div.innerHTML = "") : (this.hover.div.innerHTML = a,
                                                                                                               Util.evalScriptsUnderElement(this.hover.div),
                                                                                                               this.originalClass = this.hover.div.firstChild.className,
                                                                                                               this.height = this.hover.div.offsetHeight,
                                                                                                               delStyleClass(this.hover.div, "lookupHoverDetailLoading"),
                                                                                                               this.position());
                this.loaded = !0
            };
            LookupHoverDetail.prototype.failedLoad = function(a) {
                this.hover.div.innerHTML = "";
                this.failed = this.loaded = !0;
                a = Ext.get(this.id);
                this.qtip && (a && a.child("span.x-tab-strip-text", !0)) && (a.child("span.x-tab-strip-text", !0).qtip = this.qtip)
            };
            LookupHoverDetail.prototype.position = function() {
                var a = getElementByIdCS(this.id)
                , b = a.getBoundingClientRect()
                , c = b.left
                , d = b.top
                , b = a.offsetWidth
                , e = a.offsetHeight
                , f = getScrollX()
                , g = getScrollY()
                , h = getWindowWidth()
                , k = getWindowHeight()
                , a = this.originalClass + " ";

                d + e + this.height < k ? (a += "top",
                                           d = d + e + g) : (a += "bottom",
                                                             d = d - this.height + g);
                c + b - this.bubbleOffset + this.width < h ? (a += "Left",
                                                              c = c + f + b / 2 - this.bubbleOffset) : (a += "Right",
                                                                                                        c = c + f + b / 2 - this.width);
                this.hover.setStyle("left", c + "px");
                this.hover.setStyle("top", d + "px");
                this.hover.div.firstChild.className = a;
                if (this.hover.div.firstChild && (c = Util.hasStyleEndsWith(this.hover.div.firstChild, "Override")))
                    delStyleClass(this.hover.div, "lookupHoverDetailOverridable"),
                        delStyleClass(this.hover.div.firstChild, c),
                        addStyleClass(this.hover.div, c)
                    };
            </script>

            <style>
                .slds-scope .slds-table th, .slds-scope .slds-table td {
                    padding: .25rem;
                }

                #treegrid,
                #treegrid td {
                background-color: white;
                }

                .sticky-top {
                top: 0;
                position: sticky;
                }

                .fancytree-custom-icon {
                display: none !important;
                }

                .initial-table>thead>tr>td,
                .initial-table>thead>tr>th,
                .initial-table>tbody>tr>td,
                .initial-table>tbody>tr>th,
                .initial-table>tfoot>tr>td,
                .initial-table>tfoot>tr>th {
                padding: 0px !important;
                }

                .initial-table td,
                .initial-table th {
                padding: 5px 2px 4px 5px !important;
                font-size: .9em !important;
                }

                body .bPageBlock {
                margin-bottom: unset;
                }

                .dataCell,
                .headerRow {
                white-space: normal !important;
                }

                .banner-labels * {
                font-size: var(--lwc-fontSize4, 0.875rem);
                }

                .banner-labels a,
                .banner-labels a:hover {
                border-bottom: 1px dotted;
                text-decoration: none
                }

                .slds-scope .slds-dropdown__item>* {
                position: relative;
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: .5rem .75rem;
                white-space: nowrap;
                cursor: pointer;
                }

                .sectionHeaderElement {
                font-size: .75rem;
                line-height: 1.25;
                color: rgb(112, 110, 107);
                }

                .sectionHeaderTable {
                margin-bottom: 15px;
                margin-left: 15px;
                }

                .sectionHeaderCol {
                width: 150px;
                }

                /*table .fancytree-ext-table {
                font-size: .9em;
                border-collapse: separate;
                border: 1px solid #ededed;
                width: 100%
                }*/

                .outerColumnHeader {
                display: none;
                }

                /*.totalContainer .bPageBlock {
                background-color: #ffffff !important;
                }

                .totalContainer .bPageBlock th {
                background-color: #ffffff !important;
                }*/

                .text-center {
                text-align: center !important;
                vertical-align: middle !important;
                }

                .green {
                color: #008000 !important;
                }

                .red {
                color: #CC0000 !important;
                }

                .in {
                /*background-color:#fbfba0;*/

                }

                .out {
                /*background-color:#b1d9ea;*/

                }

                .ref-in {
                background-color: #f8f8f8;
                }

                .ref-out {
                background-color: #e2f3ec;
                }

                .ref {
                background-color: REd
                }

                .dateFormat {
                display: none;
                }

                .limit-width-130px {
                min-width: 130px !important;
                width: 130px !important;
                max-width: 130px !important;
                }

                .productName {
                text-align: left !important;
                width: 235px !important;
                min-width: 235px !important;
                max-width: 235px !important;
                white-space: nowrap !important;
                overflow: hidden;
                text-overflow: ellipsis;
                word-break: break-word;
                }

                .productEAN {
                min-width: 105px !important;
                width: 105px;
                max-width: 105px !important;
                }

                .col1 {
                min-width: 80px;
                width: 80px;
                max-width: 80px;
                }

                .col {
                min-width: 80px;
                width: 80px;
                max-width: 130px;
                }

                .totals-col {}

                .checkbox {
                min-width: 20px;
                }

                .totals-checkbox {}

                .corpStatus {}

                .totals-corpStatus {}

                .clientStatus-col {}

                .totals-clientStatus-col {}

                .note {}

                .totals-note {}

                .rapport {
                min-width: 100px;
                }

                .totals-rapport {}

                .numberInput {
                width: 70px;
                }

                .highlight-Keep {
                background-color: #89bded !important;
                }

                .highlight-Delete {
                background-color: #ff0000 !important;
                }

                .highlight-New {
                background-color: #75ff34 !important;
                /*#a5ea85*/
                }

                .highlight-Increase {
                background-color: #bbff9b !important;
                /*#ca87ed*/
                }

                .highlight-Decrease {
                background-color: #eadf81 !important;
                }

                .highlight-Substitute {
                background-color: #ea9f85 !important;
                }

                .highlight-Probablydeleted {
                background-color: #f7ad65 !important;
                /*#e8e8e9*/
                }

                .highlight-Opportunity {
                background-color: #c8e4ff !important;
                }

                .highlight-null {
                background-color: white;
                }

                .highlight-ref {
                background-color: #e6f0ff !important;
                }

                .lengend-square {
                width: 10px;
                height: 10px;
                display: inline-block;
                cursor: pointer;
                }

                .selected {
                border: 2px solid red;
                }

                .border-col {
                border-left: 5px solid #FFFFFF !important;
                }

                .grid-container a {
                text-decoration: none;
                color: rgb(0, 109, 204) !important;
                -webkit-transition: color 0.1s linear;
                transition: color 0.1s linear;
                }

                .grid-container {
                /*width: 95vw;*/
                overflow: auto;
                height: 50vh;
                }

                body {
                overflow-x: hidden;
                }

                @media (min-width : 48em) {

                /*@media all and (min-width: 48em)*/
                .initial-table {
                table-layout: auto !important;
                /*display:inline;*/
                }
                }

                .up {
                /*transform: rotate(-135deg);
                /*-webkit-transform: rotate(-135deg);
                border: solid green;*/
                border-bottom: 5px solid green;
                }

                .down {
                /*transform: rotate(180deg);
                -webkit-transform: rotate(180deg);
                border: solid red;*/
                border-top: 5px solid red;
                }

                .arrow {
                border-left: 5px solid transparent;
                border-right: 5px solid transparent;
                margin-left: 5px;
                display: inline-block;
                vertical-align: middle;

                /*border-width: 0 2px 2px 0;
                display: inline-block;
                padding: 3px;
                margin-left: 5px;*/
                }

                .history {
                background-color: #fff;
                opacity: 0.40;
                }

                /** popup style **/
                .popupBackground {
                background-color: black;
                opacity: 0.20;
                filter: alpha(opacity=20);
                position: absolute;
                width: 100%;
                height: 100%;
                top: 0;
                left: 0;
                z-index: 99;
                }

                .uploadPopup {
                background-color: white;
                border-width: 2px;
                border-style: solid;
                z-index: 100;
                left: 50%;
                padding: 10px;
                position: absolute;
                width: 700px;
                margin-left: -350px;
                top: 10px;
                }

                .legend-items {
                float: left;
                padding-right: 10px;
                padding-top: 5px;
                }

                .legend-label {
                font-size: smaller;
                }

                .fontBold {
                font-weight: bold;
                }

                .keyNoteAnimate {
                animation: fadeOutAnimation 2s;
                }

                @keyframes fadeOutAnimation {
                from {
                background-color: #FBFBA0;
                }

                to {
                background-color: yellow;
                }
                }

                .switchAllBtn {
                margin-left: 5px;
                }

                thead tr th {
                border-color: #e0e3e5;
                }

                tfoot tr th {
                background-color: #e3e3d7;
                }

                .initial-table tr td {
                background-color: #ffffff;
                }

                .initial-table .last {
                border-bottom: 1 !important;
                }

                .INNO_INTRO_DATE_LESS_N a {
                color: {!JSINHTMLENCODE(INNO_INTRO_DATE_LESS_N)} !important;
                }
                .INNO_INTRO_DATE_GREATER_N a {
                color: {!JSINHTMLENCODE(INNO_INTRO_DATE_GREATER_N)} !important;
                }
                .STOP_DATE_LESS_N a {
                color: {!JSINHTMLENCODE(STOP_DATE_LESS_N)} !important;
                }
                .STOP_DATE_GREATER_N a {
                color: {!JSINHTMLENCODE(STOP_DATE_GREATER_N)} !important;
                }

                img.checkImg[title='Not Checked'] {
                content:'\A' !important;
                opacity:0.6;
                }
                .higherLevelPackaging {
                background: #d7fed9 !important;
                }
            </style>
        </body>
    </html>
</apex:page>